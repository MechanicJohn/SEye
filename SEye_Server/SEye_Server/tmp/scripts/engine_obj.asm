; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	c:\Users\Admin\Desktop\Projects\SEye_Server\engine_obj.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_R4?$SimpleVecClass@PAE@@6B@			; SimpleVecClass<unsigned char *>::`RTTI Complete Object Locator'
PUBLIC	??_R4?$SimpleDynVecClass@PAE@@6B@		; SimpleDynVecClass<unsigned char *>::`RTTI Complete Object Locator'
PUBLIC	??_R3?$SimpleDynVecClass@PAE@@8			; SimpleDynVecClass<unsigned char *>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$SimpleDynVecClass@PAE@@8			; SimpleDynVecClass<unsigned char *>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$SimpleVecClass@PAE@@8		; SimpleVecClass<unsigned char *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3?$SimpleVecClass@PAE@@8			; SimpleVecClass<unsigned char *>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$SimpleVecClass@PAE@@8			; SimpleVecClass<unsigned char *>::`RTTI Base Class Array'
PUBLIC	??_R0?AV?$SimpleVecClass@PAE@@@8		; SimpleVecClass<unsigned char *> `RTTI Type Descriptor'
PUBLIC	??_R1A@?0A@EA@?$SimpleDynVecClass@PAE@@8	; SimpleDynVecClass<unsigned char *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$SimpleDynVecClass@PAE@@@8		; SimpleDynVecClass<unsigned char *> `RTTI Type Descriptor'
PUBLIC	??A?$SimpleVecClass@PAE@@QAEAAPAEH@Z		; SimpleVecClass<unsigned char *>::operator[]
PUBLIC	?Count@?$SimpleDynVecClass@PAE@@QAEHXZ		; SimpleDynVecClass<unsigned char *>::Count
PUBLIC	??0?$SimpleVecClass@PAE@@QAE@I@Z		; SimpleVecClass<unsigned char *>::SimpleVecClass<unsigned char *>
PUBLIC	??0?$SimpleDynVecClass@PAE@@QAE@H@Z		; SimpleDynVecClass<unsigned char *>::SimpleDynVecClass<unsigned char *>
PUBLIC	??0?$SimpleVecClass@PAE@@QAE@ABV0@@Z		; SimpleVecClass<unsigned char *>::SimpleVecClass<unsigned char *>
PUBLIC	??0?$SimpleDynVecClass@PAE@@QAE@ABV0@@Z		; SimpleDynVecClass<unsigned char *>::SimpleDynVecClass<unsigned char *>
PUBLIC	??_G?$SimpleVecClass@PAE@@UAEPAXI@Z		; SimpleVecClass<unsigned char *>::`scalar deleting destructor'
PUBLIC	??1?$SimpleVecClass@PAE@@UAE@XZ			; SimpleVecClass<unsigned char *>::~SimpleVecClass<unsigned char *>
PUBLIC	?Uninitialised_Grow@?$SimpleVecClass@PAE@@UAE_NH@Z ; SimpleVecClass<unsigned char *>::Uninitialised_Grow
PUBLIC	?Resize@?$SimpleVecClass@PAE@@UAE_NH@Z		; SimpleVecClass<unsigned char *>::Resize
PUBLIC	?Resize@?$SimpleDynVecClass@PAE@@UAE_NH@Z	; SimpleDynVecClass<unsigned char *>::Resize
PUBLIC	??_G?$SimpleDynVecClass@PAE@@UAEPAXI@Z		; SimpleDynVecClass<unsigned char *>::`scalar deleting destructor'
PUBLIC	??1?$SimpleDynVecClass@PAE@@UAE@XZ		; SimpleDynVecClass<unsigned char *>::~SimpleDynVecClass<unsigned char *>
PUBLIC	?Add@?$SimpleDynVecClass@PAE@@QAEHAAPAE@Z	; SimpleDynVecClass<unsigned char *>::Add
PUBLIC	?SetMaxShieldStrength@@3PAXA			; SetMaxShieldStrength
PUBLIC	?StartObservers@@3PAXA				; StartObservers
PUBLIC	?Get_Obj_Color@@3PAXA				; Get_Obj_Color
PUBLIC	?Powerup_Grant@@3PAXA				; Powerup_Grant
PUBLIC	?MarkOwnerDirty@@3PAXA				; MarkOwnerDirty
PUBLIC	?BuildingGameObjList@@3PAV?$SList@E@@A		; BuildingGameObjList
PUBLIC	?SmartGameObjList@@3PAV?$SList@E@@A		; SmartGameObjList
PUBLIC	?BaseGameObjList@@3PAV?$SList@E@@A		; BaseGameObjList
PUBLIC	?SetMaxHealth@@3PAXA				; SetMaxHealth
PUBLIC	??_C@_0O@HNNKEAKD@Is_PowerPlant?$AA@		; `string'
PUBLIC	??_C@_0BC@BJIJEBBO@Is_SoldierFactory?$AA@	; `string'
PUBLIC	??_C@_0M@FDGOOIDO@Is_Airstrip?$AA@		; `string'
PUBLIC	??_C@_0O@LDEDDJBA@Is_WarFactory?$AA@		; `string'
PUBLIC	??_C@_0M@IGHPANDI@Is_Refinery?$AA@		; `string'
PUBLIC	??_C@_0N@HDCIACDB@Is_ComCenter?$AA@		; `string'
PUBLIC	??_C@_0N@HCJJACKE@Is_RepairBay?$AA@		; `string'
PUBLIC	??_C@_06OJHGLDPL@?$CInull?$CJ?$AA@		; `string'
PUBLIC	??_7?$SimpleDynVecClass@PAE@@6B@		; SimpleDynVecClass<unsigned char *>::`vftable'
PUBLIC	??_7?$SimpleVecClass@PAE@@6B@			; SimpleVecClass<unsigned char *>::`vftable'
EXTRN	??_E?$SimpleVecClass@PAE@@UAEPAXI@Z:PROC	; SimpleVecClass<unsigned char *>::`vector deleting destructor'
EXTRN	??_E?$SimpleDynVecClass@PAE@@UAEPAXI@Z:PROC	; SimpleDynVecClass<unsigned char *>::`vector deleting destructor'
?SetMaxShieldStrength@@3PAXA DD 01H DUP (?)		; SetMaxShieldStrength
?StartObservers@@3PAXA DD 01H DUP (?)			; StartObservers
?Get_Obj_Color@@3PAXA DD 01H DUP (?)			; Get_Obj_Color
?Powerup_Grant@@3PAXA DD 01H DUP (?)			; Powerup_Grant
?MarkOwnerDirty@@3PAXA DD 01H DUP (?)			; MarkOwnerDirty
?BuildingGameObjList@@3PAV?$SList@E@@A DD 01H DUP (?)	; BuildingGameObjList
?SmartGameObjList@@3PAV?$SList@E@@A DD 01H DUP (?)	; SmartGameObjList
?BaseGameObjList@@3PAV?$SList@E@@A DD 01H DUP (?)	; BaseGameObjList
?SetMaxHealth@@3PAXA DD 01H DUP (?)			; SetMaxHealth
;	COMDAT ??_7?$SimpleVecClass@PAE@@6B@
CONST	SEGMENT
??_7?$SimpleVecClass@PAE@@6B@ DD FLAT:??_R4?$SimpleVecClass@PAE@@6B@ ; SimpleVecClass<unsigned char *>::`vftable'
	DD	FLAT:?Uninitialised_Grow@?$SimpleVecClass@PAE@@UAE_NH@Z
	DD	FLAT:??_E?$SimpleVecClass@PAE@@UAEPAXI@Z
	DD	FLAT:?Resize@?$SimpleVecClass@PAE@@UAE_NH@Z
CONST	ENDS
;	COMDAT ??_R4?$SimpleVecClass@PAE@@6B@
rdata$r	SEGMENT
??_R4?$SimpleVecClass@PAE@@6B@ DD 00H			; SimpleVecClass<unsigned char *>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$SimpleVecClass@PAE@@@8
	DD	FLAT:??_R3?$SimpleVecClass@PAE@@8
rdata$r	ENDS
;	COMDAT ??_7?$SimpleDynVecClass@PAE@@6B@
CONST	SEGMENT
??_7?$SimpleDynVecClass@PAE@@6B@ DD FLAT:??_R4?$SimpleDynVecClass@PAE@@6B@ ; SimpleDynVecClass<unsigned char *>::`vftable'
	DD	FLAT:?Uninitialised_Grow@?$SimpleVecClass@PAE@@UAE_NH@Z
	DD	FLAT:??_E?$SimpleDynVecClass@PAE@@UAEPAXI@Z
	DD	FLAT:?Resize@?$SimpleDynVecClass@PAE@@UAE_NH@Z
CONST	ENDS
;	COMDAT ??_R4?$SimpleDynVecClass@PAE@@6B@
rdata$r	SEGMENT
??_R4?$SimpleDynVecClass@PAE@@6B@ DD 00H		; SimpleDynVecClass<unsigned char *>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$SimpleDynVecClass@PAE@@@8
	DD	FLAT:??_R3?$SimpleDynVecClass@PAE@@8
rdata$r	ENDS
;	COMDAT ??_R3?$SimpleDynVecClass@PAE@@8
rdata$r	SEGMENT
??_R3?$SimpleDynVecClass@PAE@@8 DD 00H			; SimpleDynVecClass<unsigned char *>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$SimpleDynVecClass@PAE@@8
rdata$r	ENDS
;	COMDAT ??_R2?$SimpleDynVecClass@PAE@@8
rdata$r	SEGMENT
??_R2?$SimpleDynVecClass@PAE@@8 DD FLAT:??_R1A@?0A@EA@?$SimpleDynVecClass@PAE@@8 ; SimpleDynVecClass<unsigned char *>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$SimpleVecClass@PAE@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$SimpleVecClass@PAE@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$SimpleVecClass@PAE@@8 DD FLAT:??_R0?AV?$SimpleVecClass@PAE@@@8 ; SimpleVecClass<unsigned char *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$SimpleVecClass@PAE@@8
rdata$r	ENDS
;	COMDAT ??_R3?$SimpleVecClass@PAE@@8
rdata$r	SEGMENT
??_R3?$SimpleVecClass@PAE@@8 DD 00H			; SimpleVecClass<unsigned char *>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$SimpleVecClass@PAE@@8
rdata$r	ENDS
;	COMDAT ??_R2?$SimpleVecClass@PAE@@8
rdata$r	SEGMENT
??_R2?$SimpleVecClass@PAE@@8 DD FLAT:??_R1A@?0A@EA@?$SimpleVecClass@PAE@@8 ; SimpleVecClass<unsigned char *>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$SimpleVecClass@PAE@@@8
_DATA	SEGMENT
??_R0?AV?$SimpleVecClass@PAE@@@8 DD FLAT:??_7type_info@@6B@ ; SimpleVecClass<unsigned char *> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$SimpleVecClass@PAE@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@?$SimpleDynVecClass@PAE@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$SimpleDynVecClass@PAE@@8 DD FLAT:??_R0?AV?$SimpleDynVecClass@PAE@@@8 ; SimpleDynVecClass<unsigned char *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$SimpleDynVecClass@PAE@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$SimpleDynVecClass@PAE@@@8
_DATA	SEGMENT
??_R0?AV?$SimpleDynVecClass@PAE@@@8 DD FLAT:??_7type_info@@6B@ ; SimpleDynVecClass<unsigned char *> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$SimpleDynVecClass@PAE@@', 00H
_DATA	ENDS
;	COMDAT ??_C@_06OJHGLDPL@?$CInull?$CJ?$AA@
CONST	SEGMENT
??_C@_06OJHGLDPL@?$CInull?$CJ?$AA@ DB '(null)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HCJJACKE@Is_RepairBay?$AA@
CONST	SEGMENT
??_C@_0N@HCJJACKE@Is_RepairBay?$AA@ DB 'Is_RepairBay', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HDCIACDB@Is_ComCenter?$AA@
CONST	SEGMENT
??_C@_0N@HDCIACDB@Is_ComCenter?$AA@ DB 'Is_ComCenter', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IGHPANDI@Is_Refinery?$AA@
CONST	SEGMENT
??_C@_0M@IGHPANDI@Is_Refinery?$AA@ DB 'Is_Refinery', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LDEDDJBA@Is_WarFactory?$AA@
CONST	SEGMENT
??_C@_0O@LDEDDJBA@Is_WarFactory?$AA@ DB 'Is_WarFactory', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FDGOOIDO@Is_Airstrip?$AA@
CONST	SEGMENT
??_C@_0M@FDGOOIDO@Is_Airstrip?$AA@ DB 'Is_Airstrip', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BJIJEBBO@Is_SoldierFactory?$AA@
CONST	SEGMENT
??_C@_0BC@BJIJEBBO@Is_SoldierFactory?$AA@ DB 'Is_SoldierFactory', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HNNKEAKD@Is_PowerPlant?$AA@
CONST	SEGMENT
??_C@_0O@HNNKEAKD@Is_PowerPlant?$AA@ DB 'Is_PowerPlant', 00H ; `string'
PUBLIC	?As_BuildingGameObj@@YAPAEPAE@Z			; As_BuildingGameObj
; Function compile flags: /Ogtpy
; File c:\users\admin\desktop\projects\seye_server\engine_obj.cpp
;	COMDAT ?As_BuildingGameObj@@YAPAEPAE@Z
_TEXT	SEGMENT
?As_BuildingGameObj@@YAPAEPAE@Z PROC			; As_BuildingGameObj, COMDAT
; _obj$ = esi

; 563  : 	if (!Commands->Get_ID(obj) || !obj)

	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+108]
	push	esi
	call	ecx
	add	esp, 4
	test	eax, eax
	je	SHORT $LN1@As_Buildin
	test	esi, esi
	je	SHORT $LN1@As_Buildin

; 566  : 	}
; 567  : 	return (GameObject *)((ScriptableGameObj *)obj)->As_BuildingGameObj();

	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR [edx+64]
	mov	ecx, esi
	jmp	eax
$LN1@As_Buildin:

; 564  : 	{
; 565  : 		return 0;

	xor	eax, eax

; 568  : }

	ret	0
?As_BuildingGameObj@@YAPAEPAE@Z ENDP			; As_BuildingGameObj
_TEXT	ENDS
PUBLIC	?As_SoldierGameObj@@YAPAEPAE@Z			; As_SoldierGameObj
; Function compile flags: /Ogtpy
;	COMDAT ?As_SoldierGameObj@@YAPAEPAE@Z
_TEXT	SEGMENT
?As_SoldierGameObj@@YAPAEPAE@Z PROC			; As_SoldierGameObj, COMDAT
; _obj$ = esi

; 545  : 	if (!Commands->Get_ID(obj) || !obj)

	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+108]
	push	esi
	call	ecx
	add	esp, 4
	test	eax, eax
	je	SHORT $LN1@As_Soldier
	test	esi, esi
	je	SHORT $LN1@As_Soldier

; 548  : 	}
; 549  : 	return (GameObject *)((ScriptableGameObj *)obj)->As_SoldierGameObj();

	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR [edx+68]
	mov	ecx, esi
	jmp	eax
$LN1@As_Soldier:

; 546  : 	{
; 547  : 		return 0;

	xor	eax, eax

; 550  : }

	ret	0
?As_SoldierGameObj@@YAPAEPAE@Z ENDP			; As_SoldierGameObj
_TEXT	ENDS
PUBLIC	?As_VehicleGameObj@@YAPAEPAE@Z			; As_VehicleGameObj
; Function compile flags: /Ogtpy
;	COMDAT ?As_VehicleGameObj@@YAPAEPAE@Z
_TEXT	SEGMENT
?As_VehicleGameObj@@YAPAEPAE@Z PROC			; As_VehicleGameObj, COMDAT
; _obj$ = esi

; 518  : 	if (!Commands->Get_ID(obj) || !obj)

	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+108]
	push	esi
	call	ecx
	add	esp, 4
	test	eax, eax
	je	SHORT $LN1@As_Vehicle
	test	esi, esi
	je	SHORT $LN1@As_Vehicle

; 521  : 	}
; 522  : 	return (GameObject *)((ScriptableGameObj *)obj)->As_VehicleGameObj();

	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR [edx+40]
	mov	ecx, esi
	jmp	eax
$LN1@As_Vehicle:

; 519  : 	{
; 520  : 		return 0;

	xor	eax, eax

; 523  : }

	ret	0
?As_VehicleGameObj@@YAPAEPAE@Z ENDP			; As_VehicleGameObj
_TEXT	ENDS
PUBLIC	?As_SimpleGameObj@@YAPAEPAE@Z			; As_SimpleGameObj
; Function compile flags: /Ogtpy
;	COMDAT ?As_SimpleGameObj@@YAPAEPAE@Z
_TEXT	SEGMENT
?As_SimpleGameObj@@YAPAEPAE@Z PROC			; As_SimpleGameObj, COMDAT
; _obj$ = esi

; 200  : 	if (!Commands->Get_ID(obj) || !obj)

	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+108]
	push	esi
	call	ecx
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@As_SimpleG
	test	esi, esi
	je	SHORT $LN2@As_SimpleG

; 203  : 	}
; 204  : 	PhysicalGameObj *o2 = ((ScriptableGameObj *)obj)->As_PhysicalGameObj();

	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, esi
	call	eax

; 205  : 	if (!o2)

	test	eax, eax

; 206  : 	{
; 207  : 		return 0;

	je	SHORT $LN2@As_SimpleG

; 208  : 	}
; 209  : 	return (GameObject *)o2->As_SimpleGameObj();

	mov	edx, DWORD PTR [eax]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+156]
	jmp	eax
$LN2@As_SimpleG:

; 201  : 	{
; 202  : 		return 0;

	xor	eax, eax

; 210  : }

	ret	0
?As_SimpleGameObj@@YAPAEPAE@Z ENDP			; As_SimpleGameObj
_TEXT	ENDS
PUBLIC	?As_C4GameObj@@YAPAEPAE@Z			; As_C4GameObj
; Function compile flags: /Ogtpy
;	COMDAT ?As_C4GameObj@@YAPAEPAE@Z
_TEXT	SEGMENT
?As_C4GameObj@@YAPAEPAE@Z PROC				; As_C4GameObj, COMDAT
; _obj$ = esi

; 158  : 	if (!Commands->Get_ID(obj) || !obj)

	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+108]
	push	esi
	call	ecx
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@As_C4GameO
	test	esi, esi
	je	SHORT $LN2@As_C4GameO

; 161  : 	}
; 162  : 	PhysicalGameObj *o2 = ((ScriptableGameObj *)obj)->As_PhysicalGameObj();

	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, esi
	call	eax

; 163  : 	if (!o2)

	test	eax, eax

; 164  : 	{
; 165  : 		return 0;

	je	SHORT $LN2@As_C4GameO

; 166  : 	}
; 167  : 	return (GameObject *)o2->As_C4GameObj();

	mov	edx, DWORD PTR [eax]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+140]
	jmp	eax
$LN2@As_C4GameO:

; 159  : 	{
; 160  : 		return 0;

	xor	eax, eax

; 168  : }

	ret	0
?As_C4GameObj@@YAPAEPAE@Z ENDP				; As_C4GameObj
_TEXT	ENDS
PUBLIC	?Get_Object_Type@@YAHPAE@Z			; Get_Object_Type
; Function compile flags: /Ogtpy
;	COMDAT ?Get_Object_Type@@YAHPAE@Z
_TEXT	SEGMENT
?Get_Object_Type@@YAHPAE@Z PROC				; Get_Object_Type, COMDAT
; _obj$ = esi

; 116  : 	if (!Commands->Get_ID(obj) || !obj)

	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+108]
	push	esi
	call	ecx
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@Get_Object
	test	esi, esi
	je	SHORT $LN2@Get_Object

; 119  : 	}
; 120  : 	DamageableGameObj *o = ((ScriptableGameObj *)obj)->As_DamageableGameObj();

	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR [edx+60]
	mov	ecx, esi
	call	eax

; 121  : 	if (!o)

	test	eax, eax

; 122  : 	{
; 123  : 		return 0;

	je	SHORT $LN2@Get_Object

; 124  : 	}
; 125  : 	return o->PlayerType;

	mov	eax, DWORD PTR [eax+1892]

; 126  : }

	ret	0
$LN2@Get_Object:

; 117  : 	{
; 118  : 		return 0;

	xor	eax, eax

; 126  : }

	ret	0
?Get_Object_Type@@YAHPAE@Z ENDP				; Get_Object_Type
_TEXT	ENDS
PUBLIC	?InitEngineObj@@YAXI@Z				; InitEngineObj
; Function compile flags: /Ogtpy
;	COMDAT ?InitEngineObj@@YAXI@Z
_TEXT	SEGMENT
?InitEngineObj@@YAXI@Z PROC				; InitEngineObj, COMDAT

; 53   : {

	mov	eax, DWORD PTR ?Exe@@3HA		; Exe

; 54   : 	switch(exe)

	cmp	eax, 3
	ja	$LN1@InitEngine@8
	jmp	DWORD PTR $LN10@InitEngine@8[eax*4]
$LN5@InitEngine@8:

; 55   : 	{
; 56   : 		case 0: //game.exe
; 57   : 			BuildingGameObjList = (SList<GameObject> *)0x00856FE8;

	mov	DWORD PTR ?BuildingGameObjList@@3PAV?$SList@E@@A, 8744936 ; BuildingGameObjList, 00856fe8H

; 58   : 			SmartGameObjList = (SList<GameObject> *)0x00856FD8;

	mov	DWORD PTR ?SmartGameObjList@@3PAV?$SList@E@@A, 8744920 ; SmartGameObjList, 00856fd8H

; 59   : 			BaseGameObjList = (SList<GameObject> *)0x00856FF8;

	mov	DWORD PTR ?BaseGameObjList@@3PAV?$SList@E@@A, 8744952 ; BaseGameObjList, 00856ff8H

; 60   : 			Get_Obj_Color = (void *)0x006D97B0;

	mov	DWORD PTR ?Get_Obj_Color@@3PAXA, 7182256 ; Get_Obj_Color, 006d97b0H

; 61   : 			SetMaxHealth = (void *)0x00691820;

	mov	DWORD PTR ?SetMaxHealth@@3PAXA, 6887456	; SetMaxHealth, 00691820H

; 62   : 			SetMaxShieldStrength = (void *)0x006930E0;

	mov	DWORD PTR ?SetMaxShieldStrength@@3PAXA, 6893792 ; SetMaxShieldStrength, 006930e0H

; 63   : 			MarkOwnerDirty = (void *)0x00693740;

	mov	DWORD PTR ?MarkOwnerDirty@@3PAXA, 6895424 ; MarkOwnerDirty, 00693740H

; 64   : 			StartObservers = (void *)0x006B6C40;

	mov	DWORD PTR ?StartObservers@@3PAXA, 7040064 ; StartObservers, 006b6c40H

; 65   : 			Powerup_Grant = (void *)0x006F09F0;

	mov	DWORD PTR ?Powerup_Grant@@3PAXA, 7277040 ; Powerup_Grant, 006f09f0H

; 110  : 			break;
; 111  : 	}
; 112  : }

	ret	0
$LN4@InitEngine@8:

; 66   : 			break;
; 67   : 		case 1: //server.dat
; 68   : 			BuildingGameObjList = (SList<GameObject> *)0x008561D0;

	mov	DWORD PTR ?BuildingGameObjList@@3PAV?$SList@E@@A, 8741328 ; BuildingGameObjList, 008561d0H

; 69   : 			SmartGameObjList = (SList<GameObject> *)0x008561C0;

	mov	DWORD PTR ?SmartGameObjList@@3PAV?$SList@E@@A, 8741312 ; SmartGameObjList, 008561c0H

; 70   : 			BaseGameObjList = (SList<GameObject> *)0x008561E0;

	mov	DWORD PTR ?BaseGameObjList@@3PAV?$SList@E@@A, 8741344 ; BaseGameObjList, 008561e0H

; 71   : 			Get_Obj_Color = (void *)0x006D9050;

	mov	DWORD PTR ?Get_Obj_Color@@3PAXA, 7180368 ; Get_Obj_Color, 006d9050H

; 72   : 			SetMaxHealth = (void *)0x006910C0;

	mov	DWORD PTR ?SetMaxHealth@@3PAXA, 6885568	; SetMaxHealth, 006910c0H

; 73   : 			SetMaxShieldStrength = (void *)0x00692980;

	mov	DWORD PTR ?SetMaxShieldStrength@@3PAXA, 6891904 ; SetMaxShieldStrength, 00692980H

; 74   : 			MarkOwnerDirty = (void *)0x00692FE0;

	mov	DWORD PTR ?MarkOwnerDirty@@3PAXA, 6893536 ; MarkOwnerDirty, 00692fe0H

; 75   : 			StartObservers = (void *)0x006B64E0;

	mov	DWORD PTR ?StartObservers@@3PAXA, 7038176 ; StartObservers, 006b64e0H

; 76   : 			Powerup_Grant = (void *)0x006EFFB0;

	mov	DWORD PTR ?Powerup_Grant@@3PAXA, 7274416 ; Powerup_Grant, 006effb0H

; 110  : 			break;
; 111  : 	}
; 112  : }

	ret	0
$LN3@InitEngine@8:

; 77   : 			break;
; 78   : 		case 2: //RH73
; 79   : 			BuildingGameObjList = (SList<GameObject> *)0x08BA05FC;

	mov	DWORD PTR ?BuildingGameObjList@@3PAV?$SList@E@@A, 146408956 ; BuildingGameObjList, 08ba05fcH

; 80   : 			SmartGameObjList = (SList<GameObject> *)0x08BA05E4;

	mov	DWORD PTR ?SmartGameObjList@@3PAV?$SList@E@@A, 146408932 ; SmartGameObjList, 08ba05e4H

; 81   : 			BaseGameObjList = (SList<GameObject> *)0x08BA05D8;

	mov	DWORD PTR ?BaseGameObjList@@3PAV?$SList@E@@A, 146408920 ; BaseGameObjList, 08ba05d8H

; 82   : 			Get_Obj_Color = (void *)0x0810E304;

	mov	DWORD PTR ?Get_Obj_Color@@3PAXA, 135324420 ; Get_Obj_Color, 0810e304H

; 83   : 			SetMaxHealth = (void *)0x08111B88;

	mov	DWORD PTR ?SetMaxHealth@@3PAXA, 135338888 ; SetMaxHealth, 08111b88H

; 84   : 			SetMaxShieldStrength = (void *)0x08111C9C;

	mov	DWORD PTR ?SetMaxShieldStrength@@3PAXA, 135339164 ; SetMaxShieldStrength, 08111c9cH

; 85   : 			MarkOwnerDirty = (void *)0x08111D84;

	mov	DWORD PTR ?MarkOwnerDirty@@3PAXA, 135339396 ; MarkOwnerDirty, 08111d84H

; 86   : 			StartObservers = (void *)0x08152F78;

	mov	DWORD PTR ?StartObservers@@3PAXA, 135606136 ; StartObservers, 08152f78H

; 87   : 			Powerup_Grant = (void *)0x08144268;

	mov	DWORD PTR ?Powerup_Grant@@3PAXA, 135545448 ; Powerup_Grant, 08144268H

; 110  : 			break;
; 111  : 	}
; 112  : }

	ret	0
$LN2@InitEngine@8:

; 88   : 			break;
; 89   : 		case 3: //RH8
; 90   : 			BuildingGameObjList = (SList<GameObject> *)0x089A9090;

	mov	DWORD PTR ?BuildingGameObjList@@3PAV?$SList@E@@A, 144347280 ; BuildingGameObjList, 089a9090H

; 91   : 			SmartGameObjList = (SList<GameObject> *)0x089A9078;

	mov	DWORD PTR ?SmartGameObjList@@3PAV?$SList@E@@A, 144347256 ; SmartGameObjList, 089a9078H

; 92   : 			BaseGameObjList = (SList<GameObject> *)0x089A906C;

	mov	DWORD PTR ?BaseGameObjList@@3PAV?$SList@E@@A, 144347244 ; BaseGameObjList, 089a906cH

; 93   : 			Get_Obj_Color = (void *)0x081006FC;

	mov	DWORD PTR ?Get_Obj_Color@@3PAXA, 135268092 ; Get_Obj_Color, 081006fcH

; 94   : 			SetMaxHealth = (void *)0x08103C18;

	mov	DWORD PTR ?SetMaxHealth@@3PAXA, 135281688 ; SetMaxHealth, 08103c18H

; 95   : 			SetMaxShieldStrength = (void *)0x08103D2E;

	mov	DWORD PTR ?SetMaxShieldStrength@@3PAXA, 135281966 ; SetMaxShieldStrength, 08103d2eH

; 96   : 			MarkOwnerDirty = (void *)0x08103E20;

	mov	DWORD PTR ?MarkOwnerDirty@@3PAXA, 135282208 ; MarkOwnerDirty, 08103e20H

; 97   : 			StartObservers = (void *)0x081410B2;

	mov	DWORD PTR ?StartObservers@@3PAXA, 135532722 ; StartObservers, 081410b2H

; 98   : 			Powerup_Grant = (void *)0x081332C6;

	mov	DWORD PTR ?Powerup_Grant@@3PAXA, 135475910 ; Powerup_Grant, 081332c6H

; 110  : 			break;
; 111  : 	}
; 112  : }

	ret	0
$LN1@InitEngine@8:

; 99   : 			break;
; 100  : 		default:
; 101  : 			BuildingGameObjList = (SList<GameObject> *)0;

	xor	eax, eax
	mov	DWORD PTR ?BuildingGameObjList@@3PAV?$SList@E@@A, eax ; BuildingGameObjList

; 102  : 			SmartGameObjList = (SList<GameObject> *)0;

	mov	DWORD PTR ?SmartGameObjList@@3PAV?$SList@E@@A, eax ; SmartGameObjList

; 103  : 			BaseGameObjList = (SList<GameObject> *)0;

	mov	DWORD PTR ?BaseGameObjList@@3PAV?$SList@E@@A, eax ; BaseGameObjList

; 104  : 			Get_Obj_Color = (void *)0;

	mov	DWORD PTR ?Get_Obj_Color@@3PAXA, eax	; Get_Obj_Color

; 105  : 			SetMaxHealth = (void *)0;

	mov	DWORD PTR ?SetMaxHealth@@3PAXA, eax	; SetMaxHealth

; 106  : 			SetMaxShieldStrength = (void *)0;

	mov	DWORD PTR ?SetMaxShieldStrength@@3PAXA, eax ; SetMaxShieldStrength

; 107  : 			MarkOwnerDirty = (void *)0;

	mov	DWORD PTR ?MarkOwnerDirty@@3PAXA, eax	; MarkOwnerDirty

; 108  : 			StartObservers = (void *)0;

	mov	DWORD PTR ?StartObservers@@3PAXA, eax	; StartObservers

; 109  : 			Powerup_Grant = (void *)0;

	mov	DWORD PTR ?Powerup_Grant@@3PAXA, eax	; Powerup_Grant

; 110  : 			break;
; 111  : 	}
; 112  : }

	ret	0
	npad	3
$LN10@InitEngine@8:
	DD	$LN5@InitEngine@8
	DD	$LN4@InitEngine@8
	DD	$LN3@InitEngine@8
	DD	$LN2@InitEngine@8
?InitEngineObj@@YAXI@Z ENDP				; InitEngineObj
; Function compile flags: /Ogtpy
; File c:\users\admin\desktop\projects\seye_server\engine_vector.h
;	COMDAT ??1?$SimpleVecClass@PAE@@UAE@XZ
_TEXT	SEGMENT
??1?$SimpleVecClass@PAE@@UAE@XZ PROC			; SimpleVecClass<unsigned char *>::~SimpleVecClass<unsigned char *>, COMDAT
; _this$ = ecx

; 188  : 	{

	push	esi
	mov	esi, ecx

; 189  : 		if (Vector)

	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [esi], OFFSET ??_7?$SimpleVecClass@PAE@@6B@
	test	eax, eax
	je	SHORT $LN1@SimpleVecC

; 190  : 		{
; 191  : 			delete[] Vector;

	push	eax
	call	DWORD PTR ?RenDelete@@3P6AXPAX@ZA	; RenDelete
	add	esp, 4

; 192  : 			Vector = 0;

	mov	DWORD PTR [esi+4], 0

; 193  : 			VectorMax = 0;

	mov	DWORD PTR [esi+8], 0
$LN1@SimpleVecC:
	pop	esi

; 194  : 		}
; 195  : 	}

	ret	0
??1?$SimpleVecClass@PAE@@UAE@XZ ENDP			; SimpleVecClass<unsigned char *>::~SimpleVecClass<unsigned char *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$SimpleDynVecClass@PAE@@UAE@XZ
_TEXT	SEGMENT
??1?$SimpleDynVecClass@PAE@@UAE@XZ PROC			; SimpleDynVecClass<unsigned char *>::~SimpleDynVecClass<unsigned char *>, COMDAT
; _this$ = ecx

; 271  : 	{

	push	esi
	mov	esi, ecx

; 272  : 		if (Vector)

	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [esi], OFFSET ??_7?$SimpleDynVecClass@PAE@@6B@
	test	eax, eax
	je	SHORT $LN1@SimpleDynV

; 273  : 		{
; 274  : 			delete[] Vector;

	push	eax
	call	DWORD PTR ?RenDelete@@3P6AXPAX@ZA	; RenDelete
	add	esp, 4

; 275  : 			Vector = 0;

	mov	DWORD PTR [esi+4], 0
$LN1@SimpleDynV:

; 276  : 		}
; 277  : 	}

	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [esi], OFFSET ??_7?$SimpleVecClass@PAE@@6B@
	test	eax, eax
	je	SHORT $LN6@SimpleDynV
	push	eax
	call	DWORD PTR ?RenDelete@@3P6AXPAX@ZA	; RenDelete
	add	esp, 4
	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+8], 0
$LN6@SimpleDynV:
	pop	esi
	ret	0
??1?$SimpleDynVecClass@PAE@@UAE@XZ ENDP			; SimpleDynVecClass<unsigned char *>::~SimpleDynVecClass<unsigned char *>
_TEXT	ENDS
PUBLIC	?Is_Simple@@YA_NPAE@Z				; Is_Simple
; Function compile flags: /Ogtpy
; File c:\users\admin\desktop\projects\seye_server\engine_obj.cpp
;	COMDAT ?Is_Simple@@YA_NPAE@Z
_TEXT	SEGMENT
?Is_Simple@@YA_NPAE@Z PROC				; Is_Simple, COMDAT
; _obj$ = esi

; 662  : 	if (As_SimpleGameObj(obj))

	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+108]
	push	esi
	call	ecx
	add	esp, 4
	test	eax, eax
	je	SHORT $LN1@Is_Simple
	test	esi, esi
	je	SHORT $LN1@Is_Simple
	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, esi
	call	eax
	test	eax, eax
	je	SHORT $LN1@Is_Simple
	mov	edx, DWORD PTR [eax]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+156]
	call	eax
	test	eax, eax
	je	SHORT $LN1@Is_Simple

; 663  : 	{
; 664  : 		return true;

	mov	al, 1

; 667  : }

	ret	0
$LN1@Is_Simple:

; 665  : 	}
; 666  : 	return false;

	xor	al, al

; 667  : }

	ret	0
?Is_Simple@@YA_NPAE@Z ENDP				; Is_Simple
_TEXT	ENDS
PUBLIC	?Is_C4@@YA_NPAE@Z				; Is_C4
; Function compile flags: /Ogtpy
;	COMDAT ?Is_C4@@YA_NPAE@Z
_TEXT	SEGMENT
?Is_C4@@YA_NPAE@Z PROC					; Is_C4, COMDAT
; _obj$ = esi

; 626  : 	if (As_C4GameObj(obj))

	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+108]
	push	esi
	call	ecx
	add	esp, 4
	test	eax, eax
	je	SHORT $LN1@Is_C4
	test	esi, esi
	je	SHORT $LN1@Is_C4
	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, esi
	call	eax
	test	eax, eax
	je	SHORT $LN1@Is_C4
	mov	edx, DWORD PTR [eax]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+140]
	call	eax
	test	eax, eax
	je	SHORT $LN1@Is_C4

; 627  : 	{
; 628  : 		return true;

	mov	al, 1

; 631  : }

	ret	0
$LN1@Is_C4:

; 629  : 	}
; 630  : 	return false;

	xor	al, al

; 631  : }

	ret	0
?Is_C4@@YA_NPAE@Z ENDP					; Is_C4
_TEXT	ENDS
PUBLIC	?Is_Vehicle@@YA_NPAE@Z				; Is_Vehicle
; Function compile flags: /Ogtpy
;	COMDAT ?Is_Vehicle@@YA_NPAE@Z
_TEXT	SEGMENT
?Is_Vehicle@@YA_NPAE@Z PROC				; Is_Vehicle, COMDAT
; _obj$ = esi

; 590  : 	if (As_VehicleGameObj(obj))

	mov	eax, DWORD PTR ?Commands@@3PAUScriptCommands@@A ; Commands
	mov	ecx, DWORD PTR [eax+108]
	push	esi
	call	ecx
	add	esp, 4
	test	eax, eax
	je	SHORT $LN1@Is_Vehicle
	test	esi, esi
	je	SHORT $LN1@Is_Vehicle
	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR [edx+40]
	mov	ecx, esi
	call	eax
	test	eax, eax
	je	SHORT $LN1@Is_Vehicle

; 591  : 	{
; 592  : 		return true;

	mov	al, 1

; 595  : }

	ret	0
$LN1@Is_Vehicle:

; 593  : 	}
; 594  : 	return false;

	xor	al, al

; 595  : }

	ret	0
?Is_Vehicle@@YA_NPAE@Z ENDP				; Is_Vehicle
; Function compile flags: /Ogtpy
;	COMDAT ??_G?$SimpleVecClass@PAE@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$SimpleVecClass@PAE@@UAEPAXI@Z PROC		; SimpleVecClass<unsigned char *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [esi], OFFSET ??_7?$SimpleVecClass@PAE@@6B@
	test	eax, eax
	je	SHORT $LN4@scalar@14
	push	eax
	call	DWORD PTR ?RenDelete@@3P6AXPAX@ZA	; RenDelete
	add	esp, 4
	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+8], 0
$LN4@scalar@14:
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $LN11@scalar@14
	push	esi
	call	DWORD PTR ?RenDelete@@3P6AXPAX@ZA	; RenDelete
	add	esp, 4
$LN11@scalar@14:
	mov	eax, esi
	pop	esi
	ret	4
??_G?$SimpleVecClass@PAE@@UAEPAXI@Z ENDP		; SimpleVecClass<unsigned char *>::`scalar deleting destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$SimpleDynVecClass@PAE@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$SimpleDynVecClass@PAE@@UAEPAXI@Z PROC		; SimpleDynVecClass<unsigned char *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [esi], OFFSET ??_7?$SimpleDynVecClass@PAE@@6B@
	test	eax, eax
	je	SHORT $LN4@scalar@15
	push	eax
	call	DWORD PTR ?RenDelete@@3P6AXPAX@ZA	; RenDelete
	add	esp, 4
	mov	DWORD PTR [esi+4], 0
$LN4@scalar@15:
	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [esi], OFFSET ??_7?$SimpleVecClass@PAE@@6B@
	test	eax, eax
	je	SHORT $LN9@scalar@15
	push	eax
	call	DWORD PTR ?RenDelete@@3P6AXPAX@ZA	; RenDelete
	add	esp, 4
	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+8], 0
$LN9@scalar@15:
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $LN16@scalar@15
	push	esi
	call	DWORD PTR ?RenDelete@@3P6AXPAX@ZA	; RenDelete
	add	esp, 4
$LN16@scalar@15:
	mov	eax, esi
	pop	esi
	ret	4
??_G?$SimpleDynVecClass@PAE@@UAEPAXI@Z ENDP		; SimpleDynVecClass<unsigned char *>::`scalar deleting destructor'
; Function compile flags: /Ogtpy
; File c:\users\admin\desktop\projects\seye_server\engine_vector.h
_TEXT	ENDS
;	COMDAT ?Resize@?$SimpleVecClass@PAE@@UAE_NH@Z
_TEXT	SEGMENT
_newsize$ = 8						; size = 4
?Resize@?$SimpleVecClass@PAE@@UAE_NH@Z PROC		; SimpleVecClass<unsigned char *>::Resize, COMDAT
; _this$ = ecx

; 197  : 	{

	push	ebp

; 198  : 		T *vec;
; 199  : 		if (VectorMax == newsize)

	mov	ebp, DWORD PTR _newsize$[esp]
	push	esi
	mov	esi, ecx
	cmp	DWORD PTR [esi+8], ebp

; 200  : 		{
; 201  : 			return true;

	je	$LN1@Resize

; 202  : 		}
; 203  : 		if (newsize > 0)

	test	ebp, ebp
	jle	SHORT $LN5@Resize

; 204  : 		{
; 205  : 			vec = new T[newsize];

	xor	ecx, ecx
	mov	eax, ebp
	mov	edx, 4
	mul	edx
	seto	cl
	push	edi
	neg	ecx
	or	ecx, eax
	cmp	DWORD PTR ?RenNew@@3P6APAXK@ZA, 0	; RenNew
	mov	edi, ecx
	jne	SHORT $LN9@Resize
	call	?InitEngine@@YAXXZ			; InitEngine
$LN9@Resize:
	push	edi
	call	DWORD PTR ?RenNew@@3P6APAXK@ZA		; RenNew
	mov	edi, eax

; 206  : #ifdef DEBUG
; 207  : 			log("[I] SimpleVecClass allocate from 0x%08X",_ReturnAddress());
; 208  : #endif
; 209  : 			if (Vector)

	mov	eax, DWORD PTR [esi+4]
	add	esp, 4
	test	eax, eax
	je	SHORT $LN4@Resize

; 210  : 			{
; 211  : 				int count = VectorMax;

	mov	ecx, DWORD PTR [esi+8]

; 212  : 				if (newsize < count)

	cmp	ebp, ecx
	jge	SHORT $LN3@Resize

; 213  : 				{
; 214  : 					count = newsize;

	mov	ecx, ebp
$LN3@Resize:

; 215  : 				}
; 216  : 				memcpy(vec,Vector,count*sizeof(T));

	add	ecx, ecx
	add	ecx, ecx
	push	ecx
	push	eax
	push	edi
	call	_memcpy

; 217  : 				delete[] Vector;

	mov	edx, DWORD PTR [esi+4]
	push	edx
	call	DWORD PTR ?RenDelete@@3P6AXPAX@ZA	; RenDelete
	add	esp, 16					; 00000010H

; 218  : 				Vector = 0;

	mov	DWORD PTR [esi+4], 0
$LN4@Resize:

; 219  : 			}
; 220  : 			Vector = vec;

	mov	DWORD PTR [esi+4], edi
	pop	edi

; 221  : 			VectorMax = newsize;

	mov	DWORD PTR [esi+8], ebp
	pop	esi

; 230  : 			}
; 231  : 		}
; 232  : 		return true;

	mov	al, 1
	pop	ebp

; 233  : 	}

	ret	4
$LN5@Resize:

; 222  : 		}
; 223  : 		else
; 224  : 		{
; 225  : 			VectorMax = 0;
; 226  : 			if (Vector)

	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [esi+8], 0
	test	eax, eax
	je	SHORT $LN1@Resize

; 227  : 			{
; 228  : 				delete[] Vector;

	push	eax
	call	DWORD PTR ?RenDelete@@3P6AXPAX@ZA	; RenDelete
	add	esp, 4

; 229  : 				Vector = 0;

	mov	DWORD PTR [esi+4], 0
$LN1@Resize:
	pop	esi

; 230  : 			}
; 231  : 		}
; 232  : 		return true;

	mov	al, 1
	pop	ebp

; 233  : 	}

	ret	4
?Resize@?$SimpleVecClass@PAE@@UAE_NH@Z ENDP		; SimpleVecClass<unsigned char *>::Resize
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Uninitialised_Grow@?$SimpleVecClass@PAE@@UAE_NH@Z
_TEXT	SEGMENT
_newsize$ = 8						; size = 4
?Uninitialised_Grow@?$SimpleVecClass@PAE@@UAE_NH@Z PROC	; SimpleVecClass<unsigned char *>::Uninitialised_Grow, COMDAT
; _this$ = ecx

; 155  : 	{

	push	esi
	push	edi

; 156  : 		if ((newsize > 0) && (newsize > VectorMax))

	mov	edi, DWORD PTR _newsize$[esp+4]
	mov	esi, ecx
	test	edi, edi
	jle	SHORT $LN11@Uninitiali
	cmp	edi, DWORD PTR [esi+8]
	jle	SHORT $LN11@Uninitiali

; 157  : 		{
; 158  : 			if (Vector)

	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN5@Uninitiali

; 159  : 			{
; 160  : 				delete[] Vector;

	push	eax
	call	DWORD PTR ?RenDelete@@3P6AXPAX@ZA	; RenDelete
	add	esp, 4
$LN5@Uninitiali:
	push	ebx

; 161  : 			}
; 162  : 			Vector = new T[newsize];

	xor	ebx, ebx
	mov	eax, edi
	mov	ecx, 4
	mul	ecx
	seto	bl
	neg	ebx
	or	ebx, eax
	cmp	DWORD PTR ?RenNew@@3P6APAXK@ZA, 0	; RenNew
	jne	SHORT $LN7@Uninitiali
	call	?InitEngine@@YAXXZ			; InitEngine
$LN7@Uninitiali:
	push	ebx
	call	DWORD PTR ?RenNew@@3P6APAXK@ZA		; RenNew
	add	esp, 4
	mov	DWORD PTR [esi+4], eax

; 163  : #ifdef DEBUG
; 164  : 			log("[I] SimpleVecClass allocate from 0x%08X",_ReturnAddress());
; 165  : #endif
; 166  : 			VectorMax = newsize;

	mov	DWORD PTR [esi+8], edi
	pop	ebx
$LN11@Uninitiali:
	pop	edi

; 167  : 		}
; 168  : 		return true;

	mov	al, 1
	pop	esi

; 169  : 	}

	ret	4
?Uninitialised_Grow@?$SimpleVecClass@PAE@@UAE_NH@Z ENDP	; SimpleVecClass<unsigned char *>::Uninitialised_Grow
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Resize@?$SimpleDynVecClass@PAE@@UAE_NH@Z
_TEXT	SEGMENT
_newsize$ = 8						; size = 4
?Resize@?$SimpleDynVecClass@PAE@@UAE_NH@Z PROC		; SimpleDynVecClass<unsigned char *>::Resize, COMDAT
; _this$ = ecx

; 280  : 		if (SimpleVecClass<T>::Resize(newsize))

	mov	eax, DWORD PTR _newsize$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	?Resize@?$SimpleVecClass@PAE@@UAE_NH@Z	; SimpleVecClass<unsigned char *>::Resize
	test	al, al
	je	SHORT $LN2@Resize@2

; 281  : 		{
; 282  : 			if (VectorMax < ActiveCount)

	mov	eax, DWORD PTR [esi+8]
	cmp	eax, DWORD PTR [esi+12]
	jge	SHORT $LN1@Resize@2

; 283  : 			{
; 284  : 				ActiveCount = VectorMax;

	mov	DWORD PTR [esi+12], eax
$LN1@Resize@2:

; 285  : 			}
; 286  : 			return true;

	mov	al, 1
	pop	esi

; 289  : 	}

	ret	4
$LN2@Resize@2:

; 287  : 		}
; 288  : 		return false;

	xor	al, al
	pop	esi

; 289  : 	}

	ret	4
?Resize@?$SimpleDynVecClass@PAE@@UAE_NH@Z ENDP		; SimpleDynVecClass<unsigned char *>::Resize
END
