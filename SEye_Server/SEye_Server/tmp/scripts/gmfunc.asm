; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	c:\Users\Admin\Desktop\Projects\SEye_Server\gmfunc.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_R4?$numpunct@D@std@@6B@			; std::numpunct<char>::`RTTI Complete Object Locator'
PUBLIC	??_R3?$numpunct@D@std@@8			; std::numpunct<char>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$numpunct@D@std@@8			; std::numpunct<char>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$numpunct@D@std@@8		; std::numpunct<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$numpunct@D@std@@@8			; std::numpunct<char> `RTTI Type Descriptor'
PUBLIC	??_R4?$codecvt@DDH@std@@6B@			; std::codecvt<char,char,int>::`RTTI Complete Object Locator'
PUBLIC	??_R3?$codecvt@DDH@std@@8			; std::codecvt<char,char,int>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$codecvt@DDH@std@@8			; std::codecvt<char,char,int>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$codecvt@DDH@std@@8		; std::codecvt<char,char,int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$codecvt@DDH@std@@@8			; std::codecvt<char,char,int> `RTTI Type Descriptor'
PUBLIC	??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Complete Object Locator'
PUBLIC	??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > `RTTI Type Descriptor'
PUBLIC	??_R4failure@ios_base@std@@6B@			; std::ios_base::failure::`RTTI Complete Object Locator'
PUBLIC	??_R3failure@ios_base@std@@8			; std::ios_base::failure::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2failure@ios_base@std@@8			; std::ios_base::failure::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@failure@ios_base@std@@8		; std::ios_base::failure::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ctype@D@std@@6B@				; std::ctype<char>::`RTTI Complete Object Locator'
PUBLIC	??_R3?$ctype@D@std@@8				; std::ctype<char>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ctype@D@std@@8				; std::ctype<char>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ctype@D@std@@8			; std::ctype<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$ctype@D@std@@@8			; std::ctype<char> `RTTI Type Descriptor'
PUBLIC	??_R4ctype_base@std@@6B@			; std::ctype_base::`RTTI Complete Object Locator'
PUBLIC	??_R3ctype_base@std@@8				; std::ctype_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ctype_base@std@@8				; std::ctype_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ctype_base@std@@8			; std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUctype_base@std@@@8			; std::ctype_base `RTTI Type Descriptor'
PUBLIC	??_R4codecvt_base@std@@6B@			; std::codecvt_base::`RTTI Complete Object Locator'
PUBLIC	??_R3codecvt_base@std@@8			; std::codecvt_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2codecvt_base@std@@8			; std::codecvt_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@codecvt_base@std@@8		; std::codecvt_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVcodecvt_base@std@@@8			; std::codecvt_base `RTTI Type Descriptor'
PUBLIC	??_R4facet@locale@std@@6B@			; std::locale::facet::`RTTI Complete Object Locator'
PUBLIC	??_R3facet@locale@std@@8			; std::locale::facet::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2facet@locale@std@@8			; std::locale::facet::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@facet@locale@std@@8		; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVfacet@locale@std@@@8			; std::locale::facet `RTTI Type Descriptor'
PUBLIC	??_R4runtime_error@std@@6B@			; std::runtime_error::`RTTI Complete Object Locator'
PUBLIC	??_R3runtime_error@std@@8			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2runtime_error@std@@8			; std::runtime_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@runtime_error@std@@8		; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R3?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ofstream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_filebuf<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R4?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
PUBLIC	??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
PUBLIC	??_R4?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_iostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R17?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_iostream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R4?$basic_istream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_istream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R13A@3EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (4,0,4,64)'
PUBLIC	??_R1A@A@3EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
PUBLIC	??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,0,4,80)'
PUBLIC	??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_istream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_streambuf<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ios<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8	; std::basic_ios<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8	; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R4ios_base@std@@6B@				; std::ios_base::`RTTI Complete Object Locator'
PUBLIC	??_R3ios_base@std@@8				; std::ios_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ios_base@std@@8				; std::ios_base::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R3?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$_Iosb@H@std@@@8			; std::_Iosb<int> `RTTI Type Descriptor'
PUBLIC	??_R1A@?0A@EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVios_base@std@@@8			; std::ios_base `RTTI Type Descriptor'
PUBLIC	??0INIWrapper@@QAE@PBD@Z			; INIWrapper::INIWrapper
PUBLIC	??4INIWrapper@@QAEAAV0@PBD@Z			; INIWrapper::operator=
PUBLIC	??1INIWrapper@@QAE@XZ				; INIWrapper::~INIWrapper
PUBLIC	?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::end
PUBLIC	??$_Iter_random@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::_Iter_random<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??Y?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@H@Z ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator+=
PUBLIC	??Y?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@H@Z ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator+=
PUBLIC	??H?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV01@H@Z ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator+
PUBLIC	?_Checked_iterator_base@?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPADXZ ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::_Checked_iterator_base
PUBLIC	??$_Checked_base@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPADAAV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,std::_Different_checked_iterator_base_type_tag>
PUBLIC	??$_Checked_base@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPADAAV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::_Checked_base<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$_Transform@PADPADP6AHH@ZUforward_iterator_tag@std@@@std@@YAPADPAD00P6AHH@ZUforward_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Transform<char *,char *,int (__cdecl*)(int),std::forward_iterator_tag>
PUBLIC	??$_Transform@PADV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6AHH@Z@std@@YA?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAD0V10@P6AHH@ZUrandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Transform<char *,std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,int (__cdecl*)(int)>
PUBLIC	??$transform@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@P6AHH@Z@std@@YA?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@0@V10@00P6AHH@Z@Z ; std::transform<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,int (__cdecl*)(int)>
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
PUBLIC	?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
PUBLIC	?find@?$char_traits@D@std@@SAPBDPBDIABD@Z	; std::char_traits<char>::find
PUBLIC	?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
PUBLIC	?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
PUBLIC	??CINIWrapper@@QBEPAVINIClass@@XZ		; INIWrapper::operator->
PUBLIC	?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEXABV_Locinfo@2@@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Init
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
PUBLIC	?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::falsename
PUBLIC	?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::truename
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?precision@ios_base@std@@QBEHXZ			; std::ios_base::precision
PUBLIC	?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
PUBLIC	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
PUBLIC	?decimal_point@?$numpunct@D@std@@QBEDXZ		; std::numpunct<char>::decimal_point
PUBLIC	?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc
PUBLIC	?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putgrouped
PUBLIC	??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=
PUBLIC	??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator*
PUBLIC	??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator++
PUBLIC	?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
PUBLIC	?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ	; std::_Locinfo::_Getcvt
PUBLIC	?_Getlconv@_Locinfo@std@@QBEPBUlconv@@XZ	; std::_Locinfo::_Getlconv
PUBLIC	?_Getfalse@_Locinfo@std@@QBEPBDXZ		; std::_Locinfo::_Getfalse
PUBLIC	?_Gettrue@_Locinfo@std@@QBEPBDXZ		; std::_Locinfo::_Gettrue
PUBLIC	??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z	; std::_Maklocchr<char>
PUBLIC	??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z	; std::_Maklocstr<char>
PUBLIC	?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z	; std::numpunct<char>::_Init
PUBLIC	?do_decimal_point@?$numpunct@D@std@@MBEDXZ	; std::numpunct<char>::do_decimal_point
PUBLIC	?do_thousands_sep@?$numpunct@D@std@@MBEDXZ	; std::numpunct<char>::do_thousands_sep
PUBLIC	?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::do_grouping
PUBLIC	?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::do_falsename
PUBLIC	?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::do_truename
PUBLIC	?_Tidy@?$numpunct@D@std@@AAEXXZ			; std::numpunct<char>::_Tidy
PUBLIC	??1?$numpunct@D@std@@MAE@XZ			; std::numpunct<char>::~numpunct<char>
PUBLIC	??_G?$numpunct@D@std@@MAEPAXI@Z			; std::numpunct<char>::`scalar deleting destructor'
PUBLIC	??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z	; std::numpunct<char>::numpunct<char>
PUBLIC	?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::numpunct<char>::_Getcat
PUBLIC	??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
PUBLIC	?thousands_sep@?$numpunct@D@std@@QBEDXZ		; std::numpunct<char>::thousands_sep
PUBLIC	?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::grouping
PUBLIC	?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
PUBLIC	??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`scalar deleting destructor'
PUBLIC	??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
PUBLIC	?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat
PUBLIC	??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
PUBLIC	?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put
PUBLIC	??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z ; std::ostreambuf_iterator<char,std::char_traits<char> >::ostreambuf_iterator<char,std::char_traits<char> >
PUBLIC	?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::ostreambuf_iterator<char,std::char_traits<char> >::failed
PUBLIC	??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
PUBLIC	??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z ; std::basic_ostream<char,std::char_traits<char> >::basic_ostream<char,std::char_traits<char> >
PUBLIC	??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z ; std::basic_istream<char,std::char_traits<char> >::basic_istream<char,std::char_traits<char> >
PUBLIC	??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z ; std::basic_iostream<char,std::char_traits<char> >::basic_iostream<char,std::char_traits<char> >
PUBLIC	?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Init
PUBLIC	?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Getstate
PUBLIC	??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
PUBLIC	?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str
PUBLIC	??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_istream<char,std::char_traits<char> >::`vbase destructor'
PUBLIC	??_G?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ; std::basic_istream<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_istream<char,std::char_traits<char> >::~basic_istream<char,std::char_traits<char> >
PUBLIC	??_D?$basic_iostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_iostream<char,std::char_traits<char> >::`vbase destructor'
PUBLIC	??_G?$basic_iostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ; std::basic_iostream<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_iostream<char,std::char_traits<char> >::~basic_iostream<char,std::char_traits<char> >
PUBLIC	?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow
PUBLIC	?eq@?$char_traits@D@std@@SA_NABD0@Z		; std::char_traits<char>::eq
PUBLIC	?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::pbackfail
PUBLIC	?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow
PUBLIC	?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@JHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekoff
PUBLIC	?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pbase
PUBLIC	?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char> >::setp
PUBLIC	?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekpos
PUBLIC	??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
PUBLIC	??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??_G?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
PUBLIC	??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbase destructor'
PUBLIC	??$ToString@H@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABH@Z ; ToString<int>
PUBLIC	?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
PUBLIC	??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?begin@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::begin
PUBLIC	??0?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Vector_const_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	?end@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::end
PUBLIC	?size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::size
PUBLIC	?empty@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE_NXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::empty
PUBLIC	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@HPBV32@ABV32@V_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::random_access_iterator_tag,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::_Iterator_base_aux>
PUBLIC	??0?$_Ranit@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HPBV12@ABV12@@std@@QAE@XZ ; std::_Ranit<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>::_Ranit<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
PUBLIC	??0?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::_Vector_const_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Vector_const_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??D?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@XZ ; std::_Vector_const_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator*
PUBLIC	??E?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator++
PUBLIC	??8?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator==
PUBLIC	??9?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator!=
PUBLIC	?compare@?$char_traits@D@std@@SAHPBD0I@Z	; std::char_traits<char>::compare
PUBLIC	?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
PUBLIC	?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
PUBLIC	??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z ; std::basic_ostream<char,std::char_traits<char> >::put
PUBLIC	?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
PUBLIC	??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
PUBLIC	?clear@ios_base@std@@QAEXH@Z			; std::ios_base::clear
PUBLIC	?_Init@ios_base@std@@IAEXXZ			; std::ios_base::_Init
PUBLIC	?widen@?$ctype@D@std@@QBEDD@Z			; std::ctype<char>::widen
PUBLIC	??0ctype_base@std@@QAE@I@Z			; std::ctype_base::ctype_base
PUBLIC	?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ	; std::_Locinfo::_Getctype
PUBLIC	?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z	; std::ctype<char>::_Init
PUBLIC	?do_tolower@?$ctype@D@std@@MBEDD@Z		; std::ctype<char>::do_tolower
PUBLIC	?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z	; std::ctype<char>::do_tolower
PUBLIC	?do_toupper@?$ctype@D@std@@MBEDD@Z		; std::ctype<char>::do_toupper
PUBLIC	?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z	; std::ctype<char>::do_toupper
PUBLIC	?do_widen@?$ctype@D@std@@MBEDD@Z		; std::ctype<char>::do_widen
PUBLIC	?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z	; std::ctype<char>::do_widen
PUBLIC	?_Do_widen_s@?$ctype@D@std@@MBEPBDPBD0PADI@Z	; std::ctype<char>::_Do_widen_s
PUBLIC	?do_narrow@?$ctype@D@std@@MBEDDD@Z		; std::ctype<char>::do_narrow
PUBLIC	?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z	; std::ctype<char>::do_narrow
PUBLIC	?_Do_narrow_s@?$ctype@D@std@@MBEPBDPBD0DPADI@Z	; std::ctype<char>::_Do_narrow_s
PUBLIC	??_Gctype_base@std@@UAEPAXI@Z			; std::ctype_base::`scalar deleting destructor'
PUBLIC	??1ctype_base@std@@UAE@XZ			; std::ctype_base::~ctype_base
PUBLIC	?_Tidy@?$ctype@D@std@@IAEXXZ			; std::ctype<char>::_Tidy
PUBLIC	??1?$ctype@D@std@@MAE@XZ			; std::ctype<char>::~ctype<char>
PUBLIC	??_G?$ctype@D@std@@MAEPAXI@Z			; std::ctype<char>::`scalar deleting destructor'
PUBLIC	??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z		; std::ctype<char>::ctype<char>
PUBLIC	?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::ctype<char>::_Getcat
PUBLIC	??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
PUBLIC	?getloc@ios_base@std@@QBE?AVlocale@2@XZ		; std::ios_base::getloc
PUBLIC	?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z ; std::basic_ios<char,std::char_traits<char> >::widen
PUBLIC	?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z ; std::basic_ios<char,std::char_traits<char> >::init
PUBLIC	??0ios_base@std@@IAE@XZ				; std::ios_base::ios_base
PUBLIC	??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_ios<char,std::char_traits<char> >::basic_ios<char,std::char_traits<char> >
PUBLIC	??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z ; std::basic_ostream<char,std::char_traits<char> >::basic_ostream<char,std::char_traits<char> >
PUBLIC	??0locale@std@@QAE@XZ				; std::locale::locale
PUBLIC	??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >
PUBLIC	??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >
PUBLIC	??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >
PUBLIC	??0locale@std@@QAE@ABV01@@Z			; std::locale::locale
PUBLIC	?getloc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QBE?AVlocale@2@XZ ; std::basic_streambuf<char,std::char_traits<char> >::getloc
PUBLIC	?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::open
PUBLIC	?open@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXPBDHH@Z ; std::basic_ofstream<char,std::char_traits<char> >::open
PUBLIC	?close@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ofstream<char,std::char_traits<char> >::close
PUBLIC	??_Gios_base@std@@UAEPAXI@Z			; std::ios_base::`scalar deleting destructor'
PUBLIC	??1ios_base@std@@UAE@XZ				; std::ios_base::~ios_base
PUBLIC	??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ; std::basic_ios<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
PUBLIC	??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::`vbase destructor'
PUBLIC	??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ; std::basic_ostream<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >
PUBLIC	?_Decref@facet@locale@std@@QAEPAV123@XZ		; std::locale::facet::_Decref
PUBLIC	??1locale@std@@QAE@XZ				; std::locale::~locale
PUBLIC	??_Glocale@std@@QAEPAXI@Z			; std::locale::`scalar deleting destructor'
PUBLIC	?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ; std::basic_streambuf<char,std::char_traits<char> >::overflow
PUBLIC	?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ; std::basic_streambuf<char,std::char_traits<char> >::pbackfail
PUBLIC	?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::underflow
PUBLIC	?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::uflow
PUBLIC	?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z ; std::basic_streambuf<char,std::char_traits<char> >::seekoff
PUBLIC	?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z ; std::basic_streambuf<char,std::char_traits<char> >::seekpos
PUBLIC	?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PADH@Z ; std::basic_streambuf<char,std::char_traits<char> >::setbuf
PUBLIC	?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::sync
PUBLIC	?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z ; std::basic_streambuf<char,std::char_traits<char> >::imbue
PUBLIC	??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ; std::basic_streambuf<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
PUBLIC	?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ ; std::basic_filebuf<char,std::char_traits<char> >::close
PUBLIC	?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc
PUBLIC	?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADH@Z ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn
PUBLIC	?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ; std::basic_streambuf<char,std::char_traits<char> >::gbump
PUBLIC	?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail
PUBLIC	?_Xsgetn_s@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADIH@Z ; std::basic_streambuf<char,std::char_traits<char> >::_Xsgetn_s
PUBLIC	?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ; std::basic_streambuf<char,std::char_traits<char> >::pbump
PUBLIC	?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPBDH@Z ; std::basic_streambuf<char,std::char_traits<char> >::xsputn
PUBLIC	?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
PUBLIC	?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::epptr
PUBLIC	??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z		; std::_Fputc<char>
PUBLIC	?out@?$codecvt@DDH@std@@QBEHAAHPBD1AAPBDPAD3AAPAD@Z ; std::codecvt<char,char,int>::out
PUBLIC	?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::overflow
PUBLIC	?to_char_type@?$char_traits@D@std@@SADABH@Z	; std::char_traits<char>::to_char_type
PUBLIC	?not_eof@?$char_traits@D@std@@SAHABH@Z		; std::char_traits<char>::not_eof
PUBLIC	?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
PUBLIC	?_Gndec@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gndec
PUBLIC	??$_Ungetc@D@std@@YA_NABDPAU_iobuf@@@Z		; std::_Ungetc<char>
PUBLIC	?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::pbackfail
PUBLIC	?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_filebuf<char,std::char_traits<char> >::underflow
PUBLIC	?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::egptr
PUBLIC	?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gninc
PUBLIC	??$_Fgetc@D@std@@YA_NAADPAU_iobuf@@@Z		; std::_Fgetc<char>
PUBLIC	?in@?$codecvt@DDH@std@@QBEHAAHPBD1AAPBDPAD3AAPAD@Z ; std::codecvt<char,char,int>::in
PUBLIC	?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_filebuf<char,std::char_traits<char> >::uflow
PUBLIC	?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::seekoff
PUBLIC	?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$char_traits@D@std@@SAPADPADID@Z	; std::char_traits<char>::assign
PUBLIC	?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	??0_Iterator_base_secure@std@@QAE@XZ		; std::_Iterator_base_secure::_Iterator_base_secure
PUBLIC	??0?$_Ranit_base@DHPBDABDV_Iterator_base_secure@std@@@std@@QAE@XZ ; std::_Ranit_base<char,int,char const *,char const &,std::_Iterator_base_secure>::_Ranit_base<char,int,char const *,char const &,std::_Iterator_base_secure>
PUBLIC	??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBV_Container_base_secure@1@@Z ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PADPBV_Container_base_secure@1@@Z ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_iterator<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
PUBLIC	?_Has_container@_Iterator_base_secure@std@@QBE_NXZ ; std::_Iterator_base_secure::_Has_container
PUBLIC	??D?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDXZ ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator*
PUBLIC	??D?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEAADXZ ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator*
PUBLIC	?unshift@?$codecvt@DDH@std@@QBEHAAHPAD1AAPAD@Z	; std::codecvt<char,char,int>::unshift
PUBLIC	?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
PUBLIC	??0?$fpos@H@std@@QAE@J@Z			; std::fpos<int>::fpos<int>
PUBLIC	??0?$fpos@H@std@@QAE@H_J@Z			; std::fpos<int>::fpos<int>
PUBLIC	?state@?$fpos@H@std@@QBEHXZ			; std::fpos<int>::state
PUBLIC	?seekpos@?$fpos@H@std@@QBE_JXZ			; std::fpos<int>::seekpos
PUBLIC	??B?$fpos@H@std@@QBEJXZ				; std::fpos<int>::operator long
PUBLIC	?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z ; std::basic_filebuf<char,std::char_traits<char> >::seekpos
PUBLIC	?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAPAD0PAH001@Z ; std::basic_streambuf<char,std::char_traits<char> >::_Init
PUBLIC	?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init
PUBLIC	?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PADH@Z ; std::basic_filebuf<char,std::char_traits<char> >::setbuf
PUBLIC	?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_filebuf<char,std::char_traits<char> >::sync
PUBLIC	?always_noconv@codecvt_base@std@@QBE_NXZ	; std::codecvt_base::always_noconv
PUBLIC	?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char> >::setg
PUBLIC	?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z ; std::basic_streambuf<char,std::char_traits<char> >::setp
PUBLIC	?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Init
PUBLIC	?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAV?$codecvt@DDH@2@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt
PUBLIC	??Bid@locale@std@@QAEIXZ			; std::locale::id::operator unsigned int
PUBLIC	?_Incref@facet@locale@std@@QAEXXZ		; std::locale::facet::_Incref
PUBLIC	?_Register@facet@locale@std@@QAEXXZ		; std::locale::facet::_Register
PUBLIC	?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z	; std::locale::_Getfacet
PUBLIC	??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Locinfo::_Locinfo
PUBLIC	??1_Locinfo@std@@QAE@XZ				; std::_Locinfo::~_Locinfo
PUBLIC	?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::locale::name
PUBLIC	??0facet@locale@std@@IAE@I@Z			; std::locale::facet::facet
PUBLIC	??0codecvt_base@std@@QAE@I@Z			; std::codecvt_base::codecvt_base
PUBLIC	?_Init@?$codecvt@DDH@std@@IAEXABV_Locinfo@2@@Z	; std::codecvt<char,char,int>::_Init
PUBLIC	?do_in@?$codecvt@DDH@std@@MBEHAAHPBD1AAPBDPAD3AAPAD@Z ; std::codecvt<char,char,int>::do_in
PUBLIC	?do_out@?$codecvt@DDH@std@@MBEHAAHPBD1AAPBDPAD3AAPAD@Z ; std::codecvt<char,char,int>::do_out
PUBLIC	?do_unshift@?$codecvt@DDH@std@@MBEHAAHPAD1AAPAD@Z ; std::codecvt<char,char,int>::do_unshift
PUBLIC	?do_length@?$codecvt@DDH@std@@MBEHABHPBD1I@Z	; std::codecvt<char,char,int>::do_length
PUBLIC	??_Gfacet@locale@std@@UAEPAXI@Z			; std::locale::facet::`scalar deleting destructor'
PUBLIC	??1facet@locale@std@@UAE@XZ			; std::locale::facet::~facet
PUBLIC	?do_always_noconv@codecvt_base@std@@MBE_NXZ	; std::codecvt_base::do_always_noconv
PUBLIC	?do_max_length@codecvt_base@std@@MBEHXZ		; std::codecvt_base::do_max_length
PUBLIC	?do_encoding@codecvt_base@std@@MBEHXZ		; std::codecvt_base::do_encoding
PUBLIC	??_Gcodecvt_base@std@@UAEPAXI@Z			; std::codecvt_base::`scalar deleting destructor'
PUBLIC	??1codecvt_base@std@@UAE@XZ			; std::codecvt_base::~codecvt_base
PUBLIC	??1?$codecvt@DDH@std@@MAE@XZ			; std::codecvt<char,char,int>::~codecvt<char,char,int>
PUBLIC	??_G?$codecvt@DDH@std@@MAEPAXI@Z		; std::codecvt<char,char,int>::`scalar deleting destructor'
PUBLIC	??0?$codecvt@DDH@std@@QAE@ABV_Locinfo@1@I@Z	; std::codecvt<char,char,int>::codecvt<char,char,int>
PUBLIC	?_Getcat@?$codecvt@DDH@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::codecvt<char,char,int>::_Getcat
PUBLIC	??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z ; std::use_facet<std::codecvt<char,char,int> >
PUBLIC	?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z ; std::basic_filebuf<char,std::char_traits<char> >::imbue
PUBLIC	??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ; std::basic_filebuf<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
PUBLIC	??_G?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ; std::basic_ofstream<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ofstream<char,std::char_traits<char> >::~basic_ofstream<char,std::char_traits<char> >
PUBLIC	??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ofstream<char,std::char_traits<char> >::`vbase destructor'
PUBLIC	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z	; std::char_traits<char>::eq_int_type
PUBLIC	?eof@?$char_traits@D@std@@SAHXZ			; std::char_traits<char>::eof
PUBLIC	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
PUBLIC	?width@ios_base@std@@QBEHXZ			; std::ios_base::width
PUBLIC	?width@ios_base@std@@QAEHH@Z			; std::ios_base::width
PUBLIC	?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ ; std::basic_ios<char,std::char_traits<char> >::fill
PUBLIC	?to_int_type@?$char_traits@D@std@@SAHABD@Z	; std::char_traits<char>::to_int_type
PUBLIC	?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc
PUBLIC	?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
PUBLIC	?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
PUBLIC	?good@ios_base@std@@QBE_NXZ			; std::ios_base::good
PUBLIC	?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::tie
PUBLIC	?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Lock
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	?flags@ios_base@std@@QBEHXZ			; std::ios_base::flags
PUBLIC	?fail@ios_base@std@@QBE_NXZ			; std::ios_base::fail
PUBLIC	?rdstate@ios_base@std@@QBEHXZ			; std::ios_base::rdstate
PUBLIC	??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
PUBLIC	??0failure@ios_base@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::ios_base::failure::failure
PUBLIC	??0runtime_error@std@@QAE@ABV01@@Z		; std::runtime_error::runtime_error
PUBLIC	?what@runtime_error@std@@UBEPBDXZ		; std::runtime_error::what
PUBLIC	??_Gruntime_error@std@@UAEPAXI@Z		; std::runtime_error::`scalar deleting destructor'
PUBLIC	??1runtime_error@std@@UAE@XZ			; std::runtime_error::~runtime_error
PUBLIC	??1failure@ios_base@std@@UAE@XZ			; std::ios_base::failure::~failure
PUBLIC	??_Gfailure@ios_base@std@@UAEPAXI@Z		; std::ios_base::failure::`scalar deleting destructor'
PUBLIC	??0failure@ios_base@std@@QAE@ABV012@@Z		; std::ios_base::failure::failure
PUBLIC	?clear@ios_base@std@@QAEXH_N@Z			; std::ios_base::clear
PUBLIC	?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::clear
PUBLIC	?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
PUBLIC	?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::pubsync
PUBLIC	?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush
PUBLIC	?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
PUBLIC	?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
PUBLIC	?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	??_R0?AVruntime_error@std@@@8			; std::runtime_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z40
PUBLIC	??_C@_05LAPONLG@false?$AA@			; `string'
PUBLIC	??_C@_04LOAJBDKD@true?$AA@			; `string'
PUBLIC	??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@	; `string'
PUBLIC	??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@ ; `string'
PUBLIC	??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@	; `string'
PUBLIC	??_R0?AVfailure@ios_base@std@@@8		; std::ios_base::failure `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z40
PUBLIC	__CTA3?AVfailure@ios_base@std@@
PUBLIC	__TI3?AVfailure@ios_base@std@@
PUBLIC	??_C@_0BC@NNLBOHAB@?4?1data?1server?4ini?$AA@	; `string'
PUBLIC	??_C@_0N@GGBPOCJD@?4?1server?4ini?$AA@		; `string'
PUBLIC	??_C@_0L@CBNBBGDB@server?4ini?$AA@		; `string'
PUBLIC	??_C@_0P@ELFBPMOA@svrcfg_cnc?4ini?$AA@		; `string'
PUBLIC	??_C@_06LLCHJONG@Config?$AA@			; `string'
PUBLIC	??_C@_06LGMEBDBC@Server?$AA@			; `string'
PUBLIC	??_C@_04MLLLIHIP@null?$AA@			; `string'
PUBLIC	??_C@_09NBJCKKJL@MapName00?$AA@			; `string'
PUBLIC	??_C@_08EEOHOBEO@Settings?$AA@			; `string'
PUBLIC	??_C@_07ECEMPDJM@General?$AA@			; `string'
PUBLIC	??_C@_0O@KCPCDLGO@renlog_?$CFs?4txt?$AA@	; `string'
PUBLIC	??_C@_04CFKLBGE@0?5?$CFs?$AA@			; `string'
PUBLIC	??_C@_0BE@EFPMAOKO@?$FL?$CF02d?3?$CF02d?3?$CF02d?$FN?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_09CJNFFEML@Remote?5C4?$AA@		; `string'
PUBLIC	??_C@_0N@LPHHBPGP@Proximity?5C4?$AA@		; `string'
PUBLIC	??_C@_08EOMCENKK@Timed?5C4?$AA@			; `string'
PUBLIC	??_C@_01GBGANLPD@0?$AA@				; `string'
PUBLIC	??_C@_0BC@ICKKNJCI@Translated_Preset?$AA@	; `string'
PUBLIC	??_C@_09MJONCACI@No?5String?$AA@		; `string'
PUBLIC	??_C@_06KEPEGCIE@?$CFls?5?$CFs?$AA@		; `string'
PUBLIC	??_C@_09EJANBKGE@no?5string?$AA@		; `string'
PUBLIC	??_C@_05GFOLEBJA@?$CFs?1?$CFs?$AA@		; `string'
PUBLIC	??_C@_0BB@NHJNEILC@Invisible_Object?$AA@	; `string'
PUBLIC	??_C@_0O@IPIPENLA@ag_pucreation?$AA@		; `string'
PUBLIC	??_C@_0N@BDGOMBAD@ag_smwoodexp?$AA@		; `string'
PUBLIC	??_C@_0N@EOCMKBEL@ag_bgwoodexp?$AA@		; `string'
PUBLIC	??_C@_0L@GAAICAAM@ag_brlexp1?$AA@		; `string'
PUBLIC	??_C@_0L@INKEJDPI@ag_flame01?$AA@		; `string'
PUBLIC	??_C@_0N@BDLGCGMM@e_dsp_tibgas?$AA@		; `string'
PUBLIC	??_C@_0CH@DEDNKPN@MDB_SSGM_Destroy_When_Object_Des@ ; `string'
PUBLIC	??_C@_08EDNAOKPO@_GAMELOG?$AA@			; `string'
PUBLIC	??_C@_09GLAHALIH@?$CFs_?$CFs?4txt?$AA@		; `string'
PUBLIC	??_C@_03OFAPEBGM@?$CFs?6?$AA@			; `string'
PUBLIC	??_C@_0BH@GDMIOCJG@?$FL?$CF02d?3?$CF02d?3?$CF02d?$FN?5?$CFs?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0O@KPJBJEBP@CnC_Nod_Buggy?$AA@		; `string'
PUBLIC	??_C@_08HEKCLJAN@muzzlea0?$AA@			; `string'
PUBLIC	??_C@_0M@OFJMCHAB@CnC_Nod_APC?$AA@		; `string'
PUBLIC	??_C@_06HIGCFHGK@barrel?$AA@			; `string'
PUBLIC	??_C@_0BJ@JKMFPNNA@CnC_Nod_Mobile_Artillery?$AA@ ; `string'
PUBLIC	??_C@_0BD@KFFOCKEE@CnC_Nod_Light_Tank?$AA@	; `string'
PUBLIC	??_C@_0BD@FLILFJBA@CnC_Nod_Flame_Tank?$AA@	; `string'
PUBLIC	??_C@_0P@OJMOCDBN@CnC_Nod_Apache?$AA@		; `string'
PUBLIC	??_C@_08HGOEAHFE@muzzleb0?$AA@			; `string'
PUBLIC	??_C@_0BB@GDPFEJDE@CnC_GDI_Humm?9vee?$AA@	; `string'
PUBLIC	??_C@_0M@IMFLEHKE@CnC_GDI_APC?$AA@		; `string'
PUBLIC	??_C@_0N@CEAEFAJG@CnC_GDI_MRLS?$AA@		; `string'
PUBLIC	??_C@_0BE@MFMCCHHH@CnC_GDI_Medium_Tank?$AA@	; `string'
PUBLIC	??_C@_0BF@FDHNFNOP@CnC_GDI_Mammoth_Tank?$AA@	; `string'
PUBLIC	??_C@_0N@CAJHPJGE@CnC_GDI_Orca?$AA@		; `string'
PUBLIC	??_C@_05MIGDJIHC@recon?$AA@			; `string'
PUBLIC	??_C@_05MPMPJNEE@Recon?$AA@			; `string'
PUBLIC	??_C@_09MJFDFMKK@Mobileart?$AA@			; `string'
PUBLIC	??_C@_09FMEOCAPC@towhumvee?$AA@			; `string'
PUBLIC	??_C@_08GNLJIIEM@muzzlea1?$AA@			; `string'
PUBLIC	??_C@_08GPPPDGBF@muzzleb1?$AA@			; `string'
PUBLIC	??_C@_0N@KDFAGGMJ@gamelog2?4txt?$AA@		; `string'
PUBLIC	??_C@_0M@BPABCLGK@gamelog?4txt?$AA@		; `string'
PUBLIC	??_C@_0BC@MALIEGMD@?$FL?$CF02d?3?$CF02d?3?$CF02d?$FN?5?$AA@ ; `string'
PUBLIC	??_C@_08EPJLHIJG@bad?5cast?$AA@			; `string'
PUBLIC	??_R0?AVbad_cast@std@@@8			; std::bad_cast `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
PUBLIC	__CTA2?AVbad_cast@std@@
PUBLIC	__TI2?AVbad_cast@std@@
PUBLIC	?_Stz@?$fpos@H@std@@0HB				; std::fpos<int>::_Stz
PUBLIC	??_C@_02EAOCLKAK@ld?$AA@			; `string'
PUBLIC	??_C@_02BDDLJJBK@lu?$AA@			; `string'
PUBLIC	??_C@_02HIKPPMOK@Ld?$AA@			; `string'
PUBLIC	??_C@_02CLHGNPPK@Lu?$AA@			; `string'
PUBLIC	??_C@_02BBAHNLBA@?$CFp?$AA@			; `string'
PUBLIC	??_C@_01DDCIFGEA@E?$AA@				; `string'
PUBLIC	??_C@_01KGKMHCOC@e?$AA@				; `string'
PUBLIC	?_Psave@?$_Facetptr@V?$codecvt@DDH@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::codecvt<char,char,int> >::_Psave
PUBLIC	?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::numpunct<char> >::_Psave
PUBLIC	??_7ios_base@std@@6B@				; std::ios_base::`vftable'
PUBLIC	??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ios<char,std::char_traits<char> >::`vftable'
PUBLIC	??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_streambuf<char,std::char_traits<char> >::`vftable'
PUBLIC	??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_istream<char,std::char_traits<char> >::`vftable'
PUBLIC	??_8?$basic_istream@DU?$char_traits@D@std@@@std@@7B@ ; std::basic_istream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ostream<char,std::char_traits<char> >::`vftable'
PUBLIC	??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@ ; std::basic_ostream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??_7?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_iostream<char,std::char_traits<char> >::`vftable'
PUBLIC	??_8?$basic_iostream@DU?$char_traits@D@std@@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@ ; std::basic_iostream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??_8?$basic_iostream@DU?$char_traits@D@std@@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@ ; std::basic_iostream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`vftable'
PUBLIC	??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vftable'
PUBLIC	??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
PUBLIC	??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
PUBLIC	??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_filebuf<char,std::char_traits<char> >::`vftable'
PUBLIC	??_7?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ofstream<char,std::char_traits<char> >::`vftable'
PUBLIC	??_8?$basic_ofstream@DU?$char_traits@D@std@@@std@@7B@ ; std::basic_ofstream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??_7runtime_error@std@@6B@			; std::runtime_error::`vftable'
PUBLIC	??_7facet@locale@std@@6B@			; std::locale::facet::`vftable'
PUBLIC	??_7codecvt_base@std@@6B@			; std::codecvt_base::`vftable'
PUBLIC	??_7ctype_base@std@@6B@				; std::ctype_base::`vftable'
PUBLIC	??_7?$ctype@D@std@@6B@				; std::ctype<char>::`vftable'
PUBLIC	??_7failure@ios_base@std@@6B@			; std::ios_base::failure::`vftable'
PUBLIC	??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`vftable'
PUBLIC	??_7?$codecvt@DDH@std@@6B@			; std::codecvt<char,char,int>::`vftable'
PUBLIC	??_7?$numpunct@D@std@@6B@			; std::numpunct<char>::`vftable'
EXTRN	_tolower:PROC
EXTRN	_vsnprintf:PROC
EXTRN	_remove:PROC
EXTRN	__imp__CopyFileA@12:PROC
EXTRN	_strcspn:PROC
EXTRN	_sprintf_s:PROC
EXTRN	_memchr:PROC
EXTRN	__Getcvt:PROC
EXTRN	_localeconv:PROC
EXTRN	??_E?$numpunct@D@std@@MAEPAXI@Z:PROC		; std::numpunct<char>::`vector deleting destructor'
EXTRN	??_E?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z:PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`vector deleting destructor'
EXTRN	??_E?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_istream<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_iostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_iostream<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z:PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z:PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
EXTRN	_printf:PROC
EXTRN	_strstr:PROC
EXTRN	?_Addstd@ios_base@std@@SAXPAV12@@Z:PROC		; std::ios_base::_Addstd
EXTRN	?id@?$ctype@D@std@@2V0locale@2@A:DWORD		; std::ctype<char>::id
EXTRN	__Getctype:PROC
EXTRN	__Tolower:PROC
EXTRN	__Toupper:PROC
EXTRN	??_Ectype_base@std@@UAEPAXI@Z:PROC		; std::ctype_base::`vector deleting destructor'
EXTRN	_free:PROC
EXTRN	??_E?$ctype@D@std@@MAEPAXI@Z:PROC		; std::ctype<char>::`vector deleting destructor'
EXTRN	??0_Mutex@std@@QAE@XZ:PROC			; std::_Mutex::_Mutex
EXTRN	?_Init@locale@std@@CAPAV_Locimp@12@XZ:PROC	; std::locale::_Init
EXTRN	?_Fiopen@std@@YAPAU_iobuf@@PBDHH@Z:PROC		; std::_Fiopen
EXTRN	?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z:PROC	; std::ios_base::_Ios_base_dtor
EXTRN	??_Eios_base@std@@UAEPAXI@Z:PROC		; std::ios_base::`vector deleting destructor'
EXTRN	??_E?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_ios<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_ostream<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??1_Mutex@std@@QAE@XZ:PROC			; std::_Mutex::~_Mutex
EXTRN	??_E?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_streambuf<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	_fclose:PROC
EXTRN	_fputc:PROC
EXTRN	_ungetc:PROC
EXTRN	_fgetc:PROC
EXTRN	_fgetpos:PROC
EXTRN	_fsetpos:PROC
EXTRN	_fseek:PROC
EXTRN	?_BADOFF@std@@3JB:DWORD				; std::_BADOFF
EXTRN	_fwrite:PROC
EXTRN	_setvbuf:PROC
EXTRN	_fflush:PROC
EXTRN	??0bad_cast@std@@QAE@PBD@Z:PROC			; std::bad_cast::bad_cast
EXTRN	?_Id_cnt@id@locale@std@@0HA:DWORD		; std::locale::id::_Id_cnt
EXTRN	?facet_Register@facet@locale@std@@CAXPAV123@@Z:PROC ; std::locale::facet::facet_Register
EXTRN	?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ:PROC ; std::locale::_Getgloballocale
EXTRN	??0_Lockit@std@@QAE@H@Z:PROC			; std::_Lockit::_Lockit
EXTRN	?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z:PROC ; std::_Locinfo::_Locinfo_ctor
EXTRN	??1_Lockit@std@@QAE@XZ:PROC			; std::_Lockit::~_Lockit
EXTRN	?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z:PROC	; std::_Locinfo::_Locinfo_dtor
EXTRN	??_Efacet@locale@std@@UAEPAXI@Z:PROC		; std::locale::facet::`vector deleting destructor'
EXTRN	??_Ecodecvt_base@std@@UAEPAXI@Z:PROC		; std::codecvt_base::`vector deleting destructor'
EXTRN	??_E?$codecvt@DDH@std@@MAEPAXI@Z:PROC		; std::codecvt<char,char,int>::`vector deleting destructor'
EXTRN	??1bad_cast@std@@UAE@XZ:PROC			; std::bad_cast::~bad_cast
EXTRN	??0bad_cast@std@@QAE@ABV01@@Z:PROC		; std::bad_cast::bad_cast
EXTRN	??_E?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_filebuf<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_ofstream<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	?_Lock@_Mutex@std@@QAEXXZ:PROC			; std::_Mutex::_Lock
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
EXTRN	??_Eruntime_error@std@@UAEPAXI@Z:PROC		; std::runtime_error::`vector deleting destructor'
EXTRN	??_Efailure@ios_base@std@@UAEPAXI@Z:PROC	; std::ios_base::failure::`vector deleting destructor'
EXTRN	?_Unlock@_Mutex@std@@QAEXXZ:PROC		; std::_Mutex::_Unlock
;	COMDAT ?_Psave@?$_Facetptr@V?$codecvt@DDH@std@@@std@@2PBVfacet@locale@2@B
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$codecvt@DDH@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::codecvt<char,char,int> >::_Psave
_BSS	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::numpunct<char> >::_Psave
;	COMDAT ??_7?$numpunct@D@std@@6B@
CONST	SEGMENT
??_7?$numpunct@D@std@@6B@ DD FLAT:??_R4?$numpunct@D@std@@6B@ ; std::numpunct<char>::`vftable'
	DD	FLAT:??_E?$numpunct@D@std@@MAEPAXI@Z
	DD	FLAT:?do_decimal_point@?$numpunct@D@std@@MBEDXZ
	DD	FLAT:?do_thousands_sep@?$numpunct@D@std@@MBEDXZ
	DD	FLAT:?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	DD	FLAT:?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	DD	FLAT:?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
CONST	ENDS
;	COMDAT ??_R4?$numpunct@D@std@@6B@
rdata$r	SEGMENT
??_R4?$numpunct@D@std@@6B@ DD 00H			; std::numpunct<char>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$numpunct@D@std@@@8
	DD	FLAT:??_R3?$numpunct@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@D@std@@8
rdata$r	SEGMENT
??_R3?$numpunct@D@std@@8 DD 00H				; std::numpunct<char>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$numpunct@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@D@std@@8
rdata$r	SEGMENT
??_R2?$numpunct@D@std@@8 DD FLAT:??_R1A@?0A@EA@?$numpunct@D@std@@8 ; std::numpunct<char>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$numpunct@D@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$numpunct@D@std@@8 DD FLAT:??_R0?AV?$numpunct@D@std@@@8 ; std::numpunct<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$numpunct@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$numpunct@D@std@@@8
_DATA	SEGMENT
??_R0?AV?$numpunct@D@std@@@8 DD FLAT:??_7type_info@@6B@	; std::numpunct<char> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$numpunct@D@std@@', 00H
_DATA	ENDS
;	COMDAT ??_7?$codecvt@DDH@std@@6B@
CONST	SEGMENT
??_7?$codecvt@DDH@std@@6B@ DD FLAT:??_R4?$codecvt@DDH@std@@6B@ ; std::codecvt<char,char,int>::`vftable'
	DD	FLAT:??_E?$codecvt@DDH@std@@MAEPAXI@Z
	DD	FLAT:?do_always_noconv@codecvt_base@std@@MBE_NXZ
	DD	FLAT:?do_max_length@codecvt_base@std@@MBEHXZ
	DD	FLAT:?do_encoding@codecvt_base@std@@MBEHXZ
	DD	FLAT:?do_in@?$codecvt@DDH@std@@MBEHAAHPBD1AAPBDPAD3AAPAD@Z
	DD	FLAT:?do_out@?$codecvt@DDH@std@@MBEHAAHPBD1AAPBDPAD3AAPAD@Z
	DD	FLAT:?do_unshift@?$codecvt@DDH@std@@MBEHAAHPAD1AAPAD@Z
	DD	FLAT:?do_length@?$codecvt@DDH@std@@MBEHABHPBD1I@Z
CONST	ENDS
;	COMDAT ??_R4?$codecvt@DDH@std@@6B@
rdata$r	SEGMENT
??_R4?$codecvt@DDH@std@@6B@ DD 00H			; std::codecvt<char,char,int>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$codecvt@DDH@std@@@8
	DD	FLAT:??_R3?$codecvt@DDH@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$codecvt@DDH@std@@8
rdata$r	SEGMENT
??_R3?$codecvt@DDH@std@@8 DD 00H			; std::codecvt<char,char,int>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2?$codecvt@DDH@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$codecvt@DDH@std@@8
rdata$r	SEGMENT
??_R2?$codecvt@DDH@std@@8 DD FLAT:??_R1A@?0A@EA@?$codecvt@DDH@std@@8 ; std::codecvt<char,char,int>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@codecvt_base@std@@8
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$codecvt@DDH@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$codecvt@DDH@std@@8 DD FLAT:??_R0?AV?$codecvt@DDH@std@@@8 ; std::codecvt<char,char,int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$codecvt@DDH@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$codecvt@DDH@std@@@8
_DATA	SEGMENT
??_R0?AV?$codecvt@DDH@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::codecvt<char,char,int> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$codecvt@DDH@std@@', 00H
_DATA	ENDS
;	COMDAT ??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@
CONST	SEGMENT
??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ DD FLAT:??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`vftable'
	DD	FLAT:??_E?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
CONST	ENDS
;	COMDAT ??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ DD 00H ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8
	DD	FLAT:??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	SEGMENT
??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 DD 00H ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	SEGMENT
??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 DD FLAT:??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@'
	DB	'std@@@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_7failure@ios_base@std@@6B@
CONST	SEGMENT
??_7failure@ios_base@std@@6B@ DD FLAT:??_R4failure@ios_base@std@@6B@ ; std::ios_base::failure::`vftable'
	DD	FLAT:??_Efailure@ios_base@std@@UAEPAXI@Z
	DD	FLAT:?what@runtime_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_R4failure@ios_base@std@@6B@
rdata$r	SEGMENT
??_R4failure@ios_base@std@@6B@ DD 00H			; std::ios_base::failure::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVfailure@ios_base@std@@@8
	DD	FLAT:??_R3failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R3failure@ios_base@std@@8
rdata$r	SEGMENT
??_R3failure@ios_base@std@@8 DD 00H			; std::ios_base::failure::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2failure@ios_base@std@@8
rdata$r	SEGMENT
??_R2failure@ios_base@std@@8 DD FLAT:??_R1A@?0A@EA@failure@ios_base@std@@8 ; std::ios_base::failure::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@runtime_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@failure@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@failure@ios_base@std@@8 DD FLAT:??_R0?AVfailure@ios_base@std@@@8 ; std::ios_base::failure::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$ctype@D@std@@6B@
CONST	SEGMENT
??_7?$ctype@D@std@@6B@ DD FLAT:??_R4?$ctype@D@std@@6B@	; std::ctype<char>::`vftable'
	DD	FLAT:??_E?$ctype@D@std@@MAEPAXI@Z
	DD	FLAT:?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z
	DD	FLAT:?do_tolower@?$ctype@D@std@@MBEDD@Z
	DD	FLAT:?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z
	DD	FLAT:?do_toupper@?$ctype@D@std@@MBEDD@Z
	DD	FLAT:?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z
	DD	FLAT:?do_widen@?$ctype@D@std@@MBEDD@Z
	DD	FLAT:?_Do_widen_s@?$ctype@D@std@@MBEPBDPBD0PADI@Z
	DD	FLAT:?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z
	DD	FLAT:?do_narrow@?$ctype@D@std@@MBEDDD@Z
	DD	FLAT:?_Do_narrow_s@?$ctype@D@std@@MBEPBDPBD0DPADI@Z
CONST	ENDS
;	COMDAT ??_R4?$ctype@D@std@@6B@
rdata$r	SEGMENT
??_R4?$ctype@D@std@@6B@ DD 00H				; std::ctype<char>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ctype@D@std@@@8
	DD	FLAT:??_R3?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ctype@D@std@@8
rdata$r	SEGMENT
??_R3?$ctype@D@std@@8 DD 00H				; std::ctype<char>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@D@std@@8
rdata$r	SEGMENT
??_R2?$ctype@D@std@@8 DD FLAT:??_R1A@?0A@EA@?$ctype@D@std@@8 ; std::ctype<char>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ctype_base@std@@8
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ctype@D@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ctype@D@std@@8 DD FLAT:??_R0?AV?$ctype@D@std@@@8 ; std::ctype<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@D@std@@@8
_DATA	SEGMENT
??_R0?AV?$ctype@D@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ctype<char> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ctype@D@std@@', 00H
_DATA	ENDS
;	COMDAT ??_7ctype_base@std@@6B@
CONST	SEGMENT
??_7ctype_base@std@@6B@ DD FLAT:??_R4ctype_base@std@@6B@ ; std::ctype_base::`vftable'
	DD	FLAT:??_Ectype_base@std@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R4ctype_base@std@@6B@
rdata$r	SEGMENT
??_R4ctype_base@std@@6B@ DD 00H				; std::ctype_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUctype_base@std@@@8
	DD	FLAT:??_R3ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ctype_base@std@@8
rdata$r	SEGMENT
??_R3ctype_base@std@@8 DD 00H				; std::ctype_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2ctype_base@std@@8
rdata$r	SEGMENT
??_R2ctype_base@std@@8 DD FLAT:??_R1A@?0A@EA@ctype_base@std@@8 ; std::ctype_base::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ctype_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ctype_base@std@@8 DD FLAT:??_R0?AUctype_base@std@@@8 ; std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUctype_base@std@@@8
_DATA	SEGMENT
??_R0?AUctype_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ctype_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUctype_base@std@@', 00H
_DATA	ENDS
;	COMDAT ??_7codecvt_base@std@@6B@
CONST	SEGMENT
??_7codecvt_base@std@@6B@ DD FLAT:??_R4codecvt_base@std@@6B@ ; std::codecvt_base::`vftable'
	DD	FLAT:??_Ecodecvt_base@std@@UAEPAXI@Z
	DD	FLAT:?do_always_noconv@codecvt_base@std@@MBE_NXZ
	DD	FLAT:?do_max_length@codecvt_base@std@@MBEHXZ
	DD	FLAT:?do_encoding@codecvt_base@std@@MBEHXZ
CONST	ENDS
;	COMDAT ??_R4codecvt_base@std@@6B@
rdata$r	SEGMENT
??_R4codecvt_base@std@@6B@ DD 00H			; std::codecvt_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVcodecvt_base@std@@@8
	DD	FLAT:??_R3codecvt_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R3codecvt_base@std@@8
rdata$r	SEGMENT
??_R3codecvt_base@std@@8 DD 00H				; std::codecvt_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2codecvt_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2codecvt_base@std@@8
rdata$r	SEGMENT
??_R2codecvt_base@std@@8 DD FLAT:??_R1A@?0A@EA@codecvt_base@std@@8 ; std::codecvt_base::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@codecvt_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@codecvt_base@std@@8 DD FLAT:??_R0?AVcodecvt_base@std@@@8 ; std::codecvt_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3codecvt_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVcodecvt_base@std@@@8
_DATA	SEGMENT
??_R0?AVcodecvt_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::codecvt_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVcodecvt_base@std@@', 00H
_DATA	ENDS
;	COMDAT ??_7facet@locale@std@@6B@
CONST	SEGMENT
??_7facet@locale@std@@6B@ DD FLAT:??_R4facet@locale@std@@6B@ ; std::locale::facet::`vftable'
	DD	FLAT:??_Efacet@locale@std@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R4facet@locale@std@@6B@
rdata$r	SEGMENT
??_R4facet@locale@std@@6B@ DD 00H			; std::locale::facet::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVfacet@locale@std@@@8
	DD	FLAT:??_R3facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R3facet@locale@std@@8
rdata$r	SEGMENT
??_R3facet@locale@std@@8 DD 00H				; std::locale::facet::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R2facet@locale@std@@8
rdata$r	SEGMENT
??_R2facet@locale@std@@8 DD FLAT:??_R1A@?0A@EA@facet@locale@std@@8 ; std::locale::facet::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@facet@locale@std@@8 DD FLAT:??_R0?AVfacet@locale@std@@@8 ; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVfacet@locale@std@@@8
_DATA	SEGMENT
??_R0?AVfacet@locale@std@@@8 DD FLAT:??_7type_info@@6B@	; std::locale::facet `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVfacet@locale@std@@', 00H
_DATA	ENDS
;	COMDAT ??_7runtime_error@std@@6B@
CONST	SEGMENT
??_7runtime_error@std@@6B@ DD FLAT:??_R4runtime_error@std@@6B@ ; std::runtime_error::`vftable'
	DD	FLAT:??_Eruntime_error@std@@UAEPAXI@Z
	DD	FLAT:?what@runtime_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_R4runtime_error@std@@6B@
rdata$r	SEGMENT
??_R4runtime_error@std@@6B@ DD 00H			; std::runtime_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVruntime_error@std@@@8
	DD	FLAT:??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R3runtime_error@std@@8
rdata$r	SEGMENT
??_R3runtime_error@std@@8 DD 00H			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2runtime_error@std@@8
rdata$r	SEGMENT
??_R2runtime_error@std@@8 DD FLAT:??_R1A@?0A@EA@runtime_error@std@@8 ; std::runtime_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@runtime_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@runtime_error@std@@8 DD FLAT:??_R0?AVruntime_error@std@@@8 ; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_8?$basic_ofstream@DU?$char_traits@D@std@@@std@@7B@
CONST	SEGMENT
??_8?$basic_ofstream@DU?$char_traits@D@std@@@std@@7B@ DD 00H ; std::basic_ofstream<char,std::char_traits<char> >::`vbtable'
	DD	054H
CONST	ENDS
;	COMDAT ??_7?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ofstream<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R4?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	054H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ofstream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_filebuf<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
	DD	FLAT:?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	DD	FLAT:?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	DD	FLAT:?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADH@Z
	DD	FLAT:?_Xsgetn_s@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADIH@Z
	DD	FLAT:?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPBDH@Z
	DD	FLAT:?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z
	DD	FLAT:?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z
	DD	FLAT:?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PADH@Z
	DD	FLAT:?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
CONST	ENDS
;	COMDAT ??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_filebuf<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@
CONST	SEGMENT
??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@ DD 00H ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
	DD	04cH
CONST	ENDS
;	COMDAT ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@
CONST	SEGMENT
??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@ DD 00H ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
	DD	054H
CONST	ENDS
;	COMDAT ??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
CONST	SEGMENT
??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD FLAT:??_R4?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vftable'
	DD	FLAT:??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R4?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD 00H ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
	DD	054H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
	DD	FLAT:??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD 00H ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
	DD	03H
	DD	0aH
	DD	FLAT:??_R2?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R2?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
	DD	FLAT:??_R17?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	09H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$alloc'
	DB	'ator@D@2@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
CONST	SEGMENT
??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD FLAT:??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`vftable'
	DD	FLAT:??_E?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
	DD	FLAT:?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
	DD	FLAT:?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
	DD	FLAT:?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ
	DD	FLAT:?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADH@Z
	DD	FLAT:?_Xsgetn_s@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADIH@Z
	DD	FLAT:?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPBDH@Z
	DD	FLAT:?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@JHH@Z
	DD	FLAT:?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z
	DD	FLAT:?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PADH@Z
	DD	FLAT:?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
CONST	ENDS
;	COMDAT ??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD 00H ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
	DD	FLAT:??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD 00H ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocato'
	DB	'r@D@2@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_8?$basic_iostream@DU?$char_traits@D@std@@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@
CONST	SEGMENT
??_8?$basic_iostream@DU?$char_traits@D@std@@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@ DD 00H ; std::basic_iostream<char,std::char_traits<char> >::`vbtable'
	DD	04H
CONST	ENDS
;	COMDAT ??_8?$basic_iostream@DU?$char_traits@D@std@@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@
CONST	SEGMENT
??_8?$basic_iostream@DU?$char_traits@D@std@@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@ DD 00H ; std::basic_iostream<char,std::char_traits<char> >::`vbtable'
	DD	0cH
CONST	ENDS
;	COMDAT ??_7?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_iostream<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_iostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R4?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	0cH
	DD	00H
	DD	FLAT:??_R0?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	03H
	DD	09H
	DD	FLAT:??_R2?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_iostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
	DD	FLAT:??_R17?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R17?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R17?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	03H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	08H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_iostream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@
CONST	SEGMENT
??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@ DD 00H ; std::basic_ostream<char,std::char_traits<char> >::`vbtable'
	DD	04H
CONST	ENDS
;	COMDAT ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ostream<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ostream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_8?$basic_istream@DU?$char_traits@D@std@@@std@@7B@
CONST	SEGMENT
??_8?$basic_istream@DU?$char_traits@D@std@@@std@@7B@ DD 00H ; std::basic_istream<char,std::char_traits<char> >::`vbtable'
	DD	08H
CONST	ENDS
;	COMDAT ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_istream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_istream<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R4?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_istream@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_istream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	08H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_istream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R13A@3EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R13A@3EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (4,0,4,64)'
	DD	00H
	DD	04H
	DD	00H
	DD	04H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@A@3EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@A@3EA@ios_base@std@@8 DD FLAT:??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
	DD	01H
	DD	00H
	DD	00H
	DD	04H
	DD	040H
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,0,4,80)'
	DD	02H
	DD	00H
	DD	00H
	DD	04H
	DD	050H
	DD	FLAT:??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_istream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_istream@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_streambuf<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
	DD	FLAT:?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	DD	FLAT:?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	DD	FLAT:?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADH@Z
	DD	FLAT:?_Xsgetn_s@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADIH@Z
	DD	FLAT:?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPBDH@Z
	DD	FLAT:?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z
	DD	FLAT:?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z
	DD	FLAT:?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PADH@Z
	DD	FLAT:?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
CONST	ENDS
;	COMDAT ??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_streambuf<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ios<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_ios<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD 00H	; std::basic_ios<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ios_base@std@@8
	DD	FLAT:??_R13?0A@EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ios<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ios@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_7ios_base@std@@6B@
CONST	SEGMENT
??_7ios_base@std@@6B@ DD FLAT:??_R4ios_base@std@@6B@	; std::ios_base::`vftable'
	DD	FLAT:??_Eios_base@std@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R4ios_base@std@@6B@
rdata$r	SEGMENT
??_R4ios_base@std@@6B@ DD 00H				; std::ios_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVios_base@std@@@8
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ios_base@std@@8
rdata$r	SEGMENT
??_R3ios_base@std@@8 DD 00H				; std::ios_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2ios_base@std@@8
rdata$r	SEGMENT
??_R2ios_base@std@@8 DD FLAT:??_R1A@?0A@EA@ios_base@std@@8 ; std::ios_base::`RTTI Base Class Array'
	DD	FLAT:??_R13?0A@EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R13?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R13?0A@EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R3?$_Iosb@H@std@@8 DD 00H				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R2?$_Iosb@H@std@@8 DD FLAT:??_R1A@?0A@EA@?$_Iosb@H@std@@8 ; std::_Iosb<int>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$_Iosb@H@std@@@8
_DATA	SEGMENT
??_R0?AV?$_Iosb@H@std@@@8 DD FLAT:??_7type_info@@6B@	; std::_Iosb<int> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$_Iosb@H@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ios_base@std@@8 DD FLAT:??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVios_base@std@@@8
_DATA	SEGMENT
??_R0?AVios_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ios_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVios_base@std@@', 00H
_DATA	ENDS
;	COMDAT ??_C@_01KGKMHCOC@e?$AA@
CONST	SEGMENT
??_C@_01KGKMHCOC@e?$AA@ DB 'e', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01DDCIFGEA@E?$AA@
CONST	SEGMENT
??_C@_01DDCIFGEA@E?$AA@ DB 'E', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02BBAHNLBA@?$CFp?$AA@
CONST	SEGMENT
??_C@_02BBAHNLBA@?$CFp?$AA@ DB '%p', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02CLHGNPPK@Lu?$AA@
CONST	SEGMENT
??_C@_02CLHGNPPK@Lu?$AA@ DB 'Lu', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02HIKPPMOK@Ld?$AA@
CONST	SEGMENT
??_C@_02HIKPPMOK@Ld?$AA@ DB 'Ld', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02BDDLJJBK@lu?$AA@
CONST	SEGMENT
??_C@_02BDDLJJBK@lu?$AA@ DB 'lu', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02EAOCLKAK@ld?$AA@
CONST	SEGMENT
??_C@_02EAOCLKAK@ld?$AA@ DB 'ld', 00H			; `string'
CONST	ENDS
;	COMDAT ?_Stz@?$fpos@H@std@@0HB
CONST	SEGMENT
?_Stz@?$fpos@H@std@@0HB DD 00H				; std::fpos<int>::_Stz
CONST	ENDS
;	COMDAT __TI2?AVbad_cast@std@@
xdata$x	SEGMENT
__TI2?AVbad_cast@std@@ DD 00H
	DD	FLAT:??1bad_cast@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_cast@std@@
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_cast@std@@
xdata$x	SEGMENT
__CTA2?AVbad_cast@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_cast@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_cast@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@std@@@8
_DATA	SEGMENT
??_R0?AVbad_cast@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_cast `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_cast@std@@', 00H
_DATA	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast?$AA@
CONST	SEGMENT
??_C@_08EPJLHIJG@bad?5cast?$AA@ DB 'bad cast', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MALIEGMD@?$FL?$CF02d?3?$CF02d?3?$CF02d?$FN?5?$AA@
CONST	SEGMENT
??_C@_0BC@MALIEGMD@?$FL?$CF02d?3?$CF02d?3?$CF02d?$FN?5?$AA@ DB '[%02d:%02'
	DB	'd:%02d] ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BPABCLGK@gamelog?4txt?$AA@
CONST	SEGMENT
??_C@_0M@BPABCLGK@gamelog?4txt?$AA@ DB 'gamelog.txt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KDFAGGMJ@gamelog2?4txt?$AA@
CONST	SEGMENT
??_C@_0N@KDFAGGMJ@gamelog2?4txt?$AA@ DB 'gamelog2.txt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08GPPPDGBF@muzzleb1?$AA@
CONST	SEGMENT
??_C@_08GPPPDGBF@muzzleb1?$AA@ DB 'muzzleb1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08GNLJIIEM@muzzlea1?$AA@
CONST	SEGMENT
??_C@_08GNLJIIEM@muzzlea1?$AA@ DB 'muzzlea1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09FMEOCAPC@towhumvee?$AA@
CONST	SEGMENT
??_C@_09FMEOCAPC@towhumvee?$AA@ DB 'towhumvee', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09MJFDFMKK@Mobileart?$AA@
CONST	SEGMENT
??_C@_09MJFDFMKK@Mobileart?$AA@ DB 'Mobileart', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05MPMPJNEE@Recon?$AA@
CONST	SEGMENT
??_C@_05MPMPJNEE@Recon?$AA@ DB 'Recon', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MIGDJIHC@recon?$AA@
CONST	SEGMENT
??_C@_05MIGDJIHC@recon?$AA@ DB 'recon', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CAJHPJGE@CnC_GDI_Orca?$AA@
CONST	SEGMENT
??_C@_0N@CAJHPJGE@CnC_GDI_Orca?$AA@ DB 'CnC_GDI_Orca', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@FDHNFNOP@CnC_GDI_Mammoth_Tank?$AA@
CONST	SEGMENT
??_C@_0BF@FDHNFNOP@CnC_GDI_Mammoth_Tank?$AA@ DB 'CnC_GDI_Mammoth_Tank', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@MFMCCHHH@CnC_GDI_Medium_Tank?$AA@
CONST	SEGMENT
??_C@_0BE@MFMCCHHH@CnC_GDI_Medium_Tank?$AA@ DB 'CnC_GDI_Medium_Tank', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CEAEFAJG@CnC_GDI_MRLS?$AA@
CONST	SEGMENT
??_C@_0N@CEAEFAJG@CnC_GDI_MRLS?$AA@ DB 'CnC_GDI_MRLS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IMFLEHKE@CnC_GDI_APC?$AA@
CONST	SEGMENT
??_C@_0M@IMFLEHKE@CnC_GDI_APC?$AA@ DB 'CnC_GDI_APC', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GDPFEJDE@CnC_GDI_Humm?9vee?$AA@
CONST	SEGMENT
??_C@_0BB@GDPFEJDE@CnC_GDI_Humm?9vee?$AA@ DB 'CnC_GDI_Humm-vee', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08HGOEAHFE@muzzleb0?$AA@
CONST	SEGMENT
??_C@_08HGOEAHFE@muzzleb0?$AA@ DB 'muzzleb0', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@OJMOCDBN@CnC_Nod_Apache?$AA@
CONST	SEGMENT
??_C@_0P@OJMOCDBN@CnC_Nod_Apache?$AA@ DB 'CnC_Nod_Apache', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FLILFJBA@CnC_Nod_Flame_Tank?$AA@
CONST	SEGMENT
??_C@_0BD@FLILFJBA@CnC_Nod_Flame_Tank?$AA@ DB 'CnC_Nod_Flame_Tank', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@KFFOCKEE@CnC_Nod_Light_Tank?$AA@
CONST	SEGMENT
??_C@_0BD@KFFOCKEE@CnC_Nod_Light_Tank?$AA@ DB 'CnC_Nod_Light_Tank', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@JKMFPNNA@CnC_Nod_Mobile_Artillery?$AA@
CONST	SEGMENT
??_C@_0BJ@JKMFPNNA@CnC_Nod_Mobile_Artillery?$AA@ DB 'CnC_Nod_Mobile_Artil'
	DB	'lery', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_06HIGCFHGK@barrel?$AA@
CONST	SEGMENT
??_C@_06HIGCFHGK@barrel?$AA@ DB 'barrel', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OFJMCHAB@CnC_Nod_APC?$AA@
CONST	SEGMENT
??_C@_0M@OFJMCHAB@CnC_Nod_APC?$AA@ DB 'CnC_Nod_APC', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08HEKCLJAN@muzzlea0?$AA@
CONST	SEGMENT
??_C@_08HEKCLJAN@muzzlea0?$AA@ DB 'muzzlea0', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KPJBJEBP@CnC_Nod_Buggy?$AA@
CONST	SEGMENT
??_C@_0O@KPJBJEBP@CnC_Nod_Buggy?$AA@ DB 'CnC_Nod_Buggy', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@GDMIOCJG@?$FL?$CF02d?3?$CF02d?3?$CF02d?$FN?5?$CFs?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BH@GDMIOCJG@?$FL?$CF02d?3?$CF02d?3?$CF02d?$FN?5?$CFs?5?$CFs?$AA@ DB '['
	DB	'%02d:%02d:%02d] %s %s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03OFAPEBGM@?$CFs?6?$AA@
CONST	SEGMENT
??_C@_03OFAPEBGM@?$CFs?6?$AA@ DB '%s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09GLAHALIH@?$CFs_?$CFs?4txt?$AA@
CONST	SEGMENT
??_C@_09GLAHALIH@?$CFs_?$CFs?4txt?$AA@ DB '%s_%s.txt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08EDNAOKPO@_GAMELOG?$AA@
CONST	SEGMENT
??_C@_08EDNAOKPO@_GAMELOG?$AA@ DB '_GAMELOG', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@DEDNKPN@MDB_SSGM_Destroy_When_Object_Des@
CONST	SEGMENT
??_C@_0CH@DEDNKPN@MDB_SSGM_Destroy_When_Object_Des@ DB 'MDB_SSGM_Destroy_'
	DB	'When_Object_Destroyed', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BDLGCGMM@e_dsp_tibgas?$AA@
CONST	SEGMENT
??_C@_0N@BDLGCGMM@e_dsp_tibgas?$AA@ DB 'e_dsp_tibgas', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@INKEJDPI@ag_flame01?$AA@
CONST	SEGMENT
??_C@_0L@INKEJDPI@ag_flame01?$AA@ DB 'ag_flame01', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GAAICAAM@ag_brlexp1?$AA@
CONST	SEGMENT
??_C@_0L@GAAICAAM@ag_brlexp1?$AA@ DB 'ag_brlexp1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EOCMKBEL@ag_bgwoodexp?$AA@
CONST	SEGMENT
??_C@_0N@EOCMKBEL@ag_bgwoodexp?$AA@ DB 'ag_bgwoodexp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BDGOMBAD@ag_smwoodexp?$AA@
CONST	SEGMENT
??_C@_0N@BDGOMBAD@ag_smwoodexp?$AA@ DB 'ag_smwoodexp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IPIPENLA@ag_pucreation?$AA@
CONST	SEGMENT
??_C@_0O@IPIPENLA@ag_pucreation?$AA@ DB 'ag_pucreation', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NHJNEILC@Invisible_Object?$AA@
CONST	SEGMENT
??_C@_0BB@NHJNEILC@Invisible_Object?$AA@ DB 'Invisible_Object', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05GFOLEBJA@?$CFs?1?$CFs?$AA@
CONST	SEGMENT
??_C@_05GFOLEBJA@?$CFs?1?$CFs?$AA@ DB '%s/%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09EJANBKGE@no?5string?$AA@
CONST	SEGMENT
??_C@_09EJANBKGE@no?5string?$AA@ DB 'no string', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06KEPEGCIE@?$CFls?5?$CFs?$AA@
CONST	SEGMENT
??_C@_06KEPEGCIE@?$CFls?5?$CFs?$AA@ DB '%ls %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09MJONCACI@No?5String?$AA@
CONST	SEGMENT
??_C@_09MJONCACI@No?5String?$AA@ DB 'No String', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@ICKKNJCI@Translated_Preset?$AA@
CONST	SEGMENT
??_C@_0BC@ICKKNJCI@Translated_Preset?$AA@ DB 'Translated_Preset', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01GBGANLPD@0?$AA@
CONST	SEGMENT
??_C@_01GBGANLPD@0?$AA@ DB '0', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08EOMCENKK@Timed?5C4?$AA@
CONST	SEGMENT
??_C@_08EOMCENKK@Timed?5C4?$AA@ DB 'Timed C4', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LPHHBPGP@Proximity?5C4?$AA@
CONST	SEGMENT
??_C@_0N@LPHHBPGP@Proximity?5C4?$AA@ DB 'Proximity C4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09CJNFFEML@Remote?5C4?$AA@
CONST	SEGMENT
??_C@_09CJNFFEML@Remote?5C4?$AA@ DB 'Remote C4', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@EFPMAOKO@?$FL?$CF02d?3?$CF02d?3?$CF02d?$FN?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BE@EFPMAOKO@?$FL?$CF02d?3?$CF02d?3?$CF02d?$FN?5?$CFs?$AA@ DB '[%02'
	DB	'd:%02d:%02d] %s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04CFKLBGE@0?5?$CFs?$AA@
CONST	SEGMENT
??_C@_04CFKLBGE@0?5?$CFs?$AA@ DB '0 %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KCPCDLGO@renlog_?$CFs?4txt?$AA@
CONST	SEGMENT
??_C@_0O@KCPCDLGO@renlog_?$CFs?4txt?$AA@ DB 'renlog_%s.txt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07ECEMPDJM@General?$AA@
CONST	SEGMENT
??_C@_07ECEMPDJM@General?$AA@ DB 'General', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08EEOHOBEO@Settings?$AA@
CONST	SEGMENT
??_C@_08EEOHOBEO@Settings?$AA@ DB 'Settings', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09NBJCKKJL@MapName00?$AA@
CONST	SEGMENT
??_C@_09NBJCKKJL@MapName00?$AA@ DB 'MapName00', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04MLLLIHIP@null?$AA@
CONST	SEGMENT
??_C@_04MLLLIHIP@null?$AA@ DB 'null', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LGMEBDBC@Server?$AA@
CONST	SEGMENT
??_C@_06LGMEBDBC@Server?$AA@ DB 'Server', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LLCHJONG@Config?$AA@
CONST	SEGMENT
??_C@_06LLCHJONG@Config?$AA@ DB 'Config', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@ELFBPMOA@svrcfg_cnc?4ini?$AA@
CONST	SEGMENT
??_C@_0P@ELFBPMOA@svrcfg_cnc?4ini?$AA@ DB 'svrcfg_cnc.ini', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CBNBBGDB@server?4ini?$AA@
CONST	SEGMENT
??_C@_0L@CBNBBGDB@server?4ini?$AA@ DB 'server.ini', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GGBPOCJD@?4?1server?4ini?$AA@
CONST	SEGMENT
??_C@_0N@GGBPOCJD@?4?1server?4ini?$AA@ DB './server.ini', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NNLBOHAB@?4?1data?1server?4ini?$AA@
CONST	SEGMENT
??_C@_0BC@NNLBOHAB@?4?1data?1server?4ini?$AA@ DB './data/server.ini', 00H ; `string'
CONST	ENDS
;	COMDAT __TI3?AVfailure@ios_base@std@@
xdata$x	SEGMENT
__TI3?AVfailure@ios_base@std@@ DD 00H
	DD	FLAT:??1failure@ios_base@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVfailure@ios_base@std@@
xdata$x	ENDS
;	COMDAT __CTA3?AVfailure@ios_base@std@@
xdata$x	SEGMENT
__CTA3?AVfailure@ios_base@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z40
	DD	FLAT:__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z40
xdata$x	SEGMENT
__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z40 DD 00H
	DD	FLAT:??_R0?AVfailure@ios_base@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0failure@ios_base@std@@QAE@ABV012@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVfailure@ios_base@std@@@8
_DATA	SEGMENT
??_R0?AVfailure@ios_base@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::ios_base::failure `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVfailure@ios_base@std@@', 00H
_DATA	ENDS
;	COMDAT ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@
CONST	SEGMENT
??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@ DB 'ios_base::eofbit set', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@
CONST	SEGMENT
??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@ DB 'ios_base::failbit se'
	DB	't', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@
CONST	SEGMENT
??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@ DB 'ios_base::badbit set', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true?$AA@
CONST	SEGMENT
??_C@_04LOAJBDKD@true?$AA@ DB 'true', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05LAPONLG@false?$AA@
CONST	SEGMENT
??_C@_05LAPONLG@false?$AA@ DB 'false', 00H		; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVruntime_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0runtime_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVruntime_error@std@@@8
_DATA	SEGMENT
??_R0?AVruntime_error@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::runtime_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVruntime_error@std@@', 00H
__bad_alloc_Message DD FLAT:??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\xlocale
;	COMDAT ??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT
??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z PROC		; std::_Maklocchr<char>, COMDAT
; __Byte$ = eax

; 603  : 	return ((_Elem)(unsigned char)_Byte);
; 604  : 	}

	ret	0
??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z ENDP		; std::_Maklocchr<char>
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\xlocnum
_TEXT	ENDS
;	COMDAT ?_Tidy@?$numpunct@D@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$numpunct@D@std@@AAEXXZ PROC			; std::numpunct<char>::_Tidy, COMDAT
; _this$ = esi

; 191  : 		_DELETE_CRT_VEC((void *)_Grouping);

	mov	eax, DWORD PTR [esi+8]
	push	eax
	call	DWORD PTR ?RenVecDelete@@3P6AXPAX@ZA	; RenVecDelete

; 192  : 		_DELETE_CRT_VEC((void *)_Falsename);

	mov	ecx, DWORD PTR [esi+16]
	push	ecx
	call	DWORD PTR ?RenVecDelete@@3P6AXPAX@ZA	; RenVecDelete

; 193  : 		_DELETE_CRT_VEC((void *)_Truename);

	mov	edx, DWORD PTR [esi+20]
	push	edx
	call	DWORD PTR ?RenVecDelete@@3P6AXPAX@ZA	; RenVecDelete
	add	esp, 12					; 0000000cH

; 194  : 		}

	ret	0
?_Tidy@?$numpunct@D@std@@AAEXXZ ENDP			; std::numpunct<char>::_Tidy
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?thousands_sep@?$numpunct@D@std@@QBEDXZ
_TEXT	SEGMENT
?thousands_sep@?$numpunct@D@std@@QBEDXZ PROC		; std::numpunct<char>::thousands_sep, COMDAT
; _this$ = ecx

; 75   : 		return (do_thousands_sep());

	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+8]
	jmp	edx
?thousands_sep@?$numpunct@D@std@@QBEDXZ ENDP		; std::numpunct<char>::thousands_sep
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?decimal_point@?$numpunct@D@std@@QBEDXZ
_TEXT	SEGMENT
?decimal_point@?$numpunct@D@std@@QBEDXZ PROC		; std::numpunct<char>::decimal_point, COMDAT
; _this$ = ecx

; 70   : 		return (do_decimal_point());

	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+4]
	jmp	edx
?decimal_point@?$numpunct@D@std@@QBEDXZ ENDP		; std::numpunct<char>::decimal_point
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\streambuf
_TEXT	ENDS
;	COMDAT ??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator++, COMDAT
; _this$ = eax

; 607  : 		return (*this);
; 608  : 		}

	ret	0
??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator++
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator*, COMDAT
; _this$ = eax

; 602  : 		return (*this);
; 603  : 		}

	ret	0
??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator*
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\xlocnum
_TEXT	ENDS
;	COMDAT ?do_thousands_sep@?$numpunct@D@std@@MBEDXZ
_TEXT	SEGMENT
?do_thousands_sep@?$numpunct@D@std@@MBEDXZ PROC		; std::numpunct<char>::do_thousands_sep, COMDAT
; _this$ = ecx

; 170  : 		return (_Kseparator);

	mov	al, BYTE PTR [ecx+13]

; 171  : 		}

	ret	0
?do_thousands_sep@?$numpunct@D@std@@MBEDXZ ENDP		; std::numpunct<char>::do_thousands_sep
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_decimal_point@?$numpunct@D@std@@MBEDXZ
_TEXT	SEGMENT
?do_decimal_point@?$numpunct@D@std@@MBEDXZ PROC		; std::numpunct<char>::do_decimal_point, COMDAT
; _this$ = ecx

; 165  : 		return (_Dp);

	mov	al, BYTE PTR [ecx+12]

; 166  : 		}

	ret	0
?do_decimal_point@?$numpunct@D@std@@MBEDXZ ENDP		; std::numpunct<char>::do_decimal_point
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z
_TEXT	SEGMENT
?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt, COMDAT
; __Fmt$ = eax
; __Spec$ = edi
; __Flags$ = edx

; 1432 : 		char *_Ptr = _Fmt;
; 1433 : 		*_Ptr++ = '%';

	mov	BYTE PTR [eax], 37			; 00000025H
	lea	ecx, DWORD PTR [eax+1]

; 1434 : 
; 1435 : 		if (_Flags & ios_base::showpos)

	test	dl, 32					; 00000020H
	je	SHORT $LN4@Ifmt

; 1436 : 			*_Ptr++ = '+';

	mov	BYTE PTR [ecx], 43			; 0000002bH
	inc	ecx
$LN4@Ifmt:

; 1437 : 		if (_Flags & ios_base::showbase)

	test	dl, 8
	je	SHORT $LN3@Ifmt

; 1438 : 			*_Ptr++ = '#';

	mov	BYTE PTR [ecx], 35			; 00000023H
	inc	ecx
$LN3@Ifmt:
	push	ebx

; 1439 : 		if (_Spec[0] != 'L')

	mov	bl, BYTE PTR [edi]
	push	esi
	cmp	bl, 76					; 0000004cH
	je	SHORT $LN2@Ifmt

; 1440 : 			*_Ptr++ = _Spec[0];	// qualifier

	mov	BYTE PTR [ecx], bl

; 1441 : 		else

	jmp	SHORT $LN11@Ifmt
$LN2@Ifmt:

; 1442 : 			{	/* change L to I64 */
; 1443 : 			*_Ptr++ = 'I';

	mov	BYTE PTR [ecx], 73			; 00000049H
	inc	ecx

; 1444 : 			*_Ptr++ = '6';

	mov	BYTE PTR [ecx], 54			; 00000036H
	inc	ecx

; 1445 : 			*_Ptr++ = '4';

	mov	BYTE PTR [ecx], 52			; 00000034H
$LN11@Ifmt:

; 1446 : 			}
; 1447 : 
; 1448 : 		ios_base::fmtflags _Basefield = _Flags & ios_base::basefield;

	mov	esi, edx
	and	esi, 3584				; 00000e00H
	inc	ecx

; 1449 : 		*_Ptr++ = _Basefield == ios_base::oct ? 'o'
; 1450 : 			: _Basefield != ios_base::hex ? _Spec[1]	// 'd' or 'u'
; 1451 : 			: _Flags & ios_base::uppercase ? 'X' : 'x';

	cmp	esi, 1024				; 00000400H
	jne	SHORT $LN9@Ifmt
	mov	dl, 111					; 0000006fH
	pop	esi
	mov	BYTE PTR [ecx], dl

; 1452 : 		*_Ptr = '\0';

	mov	BYTE PTR [ecx+1], 0
	pop	ebx

; 1453 : 		return (_Fmt);
; 1454 : 		}

	ret	0
$LN9@Ifmt:

; 1449 : 		*_Ptr++ = _Basefield == ios_base::oct ? 'o'
; 1450 : 			: _Basefield != ios_base::hex ? _Spec[1]	// 'd' or 'u'
; 1451 : 			: _Flags & ios_base::uppercase ? 'X' : 'x';

	cmp	esi, 2048				; 00000800H
	je	SHORT $LN7@Ifmt
	mov	dl, BYTE PTR [edi+1]
	pop	esi
	mov	BYTE PTR [ecx], dl

; 1452 : 		*_Ptr = '\0';

	mov	BYTE PTR [ecx+1], 0
	pop	ebx

; 1453 : 		return (_Fmt);
; 1454 : 		}

	ret	0
$LN7@Ifmt:

; 1449 : 		*_Ptr++ = _Basefield == ios_base::oct ? 'o'
; 1450 : 			: _Basefield != ios_base::hex ? _Spec[1]	// 'd' or 'u'
; 1451 : 			: _Flags & ios_base::uppercase ? 'X' : 'x';

	add	dl, dl
	add	dl, dl
	add	dl, dl
	not	dl
	and	dl, 32					; 00000020H
	or	dl, 88					; 00000058H
	pop	esi
	mov	BYTE PTR [ecx], dl

; 1452 : 		*_Ptr = '\0';

	mov	BYTE PTR [ecx+1], 0
	pop	ebx

; 1453 : 		return (_Fmt);
; 1454 : 		}

	ret	0
?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z
_TEXT	SEGMENT
__Spec$ = 8						; size = 1
?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt, COMDAT
; __Fmt$ = eax
; __Flags$ = edx

; 1288 : 		{	// generate sprintf format for floating-point

	push	ebx
	mov	bl, BYTE PTR __Spec$[esp]

; 1289 : 		char *_Ptr = _Fmt;
; 1290 : 		*_Ptr++ = '%';

	mov	BYTE PTR [eax], 37			; 00000025H
	lea	ecx, DWORD PTR [eax+1]

; 1291 : 
; 1292 : 		if (_Flags & ios_base::showpos)

	test	dl, 32					; 00000020H
	je	SHORT $LN3@Ffmt

; 1293 : 			*_Ptr++ = '+';

	mov	BYTE PTR [ecx], 43			; 0000002bH
	inc	ecx
$LN3@Ffmt:

; 1294 : 		if (_Flags & ios_base::showpoint)

	test	dl, 16					; 00000010H
	je	SHORT $LN2@Ffmt

; 1295 : 			*_Ptr++ = '#';

	mov	BYTE PTR [ecx], 35			; 00000023H
	inc	ecx
$LN2@Ffmt:

; 1296 : 		*_Ptr++ = '.';

	mov	BYTE PTR [ecx], 46			; 0000002eH
	inc	ecx

; 1297 : 		*_Ptr++ = '*';	// for precision argument

	mov	BYTE PTR [ecx], 42			; 0000002aH
	inc	ecx

; 1298 : 		if (_Spec != '\0')

	test	bl, bl
	je	SHORT $LN1@Ffmt

; 1299 : 			*_Ptr++ = _Spec;	// 'L' qualifier for long double only

	mov	BYTE PTR [ecx], bl
	inc	ecx
$LN1@Ffmt:

; 1300 : 
; 1301 : 		ios_base::fmtflags _Ffl = _Flags & ios_base::floatfield;

	and	edx, 12288				; 00003000H
	pop	ebx

; 1302 : 		*_Ptr++ = _Ffl == ios_base::fixed ? 'f'
; 1303 : 			: _Ffl == ios_base::hexfloat ? 'a'	// added with TR1
; 1304 : 			: _Ffl == ios_base::scientific ? 'e' : 'g';	// specifier

	cmp	edx, 8192				; 00002000H
	jne	SHORT $LN8@Ffmt
	mov	dl, 102					; 00000066H
	mov	BYTE PTR [ecx], dl

; 1305 : 		*_Ptr = '\0';

	mov	BYTE PTR [ecx+1], 0

; 1306 : 		return (_Fmt);
; 1307 : 		}

	ret	0
$LN8@Ffmt:

; 1302 : 		*_Ptr++ = _Ffl == ios_base::fixed ? 'f'
; 1303 : 			: _Ffl == ios_base::hexfloat ? 'a'	// added with TR1
; 1304 : 			: _Ffl == ios_base::scientific ? 'e' : 'g';	// specifier

	cmp	edx, 12288				; 00003000H
	jne	SHORT $LN6@Ffmt
	mov	dl, 97					; 00000061H
	mov	BYTE PTR [ecx], dl

; 1305 : 		*_Ptr = '\0';

	mov	BYTE PTR [ecx+1], 0

; 1306 : 		return (_Fmt);
; 1307 : 		}

	ret	0
$LN6@Ffmt:

; 1302 : 		*_Ptr++ = _Ffl == ios_base::fixed ? 'f'
; 1303 : 			: _Ffl == ios_base::hexfloat ? 'a'	// added with TR1
; 1304 : 			: _Ffl == ios_base::scientific ? 'e' : 'g';	// specifier

	cmp	edx, 4096				; 00001000H
	setne	dl
	lea	edx, DWORD PTR [edx+edx+101]
	mov	BYTE PTR [ecx], dl

; 1305 : 		*_Ptr = '\0';

	mov	BYTE PTR [ecx+1], 0

; 1306 : 		return (_Fmt);
; 1307 : 		}

	ret	0
?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\xlocale
_TEXT	ENDS
;	COMDAT ?_Init@?$codecvt@DDH@std@@IAEXABV_Locinfo@2@@Z
_TEXT	SEGMENT
?_Init@?$codecvt@DDH@std@@IAEXABV_Locinfo@2@@Z PROC	; std::codecvt<char,char,int>::_Init, COMDAT

; 798  : 		}

	ret	0
?_Init@?$codecvt@DDH@std@@IAEXABV_Locinfo@2@@Z ENDP	; std::codecvt<char,char,int>::_Init
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\streambuf
_TEXT	ENDS
;	COMDAT ?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::setp, COMDAT
; __First$ = edi
; __Next$ = edx
; __Last$ = eax

; 263  : 		{	// set pointers for write buffer, extended version

	mov	ecx, DWORD PTR _this$[esp-4]
	push	esi

; 264  : 		*_IPfirst = _First;

	mov	esi, DWORD PTR [ecx+20]
	mov	DWORD PTR [esi], edi

; 265  : 		*_IPnext = _Next;

	mov	esi, DWORD PTR [ecx+36]
	mov	DWORD PTR [esi], edx

; 266  : 		*_IPcount = (int)(_Last - _Next);

	mov	ecx, DWORD PTR [ecx+52]
	sub	eax, edx
	mov	DWORD PTR [ecx], eax
	pop	esi

; 267  : 		}

	ret	4
?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::setp
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::pbase, COMDAT
; _this$ = eax

; 195  : 		return (*_IPfirst);

	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [ecx]

; 196  : 		}

	ret	0
?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pbase
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::setp, COMDAT
; __First$ = ecx
; __Last$ = eax

; 256  : 		{	// set pointers for write buffer

	mov	edx, DWORD PTR _this$[esp-4]
	push	esi

; 257  : 		*_IPfirst = _First;

	mov	esi, DWORD PTR [edx+20]
	mov	DWORD PTR [esi], ecx

; 258  : 		*_IPnext = _First;

	mov	esi, DWORD PTR [edx+36]
	mov	DWORD PTR [esi], ecx

; 259  : 		*_IPcount = (int)(_Last - _First);

	sub	eax, ecx
	mov	ecx, DWORD PTR [edx+52]
	mov	DWORD PTR [ecx], eax
	pop	esi

; 260  : 		}

	ret	4
?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::setp
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\xlocale
_TEXT	ENDS
;	COMDAT ?unshift@?$codecvt@DDH@std@@QBEHAAHPAD1AAPAD@Z
_TEXT	SEGMENT
__State$ = 8						; size = 4
__First2$ = 12						; size = 4
__Last2$ = 16						; size = 4
?unshift@?$codecvt@DDH@std@@QBEHAAHPAD1AAPAD@Z PROC	; std::codecvt<char,char,int>::unshift, COMDAT
; _this$ = ecx
; __Mid2$ = edx

; 756  : 		return (do_unshift(_State, _First2, _Last2, _Mid2));

	mov	eax, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+24]
	push	edx
	mov	edx, DWORD PTR __Last2$[esp]
	push	edx
	mov	edx, DWORD PTR __First2$[esp+4]
	push	edx
	mov	edx, DWORD PTR __State$[esp+8]
	push	edx
	call	eax

; 757  : 		}

	ret	12					; 0000000cH
?unshift@?$codecvt@DDH@std@@QBEHAAHPAD1AAPAD@Z ENDP	; std::codecvt<char,char,int>::unshift
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\streambuf
_TEXT	ENDS
;	COMDAT ?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAPAD0PAH001@Z
_TEXT	SEGMENT
__Gn$ = 8						; size = 4
__Gc$ = 12						; size = 4
__Pf$ = 16						; size = 4
__Pn$ = 20						; size = 4
__Pc$ = 24						; size = 4
?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAPAD0PAH001@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Init, COMDAT
; _this$ = eax
; __Gf$ = ecx

; 291  : 		_IGfirst = _Gf, _IPfirst = _Pf;

	mov	edx, DWORD PTR __Pf$[esp-4]
	mov	DWORD PTR [eax+16], ecx

; 292  : 		_IGnext = _Gn, _IPnext = _Pn;

	mov	ecx, DWORD PTR __Gn$[esp-4]
	mov	DWORD PTR [eax+20], edx
	mov	edx, DWORD PTR __Pn$[esp-4]
	mov	DWORD PTR [eax+32], ecx

; 293  : 		_IGcount = _Gc, _IPcount = _Pc;

	mov	ecx, DWORD PTR __Gc$[esp-4]
	mov	DWORD PTR [eax+36], edx
	mov	edx, DWORD PTR __Pc$[esp-4]
	mov	DWORD PTR [eax+48], ecx
	mov	DWORD PTR [eax+52], edx

; 294  : 		}

	ret	20					; 00000014H
?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAPAD0PAH001@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Init
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Lock, COMDAT
; _this$ = ecx

; 173  : 		_Mylock._Lock();

	add	ecx, 4
	jmp	?_Lock@_Mutex@std@@QAEXXZ		; std::_Mutex::_Lock
?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Lock
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\ios
_TEXT	ENDS
;	COMDAT ?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
_TEXT	SEGMENT
?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ PROC ; std::basic_ios<char,std::char_traits<char> >::tie, COMDAT
; _this$ = eax

; 73   : 		return (_Tiestr);

	mov	eax, DWORD PTR [eax+44]

; 74   : 		}

	ret	0
?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ENDP ; std::basic_ios<char,std::char_traits<char> >::tie
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\xlocale
_TEXT	ENDS
;	COMDAT ?do_length@?$codecvt@DDH@std@@MBEHABHPBD1I@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__First1$ = 12						; size = 4
__Last1$ = 16						; size = 4
__Count$ = 20						; size = 4
?do_length@?$codecvt@DDH@std@@MBEHABHPBD1I@Z PROC	; std::codecvt<char,char,int>::do_length, COMDAT
; _this$ = ecx

; 826  : 		return ((int)(_Count < (size_t)(_Last1 - _First1)
; 827  : 			? _Count : _Last1 - _First1));	// assume 1-to-1 conversion

	mov	eax, DWORD PTR __Last1$[esp-4]
	sub	eax, DWORD PTR __First1$[esp-4]
	mov	ecx, DWORD PTR __Count$[esp-4]
	cmp	ecx, eax
	jae	SHORT $LN4@do_length
	mov	eax, ecx
$LN4@do_length:

; 828  : 		}

	ret	16					; 00000010H
?do_length@?$codecvt@DDH@std@@MBEHABHPBD1I@Z ENDP	; std::codecvt<char,char,int>::do_length
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_unshift@?$codecvt@DDH@std@@MBEHAAHPAD1AAPAD@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__First2$ = 12						; size = 4
___formal$ = 16						; size = 4
__Mid2$ = 20						; size = 4
?do_unshift@?$codecvt@DDH@std@@MBEHAAHPAD1AAPAD@Z PROC	; std::codecvt<char,char,int>::do_unshift, COMDAT
; _this$ = ecx

; 819  : 		_Mid2 = _First2;

	mov	eax, DWORD PTR __Mid2$[esp-4]
	mov	ecx, DWORD PTR __First2$[esp-4]
	mov	DWORD PTR [eax], ecx

; 820  : 		return (noconv);	// convert nothing

	mov	eax, 3

; 821  : 		}

	ret	16					; 00000010H
?do_unshift@?$codecvt@DDH@std@@MBEHAAHPAD1AAPAD@Z ENDP	; std::codecvt<char,char,int>::do_unshift
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_out@?$codecvt@DDH@std@@MBEHAAHPBD1AAPBDPAD3AAPAD@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__First1$ = 12						; size = 4
___formal$ = 16						; size = 4
__Mid1$ = 20						; size = 4
__First2$ = 24						; size = 4
___formal$ = 28						; size = 4
__Mid2$ = 32						; size = 4
?do_out@?$codecvt@DDH@std@@MBEHAAHPBD1AAPBDPAD3AAPAD@Z PROC ; std::codecvt<char,char,int>::do_out, COMDAT
; _this$ = ecx

; 812  : 		_Mid1 = _First1, _Mid2 = _First2;

	mov	eax, DWORD PTR __Mid1$[esp-4]
	mov	ecx, DWORD PTR __First1$[esp-4]
	mov	edx, DWORD PTR __Mid2$[esp-4]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR __First2$[esp-4]
	mov	DWORD PTR [edx], eax

; 813  : 		return (noconv);	// convert nothing

	mov	eax, 3

; 814  : 		}

	ret	28					; 0000001cH
?do_out@?$codecvt@DDH@std@@MBEHAAHPBD1AAPBDPAD3AAPAD@Z ENDP ; std::codecvt<char,char,int>::do_out
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_in@?$codecvt@DDH@std@@MBEHAAHPBD1AAPBDPAD3AAPAD@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__First1$ = 12						; size = 4
___formal$ = 16						; size = 4
__Mid1$ = 20						; size = 4
__First2$ = 24						; size = 4
___formal$ = 28						; size = 4
__Mid2$ = 32						; size = 4
?do_in@?$codecvt@DDH@std@@MBEHAAHPBD1AAPBDPAD3AAPAD@Z PROC ; std::codecvt<char,char,int>::do_in, COMDAT
; _this$ = ecx

; 804  : 		_Mid1 = _First1, _Mid2 = _First2;

	mov	eax, DWORD PTR __Mid1$[esp-4]
	mov	ecx, DWORD PTR __First1$[esp-4]
	mov	edx, DWORD PTR __Mid2$[esp-4]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR __First2$[esp-4]
	mov	DWORD PTR [edx], eax

; 805  : 		return (noconv);	// convert nothing

	mov	eax, 3

; 806  : 		}

	ret	28					; 0000001cH
?do_in@?$codecvt@DDH@std@@MBEHAAHPBD1AAPBDPAD3AAPAD@Z ENDP ; std::codecvt<char,char,int>::do_in
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?out@?$codecvt@DDH@std@@QBEHAAHPBD1AAPBDPAD3AAPAD@Z
_TEXT	SEGMENT
__State$ = 8						; size = 4
__First1$ = 12						; size = 4
__Last1$ = 16						; size = 4
__Mid1$ = 20						; size = 4
__First2$ = 24						; size = 4
__Last2$ = 28						; size = 4
?out@?$codecvt@DDH@std@@QBEHAAHPBD1AAPBDPAD3AAPAD@Z PROC ; std::codecvt<char,char,int>::out, COMDAT
; _this$ = ecx
; __Mid2$ = edx

; 749  : 		return (do_out(_State,
; 750  : 			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));

	mov	eax, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+20]
	push	edx
	mov	edx, DWORD PTR __Last2$[esp]
	push	edx
	mov	edx, DWORD PTR __First2$[esp+4]
	push	edx
	mov	edx, DWORD PTR __Mid1$[esp+8]
	push	edx
	mov	edx, DWORD PTR __Last1$[esp+12]
	push	edx
	mov	edx, DWORD PTR __First1$[esp+16]
	push	edx
	mov	edx, DWORD PTR __State$[esp+20]
	push	edx
	call	eax

; 751  : 		}

	ret	24					; 00000018H
?out@?$codecvt@DDH@std@@QBEHAAHPBD1AAPBDPAD3AAPAD@Z ENDP ; std::codecvt<char,char,int>::out
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?in@?$codecvt@DDH@std@@QBEHAAHPBD1AAPBDPAD3AAPAD@Z
_TEXT	SEGMENT
__State$ = 8						; size = 4
__First1$ = 12						; size = 4
__Last1$ = 16						; size = 4
__Mid1$ = 20						; size = 4
__First2$ = 24						; size = 4
__Last2$ = 28						; size = 4
?in@?$codecvt@DDH@std@@QBEHAAHPBD1AAPBDPAD3AAPAD@Z PROC	; std::codecvt<char,char,int>::in, COMDAT
; _this$ = ecx
; __Mid2$ = edx

; 741  : 		return (do_in(_State,
; 742  : 			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));

	mov	eax, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+16]
	push	edx
	mov	edx, DWORD PTR __Last2$[esp]
	push	edx
	mov	edx, DWORD PTR __First2$[esp+4]
	push	edx
	mov	edx, DWORD PTR __Mid1$[esp+8]
	push	edx
	mov	edx, DWORD PTR __Last1$[esp+12]
	push	edx
	mov	edx, DWORD PTR __First1$[esp+16]
	push	edx
	mov	edx, DWORD PTR __State$[esp+20]
	push	edx
	call	eax

; 743  : 		}

	ret	24					; 00000018H
?in@?$codecvt@DDH@std@@QBEHAAHPBD1AAPBDPAD3AAPAD@Z ENDP	; std::codecvt<char,char,int>::in
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\iosfwd
_TEXT	ENDS
;	COMDAT ??B?$fpos@H@std@@QBEJXZ
_TEXT	SEGMENT
??B?$fpos@H@std@@QBEJXZ PROC				; std::fpos<int>::operator long, COMDAT
; _this$ = ecx

; 79   : 		return ((streamoff)(_Myoff + _FPOSOFF(_Fpos)));

	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [ecx]

; 80   : 		}

	ret	0
??B?$fpos@H@std@@QBEJXZ ENDP				; std::fpos<int>::operator long
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?seekpos@?$fpos@H@std@@QBE_JXZ
_TEXT	SEGMENT
?seekpos@?$fpos@H@std@@QBE_JXZ PROC			; std::fpos<int>::seekpos, COMDAT
; _this$ = ecx

; 74   : 		return (_Fpos);

	mov	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR [ecx+12]

; 75   : 		}

	ret	0
?seekpos@?$fpos@H@std@@QBE_JXZ ENDP			; std::fpos<int>::seekpos
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?state@?$fpos@H@std@@QBEHXZ
_TEXT	SEGMENT
?state@?$fpos@H@std@@QBEHXZ PROC			; std::fpos<int>::state, COMDAT
; _this$ = eax

; 64   : 		return (_Mystate);

	mov	eax, DWORD PTR [eax+16]

; 65   : 		}

	ret	0
?state@?$fpos@H@std@@QBEHXZ ENDP			; std::fpos<int>::state
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$fpos@H@std@@QAE@H_J@Z
_TEXT	SEGMENT
__State$ = 8						; size = 4
__Fileposition$ = 12					; size = 8
??0?$fpos@H@std@@QAE@H_J@Z PROC				; std::fpos<int>::fpos<int>, COMDAT
; _this$ = eax

; 59   : 		{	// construct with conversion state and C file position

	mov	ecx, DWORD PTR __Fileposition$[esp-4]
	mov	edx, DWORD PTR __Fileposition$[esp]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR __State$[esp-4]
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+12], edx
	mov	DWORD PTR [eax+16], ecx

; 60   : 		}

	ret	12					; 0000000cH
??0?$fpos@H@std@@QAE@H_J@Z ENDP				; std::fpos<int>::fpos<int>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$fpos@H@std@@QAE@J@Z
_TEXT	SEGMENT
??0?$fpos@H@std@@QAE@J@Z PROC				; std::fpos<int>::fpos<int>, COMDAT
; _this$ = eax
; __Off$ = ecx

; 54   : 		{	// construct with stream offset

	mov	DWORD PTR [eax], ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx

; 55   : 		}

	ret	0
??0?$fpos@H@std@@QAE@J@Z ENDP				; std::fpos<int>::fpos<int>
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\ostream
_TEXT	ENDS
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; _this$ = eax

; 116  : 			return (_Ok);

	mov	al, BYTE PTR [eax+4]

; 117  : 			}

	ret	0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\streambuf
_TEXT	ENDS
;	COMDAT ?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEHXZ
_TEXT	SEGMENT
?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail, COMDAT
; _this$ = eax

; 277  : 		return (*_IPnext != 0 ? *_IPcount : 0);

	mov	ecx, DWORD PTR [eax+36]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN3@Pnavail
	mov	edx, DWORD PTR [eax+52]
	mov	eax, DWORD PTR [edx]

; 278  : 		}

	ret	0
$LN3@Pnavail:

; 277  : 		return (*_IPnext != 0 ? *_IPcount : 0);

	xor	eax, eax

; 278  : 		}

	ret	0
?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
_TEXT	SEGMENT
?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc, COMDAT
; _this$ = ecx

; 271  : 		--*_IPcount;

	mov	eax, DWORD PTR [ecx+52]
	dec	DWORD PTR [eax]

; 272  : 		return ((*_IPnext)++);

	mov	ecx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [ecx]
	lea	edx, DWORD PTR [eax+1]
	mov	DWORD PTR [ecx], edx

; 273  : 		}

	ret	0
?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z
_TEXT	SEGMENT
?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::pbump, COMDAT
; _this$ = edx
; __Off$ = ecx

; 251  : 		*_IPcount -= _Off;

	mov	eax, DWORD PTR [edx+52]
	sub	DWORD PTR [eax], ecx

; 252  : 		*_IPnext += _Off;

	mov	eax, DWORD PTR [edx+36]
	add	DWORD PTR [eax], ecx

; 253  : 		}

	ret	0
?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pbump
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEHXZ
_TEXT	SEGMENT
?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail, COMDAT
; _this$ = eax

; 246  : 		return (*_IGnext != 0 ? *_IGcount : 0);

	mov	ecx, DWORD PTR [eax+32]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN3@Gnavail
	mov	edx, DWORD PTR [eax+48]
	mov	eax, DWORD PTR [edx]

; 247  : 		}

	ret	0
$LN3@Gnavail:

; 246  : 		return (*_IGnext != 0 ? *_IGcount : 0);

	xor	eax, eax

; 247  : 		}

	ret	0
?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
_TEXT	SEGMENT
?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Gninc, COMDAT
; _this$ = ecx

; 234  : 		--*_IGcount;

	mov	eax, DWORD PTR [ecx+48]
	dec	DWORD PTR [eax]

; 235  : 		return ((*_IGnext)++);

	mov	ecx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [ecx]
	lea	edx, DWORD PTR [eax+1]
	mov	DWORD PTR [ecx], edx

; 236  : 		}

	ret	0
?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Gninc
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Gndec@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
_TEXT	SEGMENT
?_Gndec@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Gndec, COMDAT
; _this$ = eax

; 228  : 		++*_IGcount;

	mov	ecx, DWORD PTR [eax+48]
	inc	DWORD PTR [ecx]

; 229  : 		return (--*_IGnext);

	mov	ecx, DWORD PTR [eax+32]
	dec	DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+32]
	mov	eax, DWORD PTR [eax]

; 230  : 		}

	ret	0
?_Gndec@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Gndec
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::epptr, COMDAT
; _this$ = eax

; 223  : 		return (*_IPnext + *_IPcount);

	mov	ecx, DWORD PTR [eax+52]
	mov	edx, DWORD PTR [eax+36]
	mov	eax, DWORD PTR [ecx]
	add	eax, DWORD PTR [edx]

; 224  : 		}

	ret	0
?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::epptr
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::setg, COMDAT
; __First$ = edi
; __Next$ = edx
; __Last$ = eax

; 215  : 		{	// set pointers for read buffer

	mov	ecx, DWORD PTR _this$[esp-4]
	push	esi

; 216  : 		*_IGfirst = _First;

	mov	esi, DWORD PTR [ecx+16]
	mov	DWORD PTR [esi], edi

; 217  : 		*_IGnext = _Next;

	mov	esi, DWORD PTR [ecx+32]
	mov	DWORD PTR [esi], edx

; 218  : 		*_IGcount = (int)(_Last - _Next);

	mov	ecx, DWORD PTR [ecx+48]
	sub	eax, edx
	mov	DWORD PTR [ecx], eax
	pop	esi

; 219  : 		}

	ret	4
?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::setg
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z
_TEXT	SEGMENT
?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::gbump, COMDAT
; _this$ = edx
; __Off$ = ecx

; 210  : 		*_IGcount -= _Off;

	mov	eax, DWORD PTR [edx+48]
	sub	DWORD PTR [eax], ecx

; 211  : 		*_IGnext += _Off;

	mov	eax, DWORD PTR [edx+32]
	add	DWORD PTR [eax], ecx

; 212  : 		}

	ret	0
?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::gbump
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::egptr, COMDAT
; _this$ = eax

; 205  : 		return (*_IGnext + *_IGcount);

	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR [eax+32]
	mov	eax, DWORD PTR [ecx]
	add	eax, DWORD PTR [edx]

; 206  : 		}

	ret	0
?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::egptr
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::pptr, COMDAT
; _this$ = eax

; 200  : 		return (*_IPnext);

	mov	ecx, DWORD PTR [eax+36]
	mov	eax, DWORD PTR [ecx]

; 201  : 		}

	ret	0
?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pptr
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::gptr, COMDAT
; _this$ = eax

; 190  : 		return (*_IGnext);

	mov	ecx, DWORD PTR [eax+32]
	mov	eax, DWORD PTR [ecx]

; 191  : 		}

	ret	0
?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::gptr
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::eback, COMDAT
; _this$ = eax

; 185  : 		return (*_IGfirst);

	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx]

; 186  : 		}

	ret	0
?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::eback
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock, COMDAT
; _this$ = ecx

; 178  : 		_Mylock._Unlock();

	add	ecx, 4
	jmp	?_Unlock@_Mutex@std@@QAEXXZ		; std::_Mutex::_Unlock
?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
_TEXT	SEGMENT
?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::pubsync, COMDAT
; _this$ = ecx

; 100  : 		return (sync());

	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+48]
	jmp	edx
?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pubsync
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::imbue, COMDAT
; _this$ = ecx

; 414  : 		}

	ret	4
?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::imbue
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::sync, COMDAT
; _this$ = ecx

; 409  : 		return (0);

	xor	eax, eax

; 410  : 		}

	ret	0
?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::sync
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PADH@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PADH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::setbuf, COMDAT
; _this$ = ecx

; 403  : 		{	// offer buffer to external agent (do nothing)

	mov	eax, ecx

; 404  : 		return (this);
; 405  : 		}

	ret	8
?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PADH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::setbuf
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 24
___formal$ = 36						; size = 4
?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::seekpos, COMDAT
; _this$ = ecx

; 399  : 		return (streampos(_BADOFF));

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	ecx, DWORD PTR ?_BADOFF@std@@3JB	; std::_BADOFF
	mov	DWORD PTR [eax], ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx

; 400  : 		}

	ret	32					; 00000020H
?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::seekpos
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::seekoff, COMDAT
; _this$ = ecx

; 393  : 		return (streampos(_BADOFF));

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	ecx, DWORD PTR ?_BADOFF@std@@3JB	; std::_BADOFF
	mov	DWORD PTR [eax], ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx

; 394  : 		}

	ret	16					; 00000010H
?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::seekoff
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn, COMDAT
; _this$ = ecx

; 326  : 		// assume the destination buffer is large enough
; 327  : 		return _Xsgetn_s(_Ptr, (size_t)-1, _Count);

	mov	edx, DWORD PTR __Count$[esp-4]
	mov	eax, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+28]
	push	edx
	mov	edx, DWORD PTR __Ptr$[esp]
	push	-1
	push	edx
	call	eax

; 328  : 		}

	ret	8
?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc, COMDAT
; _this$ = ecx

; 308  : 		return (0);

	xor	eax, eax

; 309  : 		}

	ret	0
?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\istream
_TEXT	ENDS
;	COMDAT ??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_istream<char,std::char_traits<char> >::~basic_istream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 42   : 		{	// destroy the object

	mov	eax, DWORD PTR [ecx-8]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+ecx-8], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@

; 43   : 		}

	ret	0
??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_istream<char,std::char_traits<char> >::~basic_istream<char,std::char_traits<char> >
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\ios
_TEXT	ENDS
;	COMDAT ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
_TEXT	SEGMENT
?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ PROC ; std::basic_ios<char,std::char_traits<char> >::rdbuf, COMDAT
; _this$ = eax

; 85   : 		return (_Mystrbuf);

	mov	eax, DWORD PTR [eax+40]

; 86   : 		}

	ret	0
?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ENDP ; std::basic_ios<char,std::char_traits<char> >::rdbuf
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\ostream
_TEXT	ENDS
;	COMDAT ??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 63   : 		{	// destroy the object

	mov	eax, DWORD PTR [ecx-4]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+ecx-4], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@

; 64   : 		}

	ret	0
??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\fstream
_TEXT	ENDS
;	COMDAT ??$_Ungetc@D@std@@YA_NABDPAU_iobuf@@@Z
_TEXT	SEGMENT
??$_Ungetc@D@std@@YA_NABDPAU_iobuf@@@Z PROC		; std::_Ungetc<char>, COMDAT
; __Byte$ = ecx
; __File$ = eax

; 85   : 	return (ungetc((unsigned char)_Byte, _File) != EOF);

	movzx	edx, BYTE PTR [ecx]
	push	eax
	push	edx
	call	_ungetc
	xor	ecx, ecx
	add	esp, 8
	cmp	eax, -1
	setne	cl
	mov	al, cl

; 86   : 	}

	ret	0
??$_Ungetc@D@std@@YA_NABDPAU_iobuf@@@Z ENDP		; std::_Ungetc<char>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z
_TEXT	SEGMENT
??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z PROC		; std::_Fputc<char>, COMDAT
; __Byte$ = ecx
; __File$ = eax

; 67   : 	return (fputc(_Byte, _File) != EOF);

	movsx	ecx, cl
	push	eax
	push	ecx
	call	_fputc
	xor	edx, edx
	add	esp, 8
	cmp	eax, -1
	setne	dl
	mov	al, dl

; 68   : 	}

	ret	0
??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z ENDP		; std::_Fputc<char>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Fgetc@D@std@@YA_NAADPAU_iobuf@@@Z
_TEXT	SEGMENT
__Byte$ = 8						; size = 4
??$_Fgetc@D@std@@YA_NAADPAU_iobuf@@@Z PROC		; std::_Fgetc<char>, COMDAT
; __File$ = eax

; 35   : 	int _Meta;
; 36   : 	if ((_Meta = fgetc(_File)) == EOF)

	push	eax
	call	_fgetc
	add	esp, 4
	cmp	eax, -1
	jne	SHORT $LN2@Fgetc

; 37   : 		return (false);

	xor	al, al

; 42   : 		}
; 43   : 	}

	ret	0
$LN2@Fgetc:

; 38   : 	else
; 39   : 		{	// got one, convert to char
; 40   : 		_Byte = (char)_Meta;

	mov	ecx, DWORD PTR __Byte$[esp-4]
	mov	BYTE PTR [ecx], al

; 41   : 		return (true);

	mov	al, 1

; 42   : 		}
; 43   : 	}

	ret	0
??$_Fgetc@D@std@@YA_NAADPAU_iobuf@@@Z ENDP		; std::_Fgetc<char>
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\xiosbase
_TEXT	ENDS
;	COMDAT ??1ios_base@std@@UAE@XZ
_TEXT	SEGMENT
??1ios_base@std@@UAE@XZ PROC				; std::ios_base::~ios_base, COMDAT
; _this$ = ecx

; 494  :         _Ios_base_dtor(this);

	push	ecx
	mov	DWORD PTR [ecx], OFFSET ??_7ios_base@std@@6B@
	call	?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
	pop	ecx

; 495  :         }

	ret	0
??1ios_base@std@@UAE@XZ ENDP				; std::ios_base::~ios_base
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?width@ios_base@std@@QAEHH@Z
_TEXT	SEGMENT
?width@ios_base@std@@QAEHH@Z PROC			; std::ios_base::width, COMDAT
; _this$ = ecx

; 424  : 		streamsize _Oldwidth = _Wide;

	mov	eax, DWORD PTR [ecx+24]

; 425  : 		_Wide = _Newwidth;

	mov	DWORD PTR [ecx+24], 0

; 426  : 		return (_Oldwidth);
; 427  : 		}

	ret	0
?width@ios_base@std@@QAEHH@Z ENDP			; std::ios_base::width
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?width@ios_base@std@@QBEHXZ
_TEXT	SEGMENT
?width@ios_base@std@@QBEHXZ PROC			; std::ios_base::width, COMDAT
; _this$ = eax

; 419  : 		return (_Wide);

	mov	eax, DWORD PTR [eax+24]

; 420  : 		}

	ret	0
?width@ios_base@std@@QBEHXZ ENDP			; std::ios_base::width
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?precision@ios_base@std@@QBEHXZ
_TEXT	SEGMENT
?precision@ios_base@std@@QBEHXZ PROC			; std::ios_base::precision, COMDAT
; _this$ = eax

; 407  : 		return (_Prec);

	mov	eax, DWORD PTR [eax+20]

; 408  : 		}

	ret	0
?precision@ios_base@std@@QBEHXZ ENDP			; std::ios_base::precision
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?flags@ios_base@std@@QBEHXZ
_TEXT	SEGMENT
?flags@ios_base@std@@QBEHXZ PROC			; std::ios_base::flags, COMDAT
; _this$ = eax

; 374  : 		return (_Fmtfl);

	mov	eax, DWORD PTR [eax+16]

; 375  : 		}

	ret	0
?flags@ios_base@std@@QBEHXZ ENDP			; std::ios_base::flags
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?rdstate@ios_base@std@@QBEHXZ
_TEXT	SEGMENT
?rdstate@ios_base@std@@QBEHXZ PROC			; std::ios_base::rdstate, COMDAT
; _this$ = eax

; 311  : 		return (_Mystate);

	mov	eax, DWORD PTR [eax+8]

; 312  : 		}

	ret	0
?rdstate@ios_base@std@@QBEHXZ ENDP			; std::ios_base::rdstate
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\xlocale
_TEXT	ENDS
;	COMDAT ?_Do_narrow_s@?$ctype@D@std@@MBEPBDPBD0DPADI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 1
__Dest$ = 20						; size = 4
__Dest_size$ = 24					; size = 4
?_Do_narrow_s@?$ctype@D@std@@MBEPBDPBD0DPADI@Z PROC	; std::ctype<char>::_Do_narrow_s, COMDAT
; _this$ = ecx

; 1887 : 		{	// narrow elements in [_First, _Last) to chars

	push	ebx

; 1888 : 		_DEBUG_RANGE(_First, _Last);
; 1889 : 		_DEBUG_POINTER(_Dest);
; 1890 : 		_SCL_SECURE_ALWAYS_VALIDATE_RANGE(_Dest_size >= (size_t)(_Last - _First));

	mov	ebx, DWORD PTR __First$[esp]
	push	ebp
	mov	ebp, DWORD PTR __Dest_size$[esp+4]
	push	esi
	push	edi
	mov	edi, DWORD PTR __Last$[esp+12]
	mov	esi, edi
	sub	esi, ebx
	cmp	ebp, esi
	jae	SHORT $LN1@Do_narrow_
	call	__invalid_parameter_noinfo
$LN1@Do_narrow_:

; 1891 : 		_CRT_SECURE_MEMCPY(_Dest, _Dest_size, _First, _Last - _First);

	mov	eax, DWORD PTR __Dest$[esp+12]
	push	esi
	push	ebx
	push	ebp
	push	eax
	call	_memcpy_s
	add	esp, 16					; 00000010H

; 1892 : 		return (_Last);

	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 1893 : 		}

	ret	20					; 00000014H
?_Do_narrow_s@?$ctype@D@std@@MBEPBDPBD0DPADI@Z ENDP	; std::ctype<char>::_Do_narrow_s
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dflt$ = 16						; size = 1
__Dest$ = 20						; size = 4
?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z PROC		; std::ctype<char>::do_narrow, COMDAT
; _this$ = ecx

; 1880 : 		// assume there is enough space in _Dest
; 1881 : 		return _Do_narrow_s(_First, _Last, _Dflt, _Dest, _Last - _First);

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR __First$[esp-4]
	push	esi
	mov	esi, DWORD PTR [ecx]
	push	edi
	mov	edi, eax
	sub	edi, edx
	push	edi
	mov	edi, DWORD PTR __Dest$[esp+8]
	push	edi
	mov	edi, DWORD PTR __Dflt$[esp+12]
	push	edi
	push	eax
	mov	eax, DWORD PTR [esi+40]
	push	edx
	call	eax
	pop	edi
	pop	esi

; 1882 : 		}

	ret	16					; 00000010H
?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z ENDP		; std::ctype<char>::do_narrow
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_narrow@?$ctype@D@std@@MBEDDD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
___formal$ = 12						; size = 1
?do_narrow@?$ctype@D@std@@MBEDDD@Z PROC			; std::ctype<char>::do_narrow, COMDAT
; _this$ = ecx

; 1872 : 		return (_Ch);

	mov	al, BYTE PTR __Ch$[esp-4]

; 1873 : 		}

	ret	8
?do_narrow@?$ctype@D@std@@MBEDDD@Z ENDP			; std::ctype<char>::do_narrow
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Do_widen_s@?$ctype@D@std@@MBEPBDPBD0PADI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Dest_size$ = 20					; size = 4
?_Do_widen_s@?$ctype@D@std@@MBEPBDPBD0PADI@Z PROC	; std::ctype<char>::_Do_widen_s, COMDAT
; _this$ = ecx

; 1862 : 		{	// widen chars in [_First, _Last)

	push	ebx

; 1863 : 		_DEBUG_RANGE(_First, _Last);
; 1864 : 		_DEBUG_POINTER(_Dest);
; 1865 : 		_SCL_SECURE_ALWAYS_VALIDATE_RANGE(_Dest_size >= (size_t)(_Last - _First));

	mov	ebx, DWORD PTR __First$[esp]
	push	ebp
	mov	ebp, DWORD PTR __Dest_size$[esp+4]
	push	esi
	push	edi
	mov	edi, DWORD PTR __Last$[esp+12]
	mov	esi, edi
	sub	esi, ebx
	cmp	ebp, esi
	jae	SHORT $LN1@Do_widen_s
	call	__invalid_parameter_noinfo
$LN1@Do_widen_s:

; 1866 : 		_CRT_SECURE_MEMCPY(_Dest, _Dest_size, _First, _Last - _First);

	mov	eax, DWORD PTR __Dest$[esp+12]
	push	esi
	push	ebx
	push	ebp
	push	eax
	call	_memcpy_s
	add	esp, 16					; 00000010H

; 1867 : 		return (_Last);

	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 1868 : 		}

	ret	16					; 00000010H
?_Do_widen_s@?$ctype@D@std@@MBEPBDPBD0PADI@Z ENDP	; std::ctype<char>::_Do_widen_s
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z PROC		; std::ctype<char>::do_widen, COMDAT
; _this$ = ecx

; 1856 : 		// assume there is enough space in _Dest
; 1857 : 		return _Do_widen_s(_First, _Last, _Dest, _Last - _First);

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR __First$[esp-4]
	push	esi
	mov	esi, DWORD PTR [ecx]
	push	edi
	mov	edi, eax
	sub	edi, edx
	push	edi
	mov	edi, DWORD PTR __Dest$[esp+8]
	push	edi
	push	eax
	mov	eax, DWORD PTR [esi+28]
	push	edx
	call	eax
	pop	edi
	pop	esi

; 1858 : 		}

	ret	12					; 0000000cH
?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z ENDP		; std::ctype<char>::do_widen
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_widen@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT
__Byte$ = 8						; size = 1
?do_widen@?$ctype@D@std@@MBEDD@Z PROC			; std::ctype<char>::do_widen, COMDAT
; _this$ = ecx

; 1849 : 		return (_Byte);

	mov	al, BYTE PTR __Byte$[esp-4]

; 1850 : 		}

	ret	4
?do_widen@?$ctype@D@std@@MBEDD@Z ENDP			; std::ctype<char>::do_widen
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z PROC		; std::ctype<char>::do_toupper, COMDAT
; _this$ = ecx

; 1840 : 		{	// convert [_First, _Last) in place to upper case

	push	ebx

; 1841 : 		_DEBUG_RANGE((const _Elem *)_First, _Last);
; 1842 : 		for (; _First != _Last; ++_First)

	mov	ebx, DWORD PTR __Last$[esp]
	push	esi
	mov	esi, DWORD PTR __First$[esp+4]
	cmp	esi, ebx
	je	SHORT $LN8@do_toupper
	push	edi
	lea	edi, DWORD PTR [ecx+8]
$LL3@do_toupper:

; 1843 : 			*_First = (_Elem)_Toupper((unsigned char)*_First, &_Ctype);

	movzx	eax, BYTE PTR [esi]
	push	edi
	push	eax
	call	__Toupper
	mov	BYTE PTR [esi], al
	inc	esi
	add	esp, 8
	cmp	esi, ebx
	jne	SHORT $LL3@do_toupper
	pop	edi
$LN8@do_toupper:

; 1844 : 		return ((const _Elem *)_First);

	mov	eax, esi
	pop	esi
	pop	ebx

; 1845 : 		}

	ret	8
?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z ENDP		; std::ctype<char>::do_toupper
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_toupper@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
?do_toupper@?$ctype@D@std@@MBEDD@Z PROC			; std::ctype<char>::do_toupper, COMDAT
; _this$ = ecx

; 1835 : 		return ((_Elem)_Toupper((unsigned char)_Ch, &_Ctype));

	movzx	eax, BYTE PTR __Ch$[esp-4]
	add	ecx, 8
	push	ecx
	push	eax
	call	__Toupper
	add	esp, 8

; 1836 : 		}

	ret	4
?do_toupper@?$ctype@D@std@@MBEDD@Z ENDP			; std::ctype<char>::do_toupper
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z PROC		; std::ctype<char>::do_tolower, COMDAT
; _this$ = ecx

; 1826 : 		{	// convert [_First, _Last) in place to lower case

	push	ebx

; 1827 : 		_DEBUG_RANGE((const _Elem *)_First, _Last);
; 1828 : 		for (; _First != _Last; ++_First)

	mov	ebx, DWORD PTR __Last$[esp]
	push	esi
	mov	esi, DWORD PTR __First$[esp+4]
	cmp	esi, ebx
	je	SHORT $LN8@do_tolower
	push	edi
	lea	edi, DWORD PTR [ecx+8]
$LL3@do_tolower:

; 1829 : 			*_First = (_Elem)_Tolower((unsigned char)*_First, &_Ctype);

	movzx	eax, BYTE PTR [esi]
	push	edi
	push	eax
	call	__Tolower
	mov	BYTE PTR [esi], al
	inc	esi
	add	esp, 8
	cmp	esi, ebx
	jne	SHORT $LL3@do_tolower
	pop	edi
$LN8@do_tolower:

; 1830 : 		return ((const _Elem *)_First);

	mov	eax, esi
	pop	esi
	pop	ebx

; 1831 : 		}

	ret	8
?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z ENDP		; std::ctype<char>::do_tolower
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_tolower@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
?do_tolower@?$ctype@D@std@@MBEDD@Z PROC			; std::ctype<char>::do_tolower, COMDAT
; _this$ = ecx

; 1821 : 		return ((_Elem)_Tolower((unsigned char)_Ch, &_Ctype));

	movzx	eax, BYTE PTR __Ch$[esp-4]
	add	ecx, 8
	push	ecx
	push	eax
	call	__Tolower
	add	esp, 8

; 1822 : 		}

	ret	4
?do_tolower@?$ctype@D@std@@MBEDD@Z ENDP			; std::ctype<char>::do_tolower
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Tidy@?$ctype@D@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$ctype@D@std@@IAEXXZ PROC			; std::ctype<char>::_Tidy, COMDAT
; _this$ = ecx

; 1813 : 		if (0 < _Ctype._Delfl)

	mov	eax, DWORD PTR [ecx+20]
	test	eax, eax
	jle	SHORT $LN8@Tidy

; 1814 : 			free((void *)_Ctype._Table);

	mov	eax, DWORD PTR [ecx+16]
	push	eax
	call	_free
	add	esp, 4

; 1817 : 		}

	ret	0
$LN8@Tidy:

; 1815 : 		else if (_Ctype._Delfl < 0)

	jge	SHORT $LN6@Tidy

; 1816 : 			delete[] (void *)_Ctype._Table;

	mov	ecx, DWORD PTR [ecx+16]
	push	ecx
	call	DWORD PTR ?RenVecDelete@@3P6AXPAX@ZA	; RenVecDelete
	pop	ecx
$LN6@Tidy:

; 1817 : 		}

	ret	0
?_Tidy@?$ctype@D@std@@IAEXXZ ENDP			; std::ctype<char>::_Tidy
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_encoding@codecvt_base@std@@MBEHXZ
_TEXT	SEGMENT
?do_encoding@codecvt_base@std@@MBEHXZ PROC		; std::codecvt_base::do_encoding, COMDAT
; _this$ = ecx

; 720  : 		return (1);	// -1 ==> state dependent, 0 ==> varying length

	mov	eax, 1

; 721  : 		}

	ret	0
?do_encoding@codecvt_base@std@@MBEHXZ ENDP		; std::codecvt_base::do_encoding
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_max_length@codecvt_base@std@@MBEHXZ
_TEXT	SEGMENT
?do_max_length@codecvt_base@std@@MBEHXZ PROC		; std::codecvt_base::do_max_length, COMDAT
; _this$ = ecx

; 715  : 		return (1);

	mov	eax, 1

; 716  : 		}

	ret	0
?do_max_length@codecvt_base@std@@MBEHXZ ENDP		; std::codecvt_base::do_max_length
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_always_noconv@codecvt_base@std@@MBE_NXZ
_TEXT	SEGMENT
?do_always_noconv@codecvt_base@std@@MBE_NXZ PROC	; std::codecvt_base::do_always_noconv, COMDAT
; _this$ = ecx

; 710  : 		return (true);

	mov	al, 1

; 711  : 		}

	ret	0
?do_always_noconv@codecvt_base@std@@MBE_NXZ ENDP	; std::codecvt_base::do_always_noconv
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?always_noconv@codecvt_base@std@@QBE_NXZ
_TEXT	SEGMENT
?always_noconv@codecvt_base@std@@QBE_NXZ PROC		; std::codecvt_base::always_noconv, COMDAT
; _this$ = ecx

; 690  : 		return (do_always_noconv());

	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+4]
	jmp	edx
?always_noconv@codecvt_base@std@@QBE_NXZ ENDP		; std::codecvt_base::always_noconv
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z
_TEXT	SEGMENT
?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z PROC		; std::locale::_Getfacet, COMDAT
; _this$ = eax
; __Id$ = esi

; 413  : 		const facet *_Facptr = _Id < _Ptr->_Facetcount
; 414  : 			? _Ptr->_Facetvec[_Id] : 0;	// null if id off end

	mov	ecx, DWORD PTR [eax]
	cmp	esi, DWORD PTR [ecx+12]
	jae	SHORT $LN6@Getfacet
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+esi*4]

; 415  : 		if (_Facptr != 0 || !_Ptr->_Xparent)

	test	eax, eax
	jne	SHORT $LN1@Getfacet
$LN10@Getfacet:
	cmp	BYTE PTR [ecx+20], 0
	je	SHORT $LN1@Getfacet

; 416  : 			return (_Facptr);	// found facet or not transparent, return pointer
; 417  : 		else
; 418  : 			{	// look in current locale
; 419  : 			locale::_Locimp *_Ptr = _Getgloballocale();

	call	?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale

; 420  : 			return (_Id < _Ptr->_Facetcount
; 421  : 				? _Ptr->_Facetvec[_Id]	// get from current locale
; 422  : 				: 0);	// no entry in current locale

	cmp	esi, DWORD PTR [eax+12]
	jae	SHORT $LN8@Getfacet
	mov	eax, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [eax+esi*4]

; 423  : 			}
; 424  : 		}

	ret	0
$LN6@Getfacet:

; 413  : 		const facet *_Facptr = _Id < _Ptr->_Facetcount
; 414  : 			? _Ptr->_Facetvec[_Id] : 0;	// null if id off end

	xor	eax, eax

; 415  : 		if (_Facptr != 0 || !_Ptr->_Xparent)

	jmp	SHORT $LN10@Getfacet
$LN8@Getfacet:

; 420  : 			return (_Id < _Ptr->_Facetcount
; 421  : 				? _Ptr->_Facetvec[_Id]	// get from current locale
; 422  : 				: 0);	// no entry in current locale

	xor	eax, eax
$LN1@Getfacet:

; 423  : 			}
; 424  : 		}

	ret	0
?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z ENDP		; std::locale::_Getfacet
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0facet@locale@std@@IAE@I@Z
_TEXT	SEGMENT
__Initrefs$ = 8						; size = 4
??0facet@locale@std@@IAE@I@Z PROC			; std::locale::facet::facet, COMDAT
; _this$ = ecx

; 176  : 			{	// construct with initial reference count

	mov	eax, ecx
	mov	ecx, DWORD PTR __Initrefs$[esp-4]
	mov	DWORD PTR [eax], OFFSET ??_7facet@locale@std@@6B@
	mov	DWORD PTR [eax+4], ecx

; 177  : 			}

	ret	4
??0facet@locale@std@@IAE@I@Z ENDP			; std::locale::facet::facet
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1facet@locale@std@@UAE@XZ
_TEXT	SEGMENT
??1facet@locale@std@@UAE@XZ PROC			; std::locale::facet::~facet, COMDAT
; _this$ = ecx

; 170  : 			{	// destroy the object

	mov	DWORD PTR [ecx], OFFSET ??_7facet@locale@std@@6B@

; 171  : 			}

	ret	0
??1facet@locale@std@@UAE@XZ ENDP			; std::locale::facet::~facet
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Register@facet@locale@std@@QAEXXZ
_TEXT	SEGMENT
?_Register@facet@locale@std@@QAEXXZ PROC		; std::locale::facet::_Register, COMDAT
; _this$ = eax

; 135  : #if defined(_M_CEE)
; 136  : 			facet_Register_m(this);
; 137  : #else
; 138  : 			facet_Register(this);

	push	eax
	call	?facet_Register@facet@locale@std@@CAXPAV123@@Z ; std::locale::facet::facet_Register
	pop	ecx

; 139  : #endif
; 140  : 			}

	ret	0
?_Register@facet@locale@std@@QAEXXZ ENDP		; std::locale::facet::_Register
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Decref@facet@locale@std@@QAEPAV123@XZ
_TEXT	SEGMENT
__Lock$14251 = -4					; size = 4
?_Decref@facet@locale@std@@QAEPAV123@XZ PROC		; std::locale::facet::_Decref, COMDAT
; _this$ = ecx

; 125  : 			{	// safely decrement the reference count, return this when dead

	push	ecx
	push	esi
	push	edi
	mov	edi, ecx

; 126  : 			_BEGIN_LOCK(_LOCK_LOCALE)

	push	0
	lea	ecx, DWORD PTR __Lock$14251[esp+16]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 127  : 				if (0 < _Refs && _Refs < (size_t)(-1))

	mov	eax, DWORD PTR [edi+4]
	test	eax, eax
	jbe	SHORT $LN1@Decref
	cmp	eax, -1
	jae	SHORT $LN1@Decref

; 128  : 					--_Refs;

	dec	eax
	mov	DWORD PTR [edi+4], eax
$LN1@Decref:

; 129  : 				return (_Refs == 0 ? this : 0);

	mov	esi, DWORD PTR [edi+4]
	neg	esi
	sbb	esi, esi
	not	esi
	lea	ecx, DWORD PTR __Lock$14251[esp+12]
	and	esi, edi
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	pop	edi
	mov	eax, esi
	pop	esi

; 130  : 			_END_LOCK()
; 131  : 			}

	pop	ecx
	ret	0
?_Decref@facet@locale@std@@QAEPAV123@XZ ENDP		; std::locale::facet::_Decref
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Incref@facet@locale@std@@QAEXXZ
_TEXT	SEGMENT
__Lock$14246 = -4					; size = 4
?_Incref@facet@locale@std@@QAEXXZ PROC			; std::locale::facet::_Incref, COMDAT
; _this$ = ecx

; 117  : 			{	// safely increment the reference count

	push	ecx
	push	esi
	mov	esi, ecx

; 118  : 			_BEGIN_LOCK(_LOCK_LOCALE)

	push	0
	lea	ecx, DWORD PTR __Lock$14246[esp+12]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 119  : 				if (_Refs < (size_t)(-1))

	mov	eax, DWORD PTR [esi+4]
	cmp	eax, -1
	jae	SHORT $LN1@Incref

; 120  : 					++_Refs;

	inc	eax
	mov	DWORD PTR [esi+4], eax
$LN1@Incref:

; 121  : 			_END_LOCK()

	lea	ecx, DWORD PTR __Lock$14246[esp+8]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	pop	esi

; 122  : 			}

	pop	ecx
	ret	0
?_Incref@facet@locale@std@@QAEXXZ ENDP			; std::locale::facet::_Incref
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??Bid@locale@std@@QAEIXZ
_TEXT	SEGMENT
__Lock$14240 = -4					; size = 4
??Bid@locale@std@@QAEIXZ PROC				; std::locale::id::operator unsigned int, COMDAT
; _this$ = esi

; 77   : 			{	// get stamp, with lazy allocation

	push	ecx

; 78   : 			if (_Id == 0)

	cmp	DWORD PTR [esi], 0
	jne	SHORT $LN6@operator

; 79   : 				{	// still zero, allocate stamp
; 80   : 				_BEGIN_LOCK(_LOCK_LOCALE)

	push	0
	lea	ecx, DWORD PTR __Lock$14240[esp+8]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 81   : 					if (_Id == 0)

	cmp	DWORD PTR [esi], 0
	jne	SHORT $LN1@operator

; 82   : 						_Id = ++_Id_cnt;

	mov	eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
	inc	eax
	mov	DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
	mov	DWORD PTR [esi], eax
$LN1@operator:

; 83   : 				_END_LOCK()

	lea	ecx, DWORD PTR __Lock$14240[esp+4]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
$LN6@operator:

; 84   : 				}
; 85   : 			return (_Id);

	mov	eax, DWORD PTR [esi]

; 86   : 			}

	pop	ecx
	ret	0
??Bid@locale@std@@QAEIXZ ENDP				; std::locale::id::operator unsigned int
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 73   : 			{	// construct with specified stamp value

	mov	eax, ecx
	mov	ecx, DWORD PTR __Val$[esp-4]
	mov	DWORD PTR [eax], ecx

; 74   : 			}

	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\xlocinfo
_TEXT	ENDS
;	COMDAT ?_Gettrue@_Locinfo@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Gettrue@_Locinfo@std@@QBEPBDXZ PROC			; std::_Locinfo::_Gettrue, COMDAT

; 177  : 		return ("true");

	mov	eax, OFFSET ??_C@_04LOAJBDKD@true?$AA@

; 178  : 		}

	ret	0
?_Gettrue@_Locinfo@std@@QBEPBDXZ ENDP			; std::_Locinfo::_Gettrue
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Getfalse@_Locinfo@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Getfalse@_Locinfo@std@@QBEPBDXZ PROC			; std::_Locinfo::_Getfalse, COMDAT

; 172  : 		return ("false");

	mov	eax, OFFSET ??_C@_05LAPONLG@false?$AA@

; 173  : 		}

	ret	0
?_Getfalse@_Locinfo@std@@QBEPBDXZ ENDP			; std::_Locinfo::_Getfalse
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Getlconv@_Locinfo@std@@QBEPBUlconv@@XZ
_TEXT	SEGMENT
?_Getlconv@_Locinfo@std@@QBEPBUlconv@@XZ PROC		; std::_Locinfo::_Getlconv, COMDAT

; 134  : 		return (localeconv());

	jmp	_localeconv
?_Getlconv@_Locinfo@std@@QBEPBUlconv@@XZ ENDP		; std::_Locinfo::_Getlconv
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ
_TEXT	SEGMENT
?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ PROC		; std::_Locinfo::_Getcvt, COMDAT
; ___$ReturnUdt$ = esi

; 129  : 		return (::_Getcvt());

	call	__Getcvt
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], edx
	mov	eax, esi

; 130  : 		}

	ret	0
?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ ENDP		; std::_Locinfo::_Getcvt
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ?_Has_container@_Iterator_base_secure@std@@QBE_NXZ
_TEXT	SEGMENT
?_Has_container@_Iterator_base_secure@std@@QBE_NXZ PROC	; std::_Iterator_base_secure::_Has_container, COMDAT
; _this$ = ecx

; 582  : 		return _Mycont != 0;

	xor	eax, eax
	cmp	DWORD PTR [ecx], eax
	setne	al

; 583  : 		}

	ret	0
?_Has_container@_Iterator_base_secure@std@@QBE_NXZ ENDP	; std::_Iterator_base_secure::_Has_container
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0_Iterator_base_secure@std@@QAE@XZ
_TEXT	SEGMENT
??0_Iterator_base_secure@std@@QAE@XZ PROC		; std::_Iterator_base_secure::_Iterator_base_secure, COMDAT
; _this$ = eax

; 567  : 		{

	mov	DWORD PTR [eax], 0

; 568  : 		}

	ret	0
??0_Iterator_base_secure@std@@QAE@XZ ENDP		; std::_Iterator_base_secure::_Iterator_base_secure
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\iosfwd
_TEXT	ENDS
;	COMDAT ?eof@?$char_traits@D@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$char_traits@D@std@@SAHXZ PROC			; std::char_traits<char>::eof, COMDAT

; 517  : 		return (EOF);

	or	eax, -1

; 518  : 		}

	ret	0
?eof@?$char_traits@D@std@@SAHXZ ENDP			; std::char_traits<char>::eof
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
_TEXT	SEGMENT
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z PROC	; std::char_traits<char>::eq_int_type, COMDAT
; __Left$ = eax
; __Right$ = edx

; 512  : 		return (_Left == _Right);

	mov	ecx, DWORD PTR [eax]
	xor	eax, eax
	cmp	ecx, DWORD PTR [edx]
	sete	al

; 513  : 		}

	ret	0
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ENDP	; std::char_traits<char>::eq_int_type
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?to_int_type@?$char_traits@D@std@@SAHABD@Z
_TEXT	SEGMENT
?to_int_type@?$char_traits@D@std@@SAHABD@Z PROC		; std::char_traits<char>::to_int_type, COMDAT
; __Ch$ = eax

; 506  : 		return ((unsigned char)_Ch);

	movzx	eax, BYTE PTR [eax]

; 507  : 		}

	ret	0
?to_int_type@?$char_traits@D@std@@SAHABD@Z ENDP		; std::char_traits<char>::to_int_type
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?to_char_type@?$char_traits@D@std@@SADABH@Z
_TEXT	SEGMENT
?to_char_type@?$char_traits@D@std@@SADABH@Z PROC	; std::char_traits<char>::to_char_type, COMDAT
; __Meta$ = eax

; 501  : 		return ((_Elem)_Meta);

	mov	al, BYTE PTR [eax]

; 502  : 		}

	ret	0
?to_char_type@?$char_traits@D@std@@SADABH@Z ENDP	; std::char_traits<char>::to_char_type
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?assign@?$char_traits@D@std@@SAPADPADID@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?assign@?$char_traits@D@std@@SAPADPADID@Z PROC		; std::char_traits<char>::assign, COMDAT
; __Count$ = eax
; __Ch$ = ecx

; 495  : //		_DEBUG_POINTER(_First);
; 496  : 		return ((_Elem *)::memset(_First, _Ch, _Count));

	mov	edx, DWORD PTR __First$[esp-4]
	movsx	ecx, cl
	push	eax
	push	ecx
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 497  : 		}

	ret	0
?assign@?$char_traits@D@std@@SAPADPADID@Z ENDP		; std::char_traits<char>::assign
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?eq@?$char_traits@D@std@@SA_NABD0@Z
_TEXT	SEGMENT
?eq@?$char_traits@D@std@@SA_NABD0@Z PROC		; std::char_traits<char>::eq, COMDAT
; __Left$ = eax
; __Right$ = edx

; 430  : 		return (_Left == _Right);

	mov	cl, BYTE PTR [eax]
	xor	eax, eax
	cmp	cl, BYTE PTR [edx]
	sete	al

; 431  : 		}

	ret	0
?eq@?$char_traits@D@std@@SA_NABD0@Z ENDP		; std::char_traits<char>::eq
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\xlocale
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z PROC	; std::_Maklocstr<char>, COMDAT
; __Ptr$ = eax

; 624  : 	{	// convert C string to _Elem sequence using _Cvtvec

	push	esi
	push	edi
	mov	edi, eax

; 625  : 	size_t _Count = ::strlen(_Ptr) + 1;

	lea	edx, DWORD PTR [eax+1]
$LL11@Maklocstr:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL11@Maklocstr
	sub	eax, edx

; 626  : 	_Elem *_Ptrdest = _NEW_CRT _Elem[_Count];

	cmp	DWORD PTR ?RenVecNew@@3P6APAXK@ZA, 0	; RenVecNew
	lea	esi, DWORD PTR [eax+1]
	jne	SHORT $LN6@Maklocstr
	call	?InitEngine@@YAXXZ			; InitEngine
$LN6@Maklocstr:
	push	esi
	call	DWORD PTR ?RenVecNew@@3P6APAXK@ZA	; RenVecNew
	add	esp, 4

; 627  : 
; 628  : #pragma warning(push)
; 629  : #pragma warning(disable: 6011)
; 630  : 	/* prefast noise */
; 631  : 	for (_Elem *_Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr)

	mov	ecx, eax
	test	esi, esi
	jbe	SHORT $LN1@Maklocstr
$LL3@Maklocstr:

; 632  : 		*_Ptrnext = (_Elem)(unsigned char)*_Ptr;

	mov	dl, BYTE PTR [edi]
	mov	BYTE PTR [ecx], dl
	dec	esi
	inc	ecx
	inc	edi
	test	esi, esi
	ja	SHORT $LL3@Maklocstr
$LN1@Maklocstr:
	pop	edi
	pop	esi

; 633  : 	return (_Ptrdest);
; 634  : #pragma warning(pop)
; 635  : 	}

	ret	0
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ENDP	; std::_Maklocstr<char>
_TEXT	ENDS
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__catchsym$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z$0
__tryblocktable$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z$2
__ehfuncinfo$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
_TEXT	SEGMENT
__Ptr$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
_this$ = 8						; size = 4
?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z PROC	; std::numpunct<char>::_Init, COMDAT

; 135  : 		{	// initialize from _Lobj

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	mov	ebx, DWORD PTR _this$[ebp]
	push	esi
	push	edi
	mov	DWORD PTR __$EHRec$[ebp], esp

; 136  : 		const lconv *_Ptr = _Lobj._Getlconv();

	call	_localeconv
	mov	esi, eax

; 137  : 
; 138  : 		_Grouping = 0;

	xor	eax, eax
	mov	DWORD PTR __Ptr$[ebp], esi
	mov	DWORD PTR [ebx+8], eax

; 139  : 		_Falsename = 0;

	mov	DWORD PTR [ebx+16], eax

; 140  : 		_Truename = 0;

	mov	DWORD PTR [ebx+20], eax

; 141  : 
; 142  : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], eax

; 143  : 		_Grouping = _MAKLOCSTR(char, _Ptr->grouping, _Lobj._Getcvt());

	call	__Getcvt
	mov	edi, DWORD PTR [esi+8]
	mov	eax, edi
	lea	edx, DWORD PTR [eax+1]
	npad	7
$LL77@Init:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL77@Init
	sub	eax, edx
	cmp	DWORD PTR ?RenVecNew@@3P6APAXK@ZA, 0	; RenVecNew
	lea	esi, DWORD PTR [eax+1]
	jne	SHORT $LN18@Init
	call	?InitEngine@@YAXXZ			; InitEngine
$LN18@Init:
	push	esi
	call	DWORD PTR ?RenVecNew@@3P6APAXK@ZA	; RenVecNew
	add	esp, 4
	mov	ecx, eax
$LL15@Init:
	test	esi, esi
	jbe	SHORT $LN13@Init
	mov	dl, BYTE PTR [edi]
	mov	BYTE PTR [ecx], dl
	dec	esi
	inc	ecx
	inc	edi
	jmp	SHORT $LL15@Init
$LN13@Init:
	mov	DWORD PTR [ebx+8], eax

; 144  : 		_Falsename = _MAKLOCSTR(_Elem, _Lobj._Getfalse(), _Lobj._Getcvt());

	call	__Getcvt
	mov	edi, OFFSET ??_C@_05LAPONLG@false?$AA@
	mov	eax, edi
	lea	edx, DWORD PTR [eax+1]
$LL78@Init:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL78@Init
	sub	eax, edx
	cmp	DWORD PTR ?RenVecNew@@3P6APAXK@ZA, 0	; RenVecNew
	lea	esi, DWORD PTR [eax+1]
	jne	SHORT $LN30@Init
	call	?InitEngine@@YAXXZ			; InitEngine
$LN30@Init:
	push	esi
	call	DWORD PTR ?RenVecNew@@3P6APAXK@ZA	; RenVecNew
	add	esp, 4
	mov	ecx, eax
	npad	5
$LL27@Init:
	test	esi, esi
	jbe	SHORT $LN25@Init
	mov	dl, BYTE PTR [edi]
	mov	BYTE PTR [ecx], dl
	dec	esi
	inc	ecx
	inc	edi
	jmp	SHORT $LL27@Init
$LN25@Init:
	mov	DWORD PTR [ebx+16], eax

; 145  : 		_Truename = _MAKLOCSTR(_Elem, _Lobj._Gettrue(), _Lobj._Getcvt());

	call	__Getcvt
	mov	edi, OFFSET ??_C@_04LOAJBDKD@true?$AA@
	mov	eax, edi
	lea	edx, DWORD PTR [eax+1]
	npad	1
$LL79@Init:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL79@Init
	sub	eax, edx
	cmp	DWORD PTR ?RenVecNew@@3P6APAXK@ZA, 0	; RenVecNew
	lea	esi, DWORD PTR [eax+1]
	jne	SHORT $LN42@Init
	call	?InitEngine@@YAXXZ			; InitEngine
$LN42@Init:
	push	esi
	call	DWORD PTR ?RenVecNew@@3P6APAXK@ZA	; RenVecNew
	add	esp, 4
	mov	ecx, eax
$LL39@Init:
	test	esi, esi
	jbe	SHORT $LN37@Init
	mov	dl, BYTE PTR [edi]
	mov	BYTE PTR [ecx], dl
	dec	esi
	inc	ecx
	inc	edi
	jmp	SHORT $LL39@Init
$LN37@Init:
	mov	DWORD PTR [ebx+20], eax
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 149  : 		_CATCH_END
; 150  : 
; 151  : 		_Dp = _MAKLOCCHR(_Elem, _Ptr->decimal_point[0], _Lobj._Getcvt());

	call	__Getcvt
	mov	esi, DWORD PTR __Ptr$[ebp]
	mov	eax, DWORD PTR [esi]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR [ebx+12], cl

; 152  : 		_Kseparator =
; 153  : 			_MAKLOCCHR(_Elem, _Ptr->thousands_sep[0], _Lobj._Getcvt());

	call	__Getcvt
	mov	edx, DWORD PTR [esi+4]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ebx+13], al

; 154  : 
; 155  : 		if (_Isdef)

	mov	al, 1
	test	al, al
	je	SHORT $LN1@Init

; 156  : 			{	// apply defaults for required facets
; 157  : 			_Grouping = _MAKLOCSTR(char, "", _Lobj._Getcvt());

	call	__Getcvt
	mov	edi, OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	eax, edi
	lea	edx, DWORD PTR [eax+1]
	npad	2
$LL80@Init:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL80@Init
	sub	eax, edx
	cmp	DWORD PTR ?RenVecNew@@3P6APAXK@ZA, 0	; RenVecNew
	lea	esi, DWORD PTR [eax+1]
	jne	SHORT $LN60@Init
	call	?InitEngine@@YAXXZ			; InitEngine
$LN60@Init:
	push	esi
	call	DWORD PTR ?RenVecNew@@3P6APAXK@ZA	; RenVecNew
	add	esp, 4
	mov	ecx, eax
	test	esi, esi
	jbe	SHORT $LN55@Init
	npad	6
$LL57@Init:
	mov	dl, BYTE PTR [edi]
	mov	BYTE PTR [ecx], dl
	dec	esi
	inc	ecx
	inc	edi
	test	esi, esi
	ja	SHORT $LL57@Init
$LN55@Init:
	mov	DWORD PTR [ebx+8], eax

; 158  : 			_Dp = _MAKLOCCHR(_Elem, '.', _Lobj._Getcvt());

	call	__Getcvt
	mov	BYTE PTR [ebx+12], 46			; 0000002eH

; 159  : 			_Kseparator = _MAKLOCCHR(_Elem, ',', _Lobj._Getcvt());

	call	__Getcvt
	mov	BYTE PTR [ebx+13], 44			; 0000002cH
$LN1@Init:

; 160  : 			}
; 161  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	pop	edi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
__catch$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z$0:

; 146  : 		_CATCH_ALL
; 147  : 		_Tidy();

	mov	esi, DWORD PTR _this$[ebp]
	call	?_Tidy@?$numpunct@D@std@@AAEXXZ		; std::numpunct<char>::_Tidy

; 148  : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8
$LN83@Init:
$LN82@Init:
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z:
	mov	eax, OFFSET __ehfuncinfo$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z ENDP	; std::numpunct<char>::_Init
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 9.0\vc\include\xlocale
xdata$x	SEGMENT
__unwindtable$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z$0
__ehfuncinfo$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z PROC	; std::numpunct<char>::numpunct<char>, COMDAT

; 106  : 		{	// construct from specified locale

	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z
	push	eax
	mov	DWORD PTR fs:0, esp
	push	esi
	mov	esi, DWORD PTR _this$[esp+12]
	xor	eax, eax
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR __$EHRec$[esp+24], eax

; 107  : 		_Init(_Lobj, _Isdef);

	push	esi
	mov	DWORD PTR [esi], OFFSET ??_7?$numpunct@D@std@@6B@
	call	?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z ; std::numpunct<char>::_Init

; 108  : 		}

	mov	ecx, DWORD PTR __$EHRec$[esp+16]
	mov	eax, esi
	mov	DWORD PTR fs:0, ecx
	pop	esi
	add	esp, 12					; 0000000cH
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z$0:
	mov	ecx, DWORD PTR _this$[ebp-4]
	jmp	??1facet@locale@std@@UAE@XZ		; std::locale::facet::~facet
__ehhandler$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z:
	mov	eax, OFFSET __ehfuncinfo$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z ENDP	; std::numpunct<char>::numpunct<char>
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z
_TEXT	SEGMENT
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[], COMDAT
; _this$ = eax

; 1558 : 
; 1559 :  #if _HAS_ITERATOR_DEBUGGING
; 1560 : 		// skip debug checks if the container is initizialed with _IGNORE_MYITERLIST
; 1561 : 		if (this->_Myfirstiter != _IGNORE_MYITERLIST)
; 1562 : 			{
; 1563 : 			if (_Mysize < _Off)
; 1564 : 				{
; 1565 : 				_DEBUG_ERROR("string subscript out of range");
; 1566 : 				_SCL_SECURE_OUT_OF_RANGE;
; 1567 : 				}
; 1568 : 			}
; 1569 :  #else
; 1570 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= _Mysize);
; 1571 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1572 : 
; 1573 : 		return (_Myptr()[_Off]);

	cmp	DWORD PTR [eax+24], 16			; 00000010H
	jb	SHORT $LN6@operator@4
	mov	eax, DWORD PTR [eax+4]

; 1574 : 		}

	ret	0

; 1558 : 
; 1559 :  #if _HAS_ITERATOR_DEBUGGING
; 1560 : 		// skip debug checks if the container is initizialed with _IGNORE_MYITERLIST
; 1561 : 		if (this->_Myfirstiter != _IGNORE_MYITERLIST)
; 1562 : 			{
; 1563 : 			if (_Mysize < _Off)
; 1564 : 				{
; 1565 : 				_DEBUG_ERROR("string subscript out of range");
; 1566 : 				_SCL_SECURE_OUT_OF_RANGE;
; 1567 : 				}
; 1568 : 			}
; 1569 :  #else
; 1570 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= _Mysize);
; 1571 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1572 : 
; 1573 : 		return (_Myptr()[_Off]);

$LN6@operator@4:
	add	eax, 4

; 1574 : 		}

	ret	0
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\xlocnum
_TEXT	ENDS
;	COMDAT ??1?$numpunct@D@std@@MAE@XZ
_TEXT	SEGMENT
??1?$numpunct@D@std@@MAE@XZ PROC			; std::numpunct<char>::~numpunct<char>, COMDAT
; _this$ = ecx

; 121  : 		{	// destroy the object

	push	esi
	mov	esi, ecx

; 122  : 		_Tidy();

	mov	eax, DWORD PTR [esi+8]
	push	eax
	mov	DWORD PTR [esi], OFFSET ??_7?$numpunct@D@std@@6B@
	call	DWORD PTR ?RenVecDelete@@3P6AXPAX@ZA	; RenVecDelete
	mov	ecx, DWORD PTR [esi+16]
	push	ecx
	call	DWORD PTR ?RenVecDelete@@3P6AXPAX@ZA	; RenVecDelete
	mov	edx, DWORD PTR [esi+20]
	push	edx
	call	DWORD PTR ?RenVecDelete@@3P6AXPAX@ZA	; RenVecDelete
	add	esp, 12					; 0000000cH

; 123  : 		}

	mov	DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
	pop	esi
	ret	0
??1?$numpunct@D@std@@MAE@XZ ENDP			; std::numpunct<char>::~numpunct<char>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ
_TEXT	SEGMENT
??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >, COMDAT
; _this$ = ecx

; 1042 : 		}

	mov	DWORD PTR [ecx], OFFSET ??_7facet@locale@std@@6B@
	ret	0
??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\sstream
_TEXT	ENDS
;	COMDAT ?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = esi

; 301  : 		if (_Mystate & _Allocated)

	test	BYTE PTR [esi+64], 1
	je	SHORT $LN18@Tidy@3

; 302  : 			_Al.deallocate(_Mysb::eback(),
; 303  : 				(_Mysb::pptr() != 0 ? _Mysb::epptr()
; 304  : 					: _Mysb::egptr()) - _Mysb::eback());

	mov	eax, DWORD PTR [esi+16]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR ?RenDelete@@3P6AXPAX@ZA	; RenDelete
	add	esp, 4
$LN18@Tidy@3:

; 305  : 		_Mysb::setg(0, 0, 0);

	mov	edx, DWORD PTR [esi+16]
	mov	DWORD PTR [edx], 0
	mov	eax, DWORD PTR [esi+32]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR [esi+48]
	mov	DWORD PTR [ecx], 0

; 306  : 		_Mysb::setp(0, 0);

	mov	edx, DWORD PTR [esi+20]
	mov	DWORD PTR [edx], 0
	mov	eax, DWORD PTR [esi+36]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR [esi+52]
	mov	DWORD PTR [ecx], 0

; 307  : 		_Seekhigh = 0;
; 308  : 		_Mystate &= ~_Allocated;

	and	DWORD PTR [esi+64], -2			; fffffffeH
	mov	DWORD PTR [esi+60], 0

; 309  : 		}

	ret	0
?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Ptr$ = 12						; size = 24
__Mode$ = 36						; size = 4
?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekpos, COMDAT
; _this$ = ecx

; 240  : 		streamoff _Off = (streamoff)_Ptr;

	mov	eax, DWORD PTR __Ptr$[esp-4]
	mov	edx, DWORD PTR __Ptr$[esp+4]
	push	ebp
	push	edi

; 241  : 		if (_Mysb::pptr() != 0 && _Seekhigh < _Mysb::pptr())

	mov	edi, DWORD PTR [ecx+36]
	add	edx, eax
	mov	eax, DWORD PTR [edi]
	test	eax, eax
	je	SHORT $LN12@seekpos
	cmp	DWORD PTR [ecx+60], eax
	jae	SHORT $LN12@seekpos

; 242  : 			_Seekhigh = _Mysb::pptr();	// update high-water pointer

	mov	DWORD PTR [ecx+60], eax
$LN12@seekpos:

; 243  : 
; 244  : 		if (_Off == _BADOFF)

	mov	ebp, DWORD PTR ?_BADOFF@std@@3JB	; std::_BADOFF
	cmp	edx, ebp
	je	$LN56@seekpos
	push	ebx

; 245  : 			;
; 246  : 		else if (_Mode & ios_base::in && _Mysb::gptr() != 0)

	mov	bl, BYTE PTR __Mode$[esp+8]
	push	esi
	test	bl, 1
	je	SHORT $LN55@seekpos
	mov	eax, DWORD PTR [ecx+32]
	mov	esi, DWORD PTR [eax]
	test	esi, esi
	je	SHORT $LN55@seekpos

; 247  : 			{	// position within read buffer
; 248  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

	test	edx, edx
	jl	SHORT $LN4@seekpos
	mov	eax, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [eax]
	mov	edi, DWORD PTR [ecx+60]
	sub	edi, eax
	cmp	edx, edi
	jg	SHORT $LN4@seekpos

; 249  : 				{	// change read position
; 250  : 				_Mysb::gbump((int)(_Mysb::eback() - _Mysb::gptr() + _Off));

	sub	eax, esi
	mov	esi, DWORD PTR [ecx+48]
	add	eax, edx
	sub	DWORD PTR [esi], eax
	mov	esi, DWORD PTR [ecx+32]
	add	DWORD PTR [esi], eax

; 251  : 				if (_Mode & ios_base::out && _Mysb::pptr() != 0)

	test	bl, 2
	je	SHORT $LN57@seekpos
	mov	edi, DWORD PTR [ecx+36]
	mov	ebx, DWORD PTR [edi]
	test	ebx, ebx
	je	SHORT $LN57@seekpos

; 252  : 					_Mysb::setp(_Mysb::pbase(), _Mysb::gptr(),
; 253  : 						_Mysb::epptr());	// change write position to match

	mov	eax, DWORD PTR [ecx+32]
	mov	esi, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [eax]
	add	eax, ebx
	mov	DWORD PTR [edi], esi
	mov	ecx, DWORD PTR [ecx+52]
	sub	eax, esi
	mov	DWORD PTR [ecx], eax

; 254  : 				}
; 255  : 			else
; 256  : 				_Off = _BADOFF;

	jmp	SHORT $LN57@seekpos
$LN55@seekpos:

; 257  : 			}
; 258  : 		else if (_Mode & ios_base::out && _Mysb::pptr() != 0)

	test	bl, 2
	je	SHORT $LN4@seekpos
	mov	edi, DWORD PTR [edi]
	test	edi, edi
	je	SHORT $LN4@seekpos

; 259  : 			{	// position within write buffer
; 260  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

	test	edx, edx
	jl	SHORT $LN4@seekpos
	mov	eax, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [eax]
	mov	esi, DWORD PTR [ecx+60]
	sub	esi, eax
	cmp	edx, esi
	jg	SHORT $LN4@seekpos

; 261  : 				_Mysb::pbump((int)(_Mysb::eback()
; 262  : 					- _Mysb::pptr() + _Off));	// change write position

	mov	esi, DWORD PTR [ecx+52]
	sub	eax, edi
	add	eax, edx
	sub	DWORD PTR [esi], eax
	mov	ecx, DWORD PTR [ecx+36]
	add	DWORD PTR [ecx], eax

; 263  : 			else

	jmp	SHORT $LN57@seekpos
$LN4@seekpos:

; 264  : 				_Off = _BADOFF;
; 265  : 			}
; 266  : 		else
; 267  : 			_Off = _BADOFF;

	mov	edx, ebp
$LN57@seekpos:
	pop	esi
	pop	ebx
$LN56@seekpos:

; 268  : 		return (streampos(_Off));

	mov	eax, DWORD PTR ___$ReturnUdt$[esp+4]
	xor	ecx, ecx
	pop	edi
	mov	DWORD PTR [eax], edx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx
	pop	ebp

; 269  : 		}

	ret	32					; 00000020H
?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekpos
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@JHH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
__Way$ = 16						; size = 4
__Which$ = 20						; size = 4
?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@JHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekoff, COMDAT
; _this$ = ecx

; 194  : 		if (_Mysb::pptr() != 0 && _Seekhigh < _Mysb::pptr())

	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [edx]
	test	eax, eax
	je	SHORT $LN20@seekoff
	cmp	DWORD PTR [ecx+60], eax
	jae	SHORT $LN20@seekoff

; 195  : 			_Seekhigh = _Mysb::pptr();	// update high-water pointer

	mov	DWORD PTR [ecx+60], eax
$LN20@seekoff:
	push	ebx

; 196  : 
; 197  : 		if (_Which & ios_base::in && _Mysb::gptr() != 0)

	mov	bl, BYTE PTR __Which$[esp]
	push	esi
	push	edi
	test	bl, 1
	je	$LN19@seekoff
	mov	eax, DWORD PTR [ecx+32]
	mov	esi, DWORD PTR [eax]
	test	esi, esi
	je	$LN19@seekoff

; 198  : 			{	// position within read buffer
; 199  : 			if (_Way == ios_base::end)

	mov	eax, DWORD PTR __Way$[esp+8]
	mov	edi, DWORD PTR ?_BADOFF@std@@3JB	; std::_BADOFF
	cmp	eax, 2
	jne	SHORT $LN18@seekoff

; 200  : 				_Off += (off_type)(_Seekhigh - _Mysb::eback());

	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [ecx+60]
	sub	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR __Off$[esp+8]
	add	edx, eax

; 201  : 			else if (_Way == ios_base::cur

	jmp	SHORT $LN14@seekoff
$LN18@seekoff:

; 202  : 				&& (_Which & ios_base::out) == 0)

	cmp	eax, 1
	jne	SHORT $LN16@seekoff
	test	bl, 2
	jne	SHORT $LN73@seekoff

; 203  : 				_Off += (off_type)(_Mysb::gptr() - _Mysb::eback());

	mov	edx, DWORD PTR [ecx+16]
	mov	eax, esi
	sub	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR __Off$[esp+8]
	add	edx, eax
	jmp	SHORT $LN14@seekoff
$LN16@seekoff:

; 204  : 			else if (_Way != ios_base::beg)

	test	eax, eax
	je	SHORT $LN74@seekoff
$LN73@seekoff:

; 205  : 				_Off = _BADOFF;

	mov	edx, edi
	jmp	SHORT $LN14@seekoff
$LN74@seekoff:
	mov	edx, DWORD PTR __Off$[esp+8]
$LN14@seekoff:

; 206  : 
; 207  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

	test	edx, edx
	jl	$LN3@seekoff
	mov	eax, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [eax]
	push	ebp
	mov	ebp, DWORD PTR [ecx+60]
	sub	ebp, eax
	cmp	edx, ebp
	pop	ebp
	jg	$LN3@seekoff

; 208  : 				{	// change read position
; 209  : 				_Mysb::gbump((int)(_Mysb::eback() - _Mysb::gptr() + _Off));

	sub	eax, esi
	mov	esi, DWORD PTR [ecx+48]
	add	eax, edx
	sub	DWORD PTR [esi], eax
	mov	esi, DWORD PTR [ecx+32]
	add	DWORD PTR [esi], eax

; 210  : 				if (_Which & ios_base::out && _Mysb::pptr() != 0)

	test	bl, 2
	je	$LN77@seekoff
	mov	edi, DWORD PTR [ecx+36]
	mov	ebx, DWORD PTR [edi]
	test	ebx, ebx
	je	$LN77@seekoff

; 211  : 					_Mysb::setp(_Mysb::pbase(), _Mysb::gptr(),
; 212  : 						_Mysb::epptr());	// change write position to match

	mov	eax, DWORD PTR [ecx+32]
	mov	esi, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [eax]
	add	eax, ebx
	mov	DWORD PTR [edi], esi
	mov	ecx, DWORD PTR [ecx+52]
	sub	eax, esi
	mov	DWORD PTR [ecx], eax

; 213  : 				}
; 214  : 			else

	jmp	SHORT $LN77@seekoff
$LN19@seekoff:

; 215  : 				_Off = _BADOFF;
; 216  : 			}
; 217  : 		else if (_Which & ios_base::out && _Mysb::pptr() != 0)

	test	bl, 2
	je	SHORT $LN9@seekoff
	mov	esi, DWORD PTR [edx]
	test	esi, esi
	je	SHORT $LN9@seekoff

; 218  : 			{	// position within write buffer
; 219  : 			if (_Way == ios_base::end)

	mov	eax, DWORD PTR __Way$[esp+8]
	mov	edi, DWORD PTR ?_BADOFF@std@@3JB	; std::_BADOFF
	cmp	eax, 2
	jne	SHORT $LN8@seekoff

; 220  : 				_Off += (off_type)(_Seekhigh - _Mysb::eback());

	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [ecx+60]
	sub	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR __Off$[esp+8]
	add	edx, eax
	jmp	SHORT $LN4@seekoff
$LN8@seekoff:

; 221  : 			else if (_Way == ios_base::cur)

	cmp	eax, 1
	jne	SHORT $LN6@seekoff

; 222  : 				_Off += (off_type)(_Mysb::pptr() - _Mysb::eback());

	mov	edx, DWORD PTR [ecx+16]
	mov	eax, esi
	sub	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR __Off$[esp+8]
	add	edx, eax
	jmp	SHORT $LN4@seekoff
$LN6@seekoff:

; 223  : 			else if (_Way != ios_base::beg)
; 224  : 				_Off = _BADOFF;

	mov	edx, edi
	test	eax, eax
	jne	SHORT $LN4@seekoff
	mov	edx, DWORD PTR __Off$[esp+8]
$LN4@seekoff:

; 225  : 
; 226  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

	test	edx, edx
	jl	SHORT $LN3@seekoff
	mov	eax, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [eax]
	mov	ebx, DWORD PTR [ecx+60]
	sub	ebx, eax
	cmp	edx, ebx
	jg	SHORT $LN3@seekoff

; 227  : 				_Mysb::pbump((int)(_Mysb::eback()
; 228  : 					- _Mysb::pptr() + _Off));	// change write position

	sub	eax, esi
	mov	esi, DWORD PTR [ecx+52]
	add	eax, edx
	sub	DWORD PTR [esi], eax
	mov	ecx, DWORD PTR [ecx+36]
	add	DWORD PTR [ecx], eax

; 229  : 			else

	jmp	SHORT $LN77@seekoff
$LN3@seekoff:

; 230  : 				_Off = _BADOFF;

	mov	edx, edi

; 231  : 			}
; 232  : 		else

	jmp	SHORT $LN77@seekoff
$LN9@seekoff:

; 233  : 			_Off = _BADOFF;	// neither read nor write buffer selected, fail

	mov	edx, DWORD PTR ?_BADOFF@std@@3JB	; std::_BADOFF
$LN77@seekoff:

; 234  : 		return (pos_type(_Off));

	mov	eax, DWORD PTR ___$ReturnUdt$[esp+8]
	pop	edi
	xor	ecx, ecx
	pop	esi
	mov	DWORD PTR [eax], edx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx
	pop	ebx

; 235  : 		}

	ret	16					; 00000010H
?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@JHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekoff
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ
_TEXT	SEGMENT
?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow, COMDAT
; _this$ = ecx

; 174  : 		if (_Mysb::gptr() == 0)

	mov	edx, DWORD PTR [ecx+32]
	push	esi
	mov	esi, DWORD PTR [edx]
	test	esi, esi
	jne	SHORT $LN8@underflow

; 175  : 			return (_Traits::eof());	// no character buffer, fail

	or	eax, -1
	pop	esi

; 187  : 			}
; 188  : 		}

	ret	0
$LN8@underflow:
	push	ebx
	push	edi

; 176  : 		else if (_Mysb::gptr() < _Mysb::egptr())

	mov	edi, DWORD PTR [ecx+48]
	mov	ebx, DWORD PTR [edi]
	mov	eax, esi
	add	ebx, eax
	cmp	eax, ebx
	jae	SHORT $LN6@underflow

; 177  : 			return (_Traits::to_int_type(*_Mysb::gptr()));	// return buffered

	movzx	eax, BYTE PTR [esi]
	pop	edi
	pop	ebx
	pop	esi

; 187  : 			}
; 188  : 		}

	ret	0
$LN6@underflow:

; 178  : 		else if (_Mystate & _Noread || _Mysb::pptr() == 0
; 179  : 			|| _Mysb::pptr() <= _Mysb::gptr() && _Seekhigh <= _Mysb::gptr())

	test	BYTE PTR [ecx+64], 4
	jne	SHORT $LN3@underflow
	mov	eax, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN3@underflow
	cmp	eax, esi
	ja	SHORT $LN4@underflow
	cmp	DWORD PTR [ecx+60], esi
	jbe	SHORT $LN3@underflow
$LN4@underflow:

; 181  : 		else
; 182  : 			{	// extend read buffer into written area, then return buffered
; 183  : 			if (_Seekhigh < _Mysb::pptr())

	cmp	DWORD PTR [ecx+60], eax
	jae	SHORT $LN1@underflow

; 184  : 				_Seekhigh = _Mysb::pptr();

	mov	DWORD PTR [ecx+60], eax
$LN1@underflow:

; 185  : 			_Mysb::setg(_Mysb::eback(), _Mysb::gptr(), _Seekhigh);

	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [ecx+60]
	sub	eax, edx
	mov	DWORD PTR [edi], eax

; 186  : 			return (_Traits::to_int_type(*_Mysb::gptr()));

	mov	ecx, DWORD PTR [ecx+32]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	pop	edi
	pop	ebx
	pop	esi

; 187  : 			}
; 188  : 		}

	ret	0
$LN3@underflow:
	pop	edi
	pop	ebx

; 180  : 			return (_Traits::eof());	// can't read, fail

	or	eax, -1
	pop	esi

; 187  : 			}
; 188  : 		}

	ret	0
?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\istream
_TEXT	ENDS
;	COMDAT ??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_iostream<char,std::char_traits<char> >::~basic_iostream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 918  : 		{	// destroy the object

	mov	eax, DWORD PTR [ecx-12]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+ecx-12], OFFSET ??_7?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@

; 919  : 		}

	mov	eax, DWORD PTR [ecx-4]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+ecx-4], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
	mov	eax, DWORD PTR [ecx-12]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+ecx-12], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
	ret	0
??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_iostream<char,std::char_traits<char> >::~basic_iostream<char,std::char_traits<char> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_Ranit_base@DHPBDABDV_Iterator_base_secure@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Ranit_base@DHPBDABDV_Iterator_base_secure@std@@@std@@QAE@XZ PROC ; std::_Ranit_base<char,int,char const *,char const &,std::_Iterator_base_secure>::_Ranit_base<char,int,char const *,char const &,std::_Iterator_base_secure>, COMDAT
; _this$ = eax
	mov	DWORD PTR [eax], 0
	ret	0
??0?$_Ranit_base@DHPBDABDV_Iterator_base_secure@std@@@std@@QAE@XZ ENDP ; std::_Ranit_base<char,int,char const *,char const &,std::_Iterator_base_secure>::_Ranit_base<char,int,char const *,char const &,std::_Iterator_base_secure>
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\ostream
_TEXT	ENDS
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = eax

; 82   : 			if (_Myostr.rdbuf() != 0)

	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+eax+40]
	test	eax, eax
	je	SHORT $LN8@Sentry_bas

; 83   : 				_Myostr.rdbuf()->_Unlock();

	lea	ecx, DWORD PTR [eax+4]
	jmp	?_Unlock@_Mutex@std@@QAEXXZ		; std::_Mutex::_Unlock
$LN8@Sentry_bas:

; 84   : 			}

	ret	0
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = esi
; __Ostr$ = eax

; 75   : 			{	// lock the stream buffer, if there

	mov	DWORD PTR [esi], eax

; 76   : 			if (_Myostr.rdbuf() != 0)

	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+eax+40]
	test	eax, eax
	je	SHORT $LN10@Sentry_bas@2

; 77   : 				_Myostr.rdbuf()->_Lock();

	lea	ecx, DWORD PTR [eax+4]
	call	?_Lock@_Mutex@std@@QAEXXZ		; std::_Mutex::_Lock
$LN10@Sentry_bas@2:

; 78   : 			}

	mov	eax, esi
	ret	0
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\xstring
_TEXT	ENDS
;	COMDAT ??D?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDXZ
_TEXT	SEGMENT
??D?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDXZ PROC ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator*, COMDAT
; _this$ = esi

; 105  : 
; 106  :  #if _HAS_ITERATOR_DEBUGGING
; 107  : 		if (this->_Mycont == 0 || _Myptr == 0
; 108  : 			|| _Myptr < ((_Mystring *)this->_Mycont)->_Myptr()
; 109  : 			|| ((_Mystring *)this->_Mycont)->_Myptr()
; 110  : 				+ ((_Mystring *)this->_Mycont)->_Mysize <= _Myptr)
; 111  : 			{
; 112  : 			_DEBUG_ERROR("string iterator not dereferencable");
; 113  : 			_SCL_SECURE_OUT_OF_RANGE;
; 114  : 			}
; 115  : 		__analysis_assume(_Myptr != 0);
; 116  :  #else
; 117  : 		if (this->_Mycont != _IGNORE_MYCONT)

	mov	eax, DWORD PTR [esi]
	cmp	eax, -4					; fffffffcH
	je	SHORT $LN13@operator@5

; 118  : 		{
; 119  : 			_SCL_SECURE_VALIDATE(this->_Has_container());

	test	eax, eax
	jne	SHORT $LN2@operator@5
	call	__invalid_parameter_noinfo
$LN2@operator@5:

; 120  : 			_SCL_SECURE_VALIDATE_RANGE(_Myptr < (((_Mystring *)this->_Mycont)->_Myptr() + ((_Mystring *)(this->_Mycont))->_Mysize));

	mov	eax, DWORD PTR [esi]
	cmp	DWORD PTR [eax+24], 16			; 00000010H
	jb	SHORT $LN10@operator@5
	mov	ecx, DWORD PTR [eax+4]
	jmp	SHORT $LN11@operator@5
$LN10@operator@5:
	lea	ecx, DWORD PTR [eax+4]
$LN11@operator@5:
	mov	eax, DWORD PTR [eax+20]
	add	eax, ecx
	cmp	DWORD PTR [esi+4], eax
	jb	SHORT $LN13@operator@5
	call	__invalid_parameter_noinfo
$LN13@operator@5:

; 121  : 		}
; 122  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 123  : 
; 124  : 		return (*_Myptr);

	mov	eax, DWORD PTR [esi+4]

; 125  : 		}

	ret	0
??D?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDXZ ENDP ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator*
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBV_Container_base_secure@1@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBV_Container_base_secure@1@@Z PROC ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; __Ptr$ = edi
; __Pstring$ = esi

; 83   : 		__CLR_OR_THIS_CALL _String_const_iterator(pointer _Ptr, const _Container_base_secure *_Pstring)

	push	ebx
	mov	ebx, DWORD PTR _this$[esp]
	mov	DWORD PTR [ebx], 0

; 84   : 			{	// construct with pointer _Ptr
; 85   : 			_SCL_SECURE_VALIDATE(

	test	esi, esi
	je	SHORT $LN1@String_con
	test	edi, edi
	je	SHORT $LN1@String_con
	mov	edx, DWORD PTR [esi+24]
	lea	eax, DWORD PTR [esi+4]
	cmp	edx, 16					; 00000010H
	jb	SHORT $LN11@String_con
	mov	ecx, DWORD PTR [eax]
	jmp	SHORT $LN12@String_con
$LN11@String_con:
	mov	ecx, eax
$LN12@String_con:
	cmp	ecx, edi
	ja	SHORT $LN1@String_con
	cmp	edx, 16					; 00000010H
	jb	SHORT $LN15@String_con
	mov	eax, DWORD PTR [eax]
$LN15@String_con:
	mov	ecx, DWORD PTR [esi+20]
	add	ecx, eax
	cmp	edi, ecx
	jbe	SHORT $LN2@String_con
$LN1@String_con:

; 86   : 				_Pstring != NULL && 
; 87   : 				_Ptr != NULL && 
; 88   : 				((_Mystring *)_Pstring)->_Myptr() <= _Ptr && _Ptr <= (((_Mystring *)_Pstring)->_Myptr() + ((_Mystring *)_Pstring)->_Mysize));

	call	__invalid_parameter_noinfo
$LN2@String_con:

; 89   : 			this->_Mycont = _Pstring;

	mov	DWORD PTR [ebx], esi

; 90   : 			_Myptr = _Ptr;

	mov	DWORD PTR [ebx+4], edi

; 91   : 			}

	mov	eax, ebx
	pop	ebx
	ret	4
??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBV_Container_base_secure@1@@Z ENDP ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\streambuf
_TEXT	ENDS
;	COMDAT ?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Init, COMDAT
; _this$ = eax

; 282  : 		_IGfirst = &_Gfirst, _IPfirst = &_Pfirst;
; 283  : 		_IGnext = &_Gnext, _IPnext = &_Pnext;

	lea	edx, DWORD PTR [eax+24]
	mov	DWORD PTR [eax+32], edx
	lea	edx, DWORD PTR [eax+28]
	mov	DWORD PTR [eax+36], edx
	lea	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [eax+16], ecx

; 284  : 		_IGcount = &_Gcount, _IPcount = &_Pcount;

	lea	edx, DWORD PTR [eax+40]
	mov	DWORD PTR [eax+48], edx
	lea	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [eax+20], ecx
	lea	edx, DWORD PTR [eax+44]
	mov	DWORD PTR [eax+52], edx

; 285  : 		setp(0, 0), setg(0, 0, 0);

	mov	DWORD PTR [ecx], 0
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [ecx], 0
	mov	edx, DWORD PTR [eax+52]
	mov	DWORD PTR [edx], 0
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx], 0
	mov	edx, DWORD PTR [eax+32]
	mov	DWORD PTR [edx], 0
	mov	eax, DWORD PTR [eax+48]
	mov	DWORD PTR [eax], 0

; 286  : 		}

	ret	0
?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Init
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\xstring
_TEXT	ENDS
;	COMDAT ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXIID@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXIID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign, COMDAT
; __Off$ = esi
; __Count$ = ecx
; __Ch$ = edx

; 2075 : 		{	// assign _Count copies of _Ch beginning at _Off

	mov	eax, DWORD PTR _this$[esp-4]

; 2076 : 		if (_Count == 1)

	cmp	ecx, 1
	jne	SHORT $LN2@Chassign

; 2077 : 			_Traits::assign(*(_Myptr() + _Off), _Ch);

	cmp	DWORD PTR [eax+24], 16			; 00000010H
	jb	SHORT $LN7@Chassign
	mov	eax, DWORD PTR [eax+4]
	mov	BYTE PTR [eax+esi], dl

; 2080 : 		}

	ret	4

; 2077 : 			_Traits::assign(*(_Myptr() + _Off), _Ch);

$LN7@Chassign:
	add	eax, 4
	mov	BYTE PTR [eax+esi], dl

; 2080 : 		}

	ret	4
$LN2@Chassign:

; 2078 : 		else
; 2079 : 			_Traits::assign(_Myptr() + _Off, _Count, _Ch);

	cmp	DWORD PTR [eax+24], 16			; 00000010H
	jb	SHORT $LN13@Chassign
	mov	eax, DWORD PTR [eax+4]
	push	ecx
	movsx	ecx, dl
	push	ecx
	add	eax, esi
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 2080 : 		}

	ret	4

; 2078 : 		else
; 2079 : 			_Traits::assign(_Myptr() + _Off, _Count, _Ch);

$LN13@Chassign:
	push	ecx
	movsx	ecx, dl
	add	eax, 4
	push	ecx
	add	eax, esi
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 2080 : 		}

	ret	4
?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXIID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\fstream
_TEXT	ENDS
;	COMDAT ?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAV?$codecvt@DDH@2@@Z
_TEXT	SEGMENT
?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAV?$codecvt@DDH@2@@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt, COMDAT
; _this$ = esi
; __Newpcvt$ = edi

; 532  : 		if (_Newpcvt->always_noconv())

	mov	eax, DWORD PTR [edi]
	mov	edx, DWORD PTR [eax+4]
	mov	ecx, edi
	call	edx
	test	al, al
	je	SHORT $LN2@Initcvt

; 533  : 			_Pcvt = 0;	// nothing to do

	mov	DWORD PTR [esi+60], 0

; 538  : 			}
; 539  : 		}

	ret	0
$LN2@Initcvt:

; 534  : 		else
; 535  : 			{	// set up for nontrivial codecvt facet
; 536  : 			_Pcvt = _Newpcvt;
; 537  : 			_Mysb::_Init();	// reset any buffering

	lea	eax, DWORD PTR [esi+8]
	mov	DWORD PTR [esi+16], eax
	lea	ecx, DWORD PTR [esi+24]
	mov	DWORD PTR [esi+32], ecx
	lea	edx, DWORD PTR [esi+28]
	mov	DWORD PTR [esi+36], edx
	mov	DWORD PTR [esi+60], edi
	lea	eax, DWORD PTR [esi+12]
	mov	DWORD PTR [esi+20], eax
	lea	ecx, DWORD PTR [esi+40]
	mov	DWORD PTR [esi+48], ecx
	lea	edx, DWORD PTR [esi+44]
	mov	DWORD PTR [esi+52], edx
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR [esi+36]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR [esi+52]
	mov	DWORD PTR [ecx], 0
	mov	edx, DWORD PTR [esi+16]
	mov	DWORD PTR [edx], 0
	mov	eax, DWORD PTR [esi+32]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR [esi+48]
	mov	DWORD PTR [ecx], 0

; 538  : 			}
; 539  : 		}

	ret	0
?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAV?$codecvt@DDH@2@@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt
_TEXT	ENDS
PUBLIC	?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4HA ; `std::basic_filebuf<char,std::char_traits<char> >::_Init'::`2'::_Stinit
;	COMDAT ?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4HA
; File c:\program files\microsoft visual studio 9.0\vc\include\streambuf
_BSS	SEGMENT
?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4HA DD 01H DUP (?) ; `std::basic_filebuf<char,std::char_traits<char> >::_Init'::`2'::_Stinit
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\fstream
_BSS	ENDS
;	COMDAT ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z
_TEXT	SEGMENT
__Which$ = 8						; size = 4
?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Init, COMDAT
; _this$ = eax
; __File$ = ecx

; 460  : 		__PURE_APPDOMAIN_GLOBAL static _Myst _Stinit;	// initial state
; 461  : 		_Closef = _Which == _Openfl;

	cmp	DWORD PTR __Which$[esp-4], 1
	push	esi

; 462  : 		_Wrotesome = false;
; 463  : 
; 464  : 		_Mysb::_Init();	// initialize stream buffer base object

	lea	esi, DWORD PTR [eax+24]
	mov	DWORD PTR [eax+32], esi
	sete	dl
	mov	BYTE PTR [eax+72], dl
	lea	esi, DWORD PTR [eax+28]
	mov	DWORD PTR [eax+36], esi
	lea	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [eax+16], edx
	lea	esi, DWORD PTR [eax+40]
	mov	DWORD PTR [eax+48], esi
	mov	BYTE PTR [eax+65], 0
	lea	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [eax+20], edx
	lea	esi, DWORD PTR [eax+44]
	mov	DWORD PTR [eax+52], esi
	mov	DWORD PTR [edx], 0
	mov	edx, DWORD PTR [eax+36]
	mov	DWORD PTR [edx], 0
	mov	edx, DWORD PTR [eax+52]
	mov	DWORD PTR [edx], 0
	mov	edx, DWORD PTR [eax+16]
	mov	DWORD PTR [edx], 0
	mov	edx, DWORD PTR [eax+32]
	mov	DWORD PTR [edx], 0
	mov	edx, DWORD PTR [eax+48]
	mov	DWORD PTR [edx], 0
	pop	esi

; 465  : 
; 466  :  #ifndef _IORCNT
; 467  :   #define _IORCNT	_IOCNT	/* read and write counts are the same */
; 468  :   #define _IOWCNT _IOCNT
; 469  :  #endif /* _IORCNT */
; 470  : 
; 471  : #pragma warning(push)
; 472  : #pragma warning(disable: 6240)
; 473  : 		/* prefast noise VSW 489858 */
; 474  : 		if (_File != 0 && sizeof (_Elem) == 1)

	test	ecx, ecx
	je	SHORT $LN10@Init@2

; 475  : #pragma warning(pop)
; 476  : 			{	// point inside C stream with [first, first + count) buffer
; 477  : 			_Elem **_Pb = (_Elem **)&_File->_IOBASE;

	lea	edx, DWORD PTR [ecx+8]

; 478  : 			_Elem **_Pn = (_Elem **)&_File->_IOPTR;
; 479  : 			int *_Nr = (int *)&_File->_IORCNT;
; 480  : 			int *_Nw = (int *)&_File->_IOWCNT;
; 481  : 			_Mysb::_Init(_Pb, _Pn, _Nr, _Pb, _Pn, _Nw);

	mov	DWORD PTR [eax+16], edx
	mov	DWORD PTR [eax+20], edx
	lea	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+32], ecx
	mov	DWORD PTR [eax+36], ecx
	mov	DWORD PTR [eax+48], edx
	mov	DWORD PTR [eax+52], edx
$LN10@Init@2:

; 482  : 			}
; 483  : 
; 484  : 		_Myfile = _File;

	mov	DWORD PTR [eax+76], ecx

; 485  : 		_State = _Stinit;

	mov	ecx, DWORD PTR ?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4HA ; `std::basic_filebuf<char,std::char_traits<char> >::_Init'::`2'::_Stinit
	mov	DWORD PTR [eax+68], ecx

; 486  : 		_Pcvt = 0;	// pointer to codecvt facet

	mov	DWORD PTR [eax+60], 0

; 487  : 		}

	ret	4
?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Init
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\xstring
_TEXT	ENDS
;	COMDAT ??D?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEAADXZ
_TEXT	SEGMENT
??D?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEAADXZ PROC ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator*, COMDAT
; _this$ = esi

; 369  : 		return ((reference)**(_Mybase *)this);

	mov	eax, DWORD PTR [esi]
	cmp	eax, -4					; fffffffcH
	je	SHORT $LN15@operator@6
	test	eax, eax
	jne	SHORT $LN4@operator@6
	call	__invalid_parameter_noinfo
$LN4@operator@6:
	mov	eax, DWORD PTR [esi]
	cmp	DWORD PTR [eax+24], 16			; 00000010H
	jb	SHORT $LN12@operator@6
	mov	ecx, DWORD PTR [eax+4]
	jmp	SHORT $LN13@operator@6
$LN12@operator@6:
	lea	ecx, DWORD PTR [eax+4]
$LN13@operator@6:
	mov	eax, DWORD PTR [eax+20]
	add	eax, ecx
	cmp	DWORD PTR [esi+4], eax
	jb	SHORT $LN15@operator@6
	call	__invalid_parameter_noinfo
$LN15@operator@6:
	mov	eax, DWORD PTR [esi+4]

; 370  : 		}

	ret	0
??D?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEAADXZ ENDP ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator*
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PADPBV_Container_base_secure@1@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
??0?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PADPBV_Container_base_secure@1@@Z PROC ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_iterator<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; __Ptr$ = edi
; __Pstring$ = esi

; 341  : 			{	// construct with pointer _Ptr

	push	ebx
	mov	ebx, DWORD PTR _this$[esp]
	mov	DWORD PTR [ebx], 0
	test	esi, esi
	je	SHORT $LN3@String_ite
	test	edi, edi
	je	SHORT $LN3@String_ite
	mov	edx, DWORD PTR [esi+24]
	lea	eax, DWORD PTR [esi+4]
	cmp	edx, 16					; 00000010H
	jb	SHORT $LN13@String_ite
	mov	ecx, DWORD PTR [eax]
	jmp	SHORT $LN14@String_ite
$LN13@String_ite:
	mov	ecx, eax
$LN14@String_ite:
	cmp	ecx, edi
	ja	SHORT $LN3@String_ite
	cmp	edx, 16					; 00000010H
	jb	SHORT $LN17@String_ite
	mov	eax, DWORD PTR [eax]
$LN17@String_ite:
	mov	ecx, DWORD PTR [esi+20]
	add	ecx, eax
	cmp	edi, ecx
	jbe	SHORT $LN4@String_ite
$LN3@String_ite:
	call	__invalid_parameter_noinfo
$LN4@String_ite:
	mov	DWORD PTR [ebx], esi
	mov	DWORD PTR [ebx+4], edi

; 342  : 			}

	mov	eax, ebx
	pop	ebx
	ret	4
??0?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PADPBV_Container_base_secure@1@@Z ENDP ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_iterator<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\streambuf
_TEXT	ENDS
;	COMDAT ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
_TEXT	SEGMENT
?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::sputc, COMDAT
; _this$ = ecx
; __Ch$ = edx

; 161  : 		return (0 < _Pnavail()
; 162  : 			? _Traits::to_int_type(*_Pninc() = _Ch)
; 163  : 			: overflow(_Traits::to_int_type(_Ch)));

	mov	eax, DWORD PTR [ecx+36]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@sputc
	mov	eax, DWORD PTR [ecx+52]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN3@sputc
	dec	DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [ecx]
	push	esi
	lea	esi, DWORD PTR [eax+1]
	mov	DWORD PTR [ecx], esi
	mov	BYTE PTR [eax], dl
	movzx	eax, dl
	pop	esi

; 164  : 		}

	ret	0
$LN3@sputc:

; 161  : 		return (0 < _Pnavail()
; 162  : 			? _Traits::to_int_type(*_Pninc() = _Ch)
; 163  : 			: overflow(_Traits::to_int_type(_Ch)));

	mov	eax, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	movzx	edx, dl
	push	edx
	call	eax

; 164  : 		}

	ret	0
?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::sputc
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\fstream
_TEXT	ENDS
;	COMDAT ?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::sync, COMDAT
; _this$ = ecx

; 447  : 		{	// synchronize C stream with external file

	push	esi
	mov	esi, ecx

; 448  : 		return (_Myfile == 0
; 449  : 			|| _Traits::eq_int_type(_Traits::eof(), overflow())
; 450  : 			|| 0 <= fflush(_Myfile) ? 0 : -1);

	cmp	DWORD PTR [esi+76], 0
	je	SHORT $LN3@sync
	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax+4]
	push	-1
	call	edx
	cmp	eax, -1
	je	SHORT $LN3@sync
	mov	eax, DWORD PTR [esi+76]
	push	eax
	call	_fflush
	add	esp, 4
	test	eax, eax
	jge	SHORT $LN3@sync
	or	eax, -1
	pop	esi

; 451  : 		}

	ret	0
$LN3@sync:

; 448  : 		return (_Myfile == 0
; 449  : 			|| _Traits::eq_int_type(_Traits::eof(), overflow())
; 450  : 			|| 0 <= fflush(_Myfile) ? 0 : -1);

	xor	eax, eax
	pop	esi

; 451  : 		}

	ret	0
?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::sync
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PADH@Z
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Count$ = 12						; size = 4
?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PADH@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::setbuf, COMDAT
; _this$ = ecx

; 434  : 		{	// offer _Buffer to C stream

	push	edi
	mov	edi, ecx

; 435  : 		if (_Myfile == 0 || setvbuf(_Myfile, (char *)_Buffer,
; 436  : 			_Buffer == 0 && _Count == 0 ? _IONBF : _IOFBF,
; 437  : 			_Count * sizeof (_Elem)) != 0)

	mov	ecx, DWORD PTR [edi+76]
	test	ecx, ecx
	je	SHORT $LN2@setbuf
	mov	edx, DWORD PTR __Buffer$[esp]
	push	esi
	mov	esi, DWORD PTR __Count$[esp+4]
	test	edx, edx
	jne	SHORT $LN6@setbuf
	test	esi, esi
	jne	SHORT $LN6@setbuf
	lea	eax, DWORD PTR [esi+4]
	jmp	SHORT $LN7@setbuf
$LN6@setbuf:
	xor	eax, eax
$LN7@setbuf:
	push	esi
	push	eax
	push	edx
	push	ecx
	call	_setvbuf
	add	esp, 16					; 00000010H
	pop	esi
	test	eax, eax
	jne	SHORT $LN2@setbuf

; 439  : 		else
; 440  : 			{	// new buffer, reinitialize pointers
; 441  : 			_Init(_Myfile, _Openfl);

	mov	ecx, DWORD PTR [edi+76]
	push	1
	mov	eax, edi
	call	?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init

; 442  : 			return (this);

	mov	eax, edi
	pop	edi

; 443  : 			}
; 444  : 		}

	ret	8
$LN2@setbuf:

; 438  : 			return (0);	// failed

	xor	eax, eax
	pop	edi

; 443  : 			}
; 444  : 		}

	ret	8
?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PADH@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::setbuf
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::underflow, COMDAT
; _this$ = ecx

; 310  : 		{	// get an element from stream, but don't point past it

	push	esi
	mov	esi, ecx

; 311  : 		int_type _Meta;
; 312  : 		if (_Mysb::gptr() != 0
; 313  : 			&& _Mysb::gptr() < _Mysb::egptr())

	mov	eax, DWORD PTR [esi+32]
	mov	ecx, DWORD PTR [eax]
	test	ecx, ecx
	je	SHORT $LN4@underflow@2
	mov	edx, eax
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR [esi+48]
	mov	edx, DWORD PTR [edx]
	add	edx, eax
	cmp	eax, edx
	jae	SHORT $LN4@underflow@2

; 314  : 			return (_Traits::to_int_type(*_Mysb::gptr()));	// return buffered

	movzx	eax, BYTE PTR [ecx]
	pop	esi

; 321  : 			}
; 322  : 		}

	ret	0
$LN4@underflow@2:

; 315  : 		else if (_Traits::eq_int_type(_Traits::eof(), _Meta = uflow()))

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax+20]
	push	edi
	mov	ecx, esi
	call	edx
	mov	edi, eax
	cmp	edi, -1
	jne	SHORT $LN2@underflow@2
	pop	edi

; 316  : 			return (_Meta);	// uflow failed, return EOF

	or	eax, eax
	pop	esi

; 321  : 			}
; 322  : 		}

	ret	0
$LN2@underflow@2:

; 317  : 		else
; 318  : 			{	// get a char, don't point past it
; 319  : 			pbackfail(_Meta);

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax+8]
	push	edi
	mov	ecx, esi
	call	edx

; 320  : 			return (_Meta);

	mov	eax, edi
	pop	edi
	pop	esi

; 321  : 			}
; 322  : 		}

	ret	0
?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::underflow
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\streambuf
_TEXT	ENDS
;	COMDAT ?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::uflow, COMDAT
; _this$ = ecx

; 317  : 		{	// get a character from stream, point past it

	push	esi
	mov	esi, ecx

; 318  : 		return (_Traits::eq_int_type(_Traits::eof(), underflow())
; 319  : 			? _Traits::eof() : _Traits::to_int_type(*_Gninc()));

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax+16]
	call	edx
	cmp	eax, -1
	jne	SHORT $LN3@uflow
	or	eax, eax
	pop	esi

; 320  : 		}

	ret	0
$LN3@uflow:

; 318  : 		return (_Traits::eq_int_type(_Traits::eof(), underflow())
; 319  : 			? _Traits::eof() : _Traits::to_int_type(*_Gninc()));

	mov	eax, DWORD PTR [esi+48]
	dec	DWORD PTR [eax]
	mov	eax, DWORD PTR [esi+32]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR [ecx+1]
	mov	DWORD PTR [eax], edx
	movzx	eax, BYTE PTR [ecx]
	pop	esi

; 320  : 		}

	ret	0
?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::uflow
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::underflow, COMDAT
; _this$ = ecx

; 313  : 		return (_Traits::eof());

	or	eax, -1

; 314  : 		}

	ret	0
?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::underflow
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::pbackfail, COMDAT
; _this$ = ecx

; 303  : 		return (_Traits::eof());

	or	eax, -1

; 304  : 		}

	ret	4
?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pbackfail
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::overflow, COMDAT
; _this$ = ecx

; 298  : 		return (_Traits::eof());

	or	eax, -1

; 299  : 		}

	ret	4
?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::overflow
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\ios
_TEXT	ENDS
;	COMDAT ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ PROC	; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 39   : 		}

	push	ecx
	mov	DWORD PTR [ecx], OFFSET ??_7ios_base@std@@6B@
	call	?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
	pop	ecx
	ret	0
??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP	; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\xstring
_TEXT	ENDS
;	COMDAT ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin, COMDAT
; _this$ = edi

; 1502 : 		return (_STRING_ITERATOR(_Myptr()));

	mov	edx, DWORD PTR [edi+24]
	push	ebx
	mov	ebx, DWORD PTR ___$ReturnUdt$[esp]
	push	esi
	lea	eax, DWORD PTR [edi+4]
	cmp	edx, 16					; 00000010H
	jb	SHORT $LN5@begin
	mov	esi, DWORD PTR [eax]
	jmp	SHORT $LN6@begin
$LN5@begin:
	mov	esi, eax
$LN6@begin:
	mov	DWORD PTR [ebx], 0
	test	esi, esi
	je	SHORT $LN9@begin
	cmp	edx, 16					; 00000010H
	jb	SHORT $LN19@begin
	mov	ecx, DWORD PTR [eax]
	jmp	SHORT $LN20@begin
$LN19@begin:
	mov	ecx, eax
$LN20@begin:
	cmp	ecx, esi
	ja	SHORT $LN9@begin
	cmp	edx, 16					; 00000010H
	jb	SHORT $LN23@begin
	mov	eax, DWORD PTR [eax]
$LN23@begin:
	mov	ecx, DWORD PTR [edi+20]
	add	ecx, eax
	cmp	esi, ecx
	jbe	SHORT $LN10@begin
$LN9@begin:
	call	__invalid_parameter_noinfo
$LN10@begin:
	mov	DWORD PTR [ebx+4], esi
	pop	esi
	mov	DWORD PTR [ebx], edi
	mov	eax, ebx
	pop	ebx

; 1503 : 		}

	ret	4
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Gios_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gios_base@std@@UAEPAXI@Z PROC			; std::ios_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	push	esi
	mov	DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
	call	?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
	add	esp, 4
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $LN8@scalar@11
	push	esi
	call	DWORD PTR ?RenDelete@@3P6AXPAX@ZA	; RenDelete
	add	esp, 4
$LN8@scalar@11:
	mov	eax, esi
	pop	esi
	ret	4
??_Gios_base@std@@UAEPAXI@Z ENDP			; std::ios_base::`scalar deleting destructor'
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\xiosbase
_TEXT	ENDS
;	COMDAT ?fail@ios_base@std@@QBE_NXZ
_TEXT	SEGMENT
?fail@ios_base@std@@QBE_NXZ PROC			; std::ios_base::fail, COMDAT
; _this$ = eax

; 344  : 		return (((int)rdstate()
; 345  : 			& ((int)badbit | (int)failbit)) != 0);

	test	BYTE PTR [eax+8], 6
	mov	eax, 0
	setne	al

; 346  : 		}

	ret	0
?fail@ios_base@std@@QBE_NXZ ENDP			; std::ios_base::fail
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?good@ios_base@std@@QBE_NXZ
_TEXT	SEGMENT
?good@ios_base@std@@QBE_NXZ PROC			; std::ios_base::good, COMDAT
; _this$ = ecx

; 334  : 		return (rdstate() == goodbit);

	xor	eax, eax
	cmp	DWORD PTR [ecx+8], eax
	sete	al

; 335  : 		}

	ret	0
?good@ios_base@std@@QBE_NXZ ENDP			; std::ios_base::good
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\xlocale
_TEXT	ENDS
;	COMDAT ??1ctype_base@std@@UAE@XZ
_TEXT	SEGMENT
??1ctype_base@std@@UAE@XZ PROC				; std::ctype_base::~ctype_base, COMDAT
; _this$ = eax

; 1363 : 		}

	mov	DWORD PTR [eax], OFFSET ??_7facet@locale@std@@6B@
	ret	0
??1ctype_base@std@@UAE@XZ ENDP				; std::ctype_base::~ctype_base
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1codecvt_base@std@@UAE@XZ
_TEXT	SEGMENT
??1codecvt_base@std@@UAE@XZ PROC			; std::codecvt_base::~codecvt_base, COMDAT
; _this$ = eax

; 705  : 		}

	mov	DWORD PTR [eax], OFFSET ??_7facet@locale@std@@6B@
	ret	0
??1codecvt_base@std@@UAE@XZ ENDP			; std::codecvt_base::~codecvt_base
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0codecvt_base@std@@QAE@I@Z
_TEXT	SEGMENT
??0codecvt_base@std@@QAE@I@Z PROC			; std::codecvt_base::codecvt_base, COMDAT
; _this$ = eax

; 685  : 		{	// default constructor

	mov	DWORD PTR [eax+4], 0
	mov	DWORD PTR [eax], OFFSET ??_7codecvt_base@std@@6B@

; 686  : 		}

	ret	0
??0codecvt_base@std@@QAE@I@Z ENDP			; std::codecvt_base::codecvt_base
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Gfacet@locale@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gfacet@locale@std@@UAEPAXI@Z PROC			; std::locale::facet::`scalar deleting destructor', COMDAT
; _this$ = ecx
	test	BYTE PTR ___flags$[esp-4], 1
	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
	je	SHORT $LN8@scalar@12
	push	esi
	call	DWORD PTR ?RenDelete@@3P6AXPAX@ZA	; RenDelete
	add	esp, 4
$LN8@scalar@12:
	mov	eax, esi
	pop	esi
	ret	4
??_Gfacet@locale@std@@UAEPAXI@Z ENDP			; std::locale::facet::`scalar deleting destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1locale@std@@QAE@XZ
_TEXT	SEGMENT
__Lock$159285 = -4					; size = 4
??1locale@std@@QAE@XZ PROC				; std::locale::~locale, COMDAT
; _this$ = ecx

; 390  : 		{	// destroy the object

	push	ecx
	push	edi

; 391  : 		if (_Ptr != 0)

	mov	edi, DWORD PTR [ecx]
	test	edi, edi
	je	SHORT $LN4@locale

; 392  : 			_DELETE_CRT(_Ptr->_Decref());

	push	0
	lea	ecx, DWORD PTR __Lock$159285[esp+12]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	eax, DWORD PTR [edi+4]
	test	eax, eax
	jbe	SHORT $LN6@locale
	cmp	eax, -1
	jae	SHORT $LN6@locale
	dec	eax
	mov	DWORD PTR [edi+4], eax
$LN6@locale:
	push	esi
	mov	esi, DWORD PTR [edi+4]
	neg	esi
	sbb	esi, esi
	not	esi
	lea	ecx, DWORD PTR __Lock$159285[esp+12]
	and	esi, edi
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	test	esi, esi
	je	SHORT $LN9@locale
	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	push	1
	mov	ecx, esi
	call	edx
$LN9@locale:
	pop	esi
$LN4@locale:
	pop	edi

; 393  : 		}

	pop	ecx
	ret	0
??1locale@std@@QAE@XZ ENDP				; std::locale::~locale
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0locale@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Lock$159295 = -4					; size = 4
??0locale@std@@QAE@ABV01@@Z PROC			; std::locale::locale, COMDAT
; _this$ = edi
; __Right$ = eax

; 334  : 		{	// construct by copying

	push	ecx
	push	esi
	mov	esi, DWORD PTR [eax]

; 335  : 		_Ptr->_Incref();

	push	0
	lea	ecx, DWORD PTR __Lock$159295[esp+12]
	mov	DWORD PTR [edi], esi
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	eax, DWORD PTR [esi+4]
	cmp	eax, -1
	jae	SHORT $LN3@locale@2
	inc	eax
	mov	DWORD PTR [esi+4], eax
$LN3@locale@2:
	lea	ecx, DWORD PTR __Lock$159295[esp+8]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit

; 336  : 		}

	mov	eax, edi
	pop	esi
	pop	ecx
	ret	0
??0locale@std@@QAE@ABV01@@Z ENDP			; std::locale::locale
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\stdexcept
_TEXT	ENDS
;	COMDAT ?what@runtime_error@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@runtime_error@std@@UBEPBDXZ PROC			; std::runtime_error::what, COMDAT
; _this$ = ecx

; 162  : 		return (_Str.c_str());

	cmp	DWORD PTR [ecx+36], 16			; 00000010H
	jb	SHORT $LN7@what
	mov	eax, DWORD PTR [ecx+16]

; 163  : 		}

	ret	0

; 162  : 		return (_Str.c_str());

$LN7@what:
	lea	eax, DWORD PTR [ecx+16]

; 163  : 		}

	ret	0
?what@runtime_error@std@@UBEPBDXZ ENDP			; std::runtime_error::what
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\iosfwd
_TEXT	ENDS
;	COMDAT ?not_eof@?$char_traits@D@std@@SAHABH@Z
_TEXT	SEGMENT
?not_eof@?$char_traits@D@std@@SAHABH@Z PROC		; std::char_traits<char>::not_eof, COMDAT

; 522  : 		return (_Meta != eof() ? _Meta : !eof());

	xor	eax, eax

; 523  : 		}

	ret	0
?not_eof@?$char_traits@D@std@@SAHABH@Z ENDP		; std::char_traits<char>::not_eof
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T162004 = -4						; size = 4
?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::grouping, COMDAT
; _this$ = ecx
; ___$ReturnUdt$ = esi

; 79   : 		{	// return grouping string

	push	ecx

; 80   : 		return (do_grouping());

	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+12]
	push	esi
	mov	DWORD PTR $T162004[esp+8], 0
	call	edx
	mov	eax, esi

; 81   : 		}

	pop	ecx
	ret	0
?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::grouping
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\streambuf
_TEXT	ENDS
;	COMDAT ??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z
_TEXT	SEGMENT
??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=, COMDAT
; _this$ = esi
; __Right$ = edx

; 593  : 		if (_Strbuf == 0
; 594  : 			|| traits_type::eq_int_type(_Traits::eof(),
; 595  : 				_Strbuf->sputc(_Right)))

	mov	ecx, DWORD PTR [esi+4]
	test	ecx, ecx
	je	SHORT $LN1@operator@9
	mov	eax, DWORD PTR [ecx+36]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN7@operator@9
	mov	eax, DWORD PTR [ecx+52]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN7@operator@9
	dec	DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [ecx]
	push	edi
	lea	edi, DWORD PTR [eax+1]
	mov	DWORD PTR [ecx], edi
	mov	BYTE PTR [eax], dl
	movzx	eax, dl
	pop	edi
	jmp	SHORT $LN8@operator@9
$LN7@operator@9:
	mov	eax, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	movzx	edx, dl
	push	edx
	call	eax
$LN8@operator@9:
	cmp	eax, -1
	jne	SHORT $LN23@operator@9
$LN1@operator@9:

; 596  : 			_Failed = true;

	mov	BYTE PTR [esi], 1
$LN23@operator@9:

; 597  : 		return (*this);

	mov	eax, esi

; 598  : 		}

	ret	0
??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\xlocnum
_TEXT	ENDS
;	COMDAT ?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Count$ = 20						; size = 4
?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc, COMDAT
; __Ptr$ = eax

; 1518 : 		for (; 0 < _Count; --_Count, ++_Dest, ++_Ptr)

	mov	ecx, DWORD PTR __Dest$[esp]
	push	ebp
	mov	ebp, DWORD PTR __Count$[esp]
	push	edi
	mov	edi, eax
	test	ebp, ebp
	jbe	SHORT $LN1@Putc
	push	esi
$LL3@Putc:

; 1519 : 			*_Dest = _MAKLOCCHR(_Elem, *_Ptr, _Cvt);

	test	ecx, ecx
	je	SHORT $LN12@Putc
	mov	eax, DWORD PTR [ecx+36]
	cmp	DWORD PTR [eax], 0
	mov	dl, BYTE PTR [edi]
	lea	esi, DWORD PTR [ecx+36]
	je	SHORT $LN18@Putc
	mov	eax, DWORD PTR [ecx+52]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN18@Putc
	dec	DWORD PTR [eax]
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	lea	esi, DWORD PTR [ecx+1]
	mov	DWORD PTR [eax], esi
	mov	BYTE PTR [ecx], dl
	movzx	eax, dl
	jmp	SHORT $LN19@Putc
$LN18@Putc:
	mov	eax, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	movzx	edx, dl
	push	edx
	call	eax
$LN19@Putc:
	mov	ecx, DWORD PTR __Dest$[esp+12]
	cmp	eax, -1
	jne	SHORT $LN2@Putc
$LN12@Putc:
	mov	BYTE PTR __Dest$[esp+8], 1
$LN2@Putc:

; 1518 : 		for (; 0 < _Count; --_Count, ++_Dest, ++_Ptr)

	dec	ebp
	inc	edi
	test	ebp, ebp
	ja	SHORT $LL3@Putc
	pop	esi
$LN1@Putc:

; 1520 : 		return (_Dest);

	mov	eax, DWORD PTR ___$ReturnUdt$[esp+4]
	mov	edx, DWORD PTR __Dest$[esp+4]
	pop	edi
	mov	DWORD PTR [eax], edx
	mov	DWORD PTR [eax+4], ecx
	pop	ebp

; 1521 : 		}

	ret	0
?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@D@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$numpunct@D@std@@MAEPAXI@Z PROC			; std::numpunct<char>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	mov	eax, DWORD PTR [esi+8]
	push	eax
	mov	DWORD PTR [esi], OFFSET ??_7?$numpunct@D@std@@6B@
	call	DWORD PTR ?RenVecDelete@@3P6AXPAX@ZA	; RenVecDelete
	mov	ecx, DWORD PTR [esi+16]
	push	ecx
	call	DWORD PTR ?RenVecDelete@@3P6AXPAX@ZA	; RenVecDelete
	mov	edx, DWORD PTR [esi+20]
	push	edx
	call	DWORD PTR ?RenVecDelete@@3P6AXPAX@ZA	; RenVecDelete
	add	esp, 12					; 0000000cH
	test	BYTE PTR ___flags$[esp], 1
	mov	DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
	je	SHORT $LN18@scalar@23
	push	esi
	call	DWORD PTR ?RenDelete@@3P6AXPAX@ZA	; RenDelete
	add	esp, 4
$LN18@scalar@23:
	mov	eax, esi
	pop	esi
	ret	4
??_G?$numpunct@D@std@@MAEPAXI@Z ENDP			; std::numpunct<char>::`scalar deleting destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T162199 = -4						; size = 4
?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::truename, COMDAT
; _this$ = ecx
; ___$ReturnUdt$ = esi

; 89   : 		{	// return name for true

	push	ecx

; 90   : 		return (do_truename());

	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+20]
	push	esi
	mov	DWORD PTR $T162199[esp+8], 0
	call	edx
	mov	eax, esi

; 91   : 		}

	pop	ecx
	ret	0
?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::truename
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T162205 = -4						; size = 4
?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::falsename, COMDAT
; _this$ = ecx
; ___$ReturnUdt$ = esi

; 84   : 		{	// return name for false

	push	ecx

; 85   : 		return (do_falsename());

	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+16]
	push	esi
	mov	DWORD PTR $T162205[esp+8], 0
	call	edx
	mov	eax, esi

; 86   : 		}

	pop	ecx
	ret	0
?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::falsename
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 8
__Ch$ = 16						; size = 1
?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep, COMDAT
; ___$ReturnUdt$ = edi
; __Count$ = eax

; 1545 : 		for (; 0 < _Count; --_Count, ++_Dest)

	mov	ecx, DWORD PTR __Dest$[esp]
	push	ebx
	mov	bl, BYTE PTR __Ch$[esp]
	push	esi
	mov	esi, eax
	test	esi, esi
	jbe	SHORT $LN1@Rep
$LL6@Rep:

; 1546 : 			*_Dest = _Ch;

	test	ecx, ecx
	je	SHORT $LN10@Rep
	mov	eax, DWORD PTR [ecx+36]
	cmp	DWORD PTR [eax], 0
	lea	edx, DWORD PTR [ecx+36]
	je	SHORT $LN16@Rep
	mov	eax, DWORD PTR [ecx+52]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN16@Rep
	dec	DWORD PTR [eax]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR [ecx+1]
	mov	DWORD PTR [eax], edx
	mov	BYTE PTR [ecx], bl
	movzx	eax, bl
	jmp	SHORT $LN17@Rep
$LN16@Rep:
	mov	eax, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	movzx	edx, bl
	push	edx
	call	eax
$LN17@Rep:
	mov	ecx, DWORD PTR __Dest$[esp+8]
	cmp	eax, -1
	jne	SHORT $LN2@Rep
$LN10@Rep:
	mov	BYTE PTR __Dest$[esp+4], 1
$LN2@Rep:

; 1545 : 		for (; 0 < _Count; --_Count, ++_Dest)

	sub	esi, 1
	jne	SHORT $LL6@Rep
$LN1@Rep:

; 1547 : 		return (_Dest);

	mov	edx, DWORD PTR __Dest$[esp+4]
	pop	esi
	mov	DWORD PTR [edi], edx
	mov	DWORD PTR [edi+4], ecx
	mov	eax, edi
	pop	ebx

; 1548 : 		}

	ret	0
?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Count$ = 20						; size = 4
?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put, COMDAT
; __Ptr$ = eax

; 1510 : 		for (; 0 < _Count; --_Count, ++_Dest, ++_Ptr)

	mov	ecx, DWORD PTR __Dest$[esp]
	push	ebp
	mov	ebp, DWORD PTR __Count$[esp]
	push	edi
	mov	edi, eax
	test	ebp, ebp
	jbe	SHORT $LN1@Put
	push	esi
$LL3@Put:

; 1511 : 			*_Dest = *_Ptr;

	test	ecx, ecx
	je	SHORT $LN10@Put
	mov	eax, DWORD PTR [ecx+36]
	cmp	DWORD PTR [eax], 0
	mov	dl, BYTE PTR [edi]
	lea	esi, DWORD PTR [ecx+36]
	je	SHORT $LN16@Put
	mov	eax, DWORD PTR [ecx+52]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN16@Put
	dec	DWORD PTR [eax]
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	lea	esi, DWORD PTR [ecx+1]
	mov	DWORD PTR [eax], esi
	mov	BYTE PTR [ecx], dl
	movzx	eax, dl
	jmp	SHORT $LN17@Put
$LN16@Put:
	mov	eax, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	movzx	edx, dl
	push	edx
	call	eax
$LN17@Put:
	mov	ecx, DWORD PTR __Dest$[esp+12]
	cmp	eax, -1
	jne	SHORT $LN2@Put
$LN10@Put:
	mov	BYTE PTR __Dest$[esp+8], 1
$LN2@Put:

; 1510 : 		for (; 0 < _Count; --_Count, ++_Dest, ++_Ptr)

	dec	ebp
	inc	edi
	test	ebp, ebp
	ja	SHORT $LL3@Put
	pop	esi
$LN1@Put:

; 1512 : 		return (_Dest);

	mov	eax, DWORD PTR ___$ReturnUdt$[esp+4]
	mov	edx, DWORD PTR __Dest$[esp+4]
	pop	edi
	mov	DWORD PTR [eax], edx
	mov	DWORD PTR [eax+4], ecx
	pop	ebp

; 1513 : 		}

	ret	0
?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`scalar deleting destructor', COMDAT
; _this$ = ecx
	test	BYTE PTR ___flags$[esp-4], 1
	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
	je	SHORT $LN10@scalar@24
	push	esi
	call	DWORD PTR ?RenDelete@@3P6AXPAX@ZA	; RenDelete
	add	esp, 4
$LN10@scalar@24:
	mov	eax, esi
	pop	esi
	ret	4
??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`scalar deleting destructor'
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\xlocale
_TEXT	ENDS
;	COMDAT ??0?$codecvt@DDH@std@@QAE@ABV_Locinfo@1@I@Z
_TEXT	SEGMENT
??0?$codecvt@DDH@std@@QAE@ABV_Locinfo@1@I@Z PROC	; std::codecvt<char,char,int>::codecvt<char,char,int>, COMDAT
; _this$ = eax

; 777  : 		{	// construct from specified locale

	mov	DWORD PTR [eax+4], 0
	mov	DWORD PTR [eax], OFFSET ??_7?$codecvt@DDH@std@@6B@

; 778  : 		_Init(_Lobj);
; 779  : 		}

	ret	0
??0?$codecvt@DDH@std@@QAE@ABV_Locinfo@1@I@Z ENDP	; std::codecvt<char,char,int>::codecvt<char,char,int>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_D?$basic_iostream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
??_D?$basic_iostream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_iostream<char,std::char_traits<char> >::`vbase destructor', COMDAT
; _this$ = eax
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR [edx+eax-12], OFFSET ??_7?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@
	mov	ecx, DWORD PTR [eax-4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+eax-4], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
	mov	ecx, DWORD PTR [eax-12]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+eax-12], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
	push	eax
	mov	DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
	call	?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
	pop	ecx
	ret	0
??_D?$basic_iostream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_iostream<char,std::char_traits<char> >::`vbase destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_iostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_iostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_iostream<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	lea	esi, DWORD PTR [ecx-12]
	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR [ecx+4]
	lea	eax, DWORD PTR [esi+12]
	mov	DWORD PTR [edx+eax-12], OFFSET ??_7?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@
	mov	ecx, DWORD PTR [eax-4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+eax-4], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
	mov	ecx, DWORD PTR [eax-12]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+eax-12], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
	push	eax
	mov	DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
	call	?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
	add	esp, 4
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $LN19@scalar@25
	push	esi
	call	DWORD PTR ?RenDelete@@3P6AXPAX@ZA	; RenDelete
	add	esp, 4
$LN19@scalar@25:
	mov	eax, esi
	pop	esi
	ret	4
??_G?$basic_iostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_iostream<char,std::char_traits<char> >::`scalar deleting destructor'
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\sstream
_TEXT	ENDS
;	COMDAT ?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::pbackfail, COMDAT
; _this$ = ecx

; 157  : 		if (_Mysb::gptr() == 0
; 158  : 			|| _Mysb::gptr() <= _Mysb::eback()
; 159  : 			|| !_Traits::eq_int_type(_Traits::eof(), _Meta)
; 160  : 			&& !_Traits::eq(_Traits::to_char_type(_Meta), _Mysb::gptr()[-1])
; 161  : 			&& _Mystate & _Constant)

	mov	eax, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN3@pbackfail
	mov	edx, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR [edx]
	jbe	SHORT $LN3@pbackfail
	mov	edx, DWORD PTR __Meta$[esp-4]
	cmp	edx, -1
	je	SHORT $LN4@pbackfail
	cmp	dl, BYTE PTR [eax-1]
	je	SHORT $LN4@pbackfail
	test	BYTE PTR [ecx+64], 2
	jne	SHORT $LN3@pbackfail
$LN4@pbackfail:

; 163  : 		else
; 164  : 			{	// back up one position and store put-back character
; 165  : 			_Mysb::gbump(-1);

	mov	eax, DWORD PTR [ecx+48]
	inc	DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx+32]
	dec	DWORD PTR [eax]

; 166  : 			if (!_Traits::eq_int_type(_Traits::eof(), _Meta))

	cmp	edx, -1
	je	SHORT $LN37@pbackfail

; 167  : 				*_Mysb::gptr() = _Traits::to_char_type(_Meta);

	mov	eax, DWORD PTR [ecx+32]
	mov	ecx, DWORD PTR [eax]
	mov	BYTE PTR [ecx], dl

; 168  : 			return (_Traits::not_eof(_Meta));

	mov	eax, edx

; 169  : 			}
; 170  : 		}

	ret	4

; 168  : 			return (_Traits::not_eof(_Meta));

$LN37@pbackfail:
	xor	eax, eax

; 169  : 			}
; 170  : 		}

	ret	4
$LN3@pbackfail:

; 162  : 			return (_Traits::eof());	// can't put back, fail

	or	eax, -1

; 169  : 			}
; 170  : 		}

	ret	4
?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::pbackfail
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
_TEXT	SEGMENT
__Newsize$138582 = -4					; size = 4
__Meta$ = 8						; size = 4
?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow, COMDAT
; _this$ = ecx

; 87   : 		{	// put an element to stream

	push	ecx
	push	esi
	mov	esi, ecx

; 88   : 		if (_Mystate & _Append
; 89   : 			&& _Mysb::pptr() != 0 && _Mysb::pptr() < _Seekhigh)

	test	BYTE PTR [esi+64], 8
	push	edi
	je	SHORT $LN104@overflow
	mov	edi, DWORD PTR [esi+36]
	mov	edx, DWORD PTR [edi]
	test	edx, edx
	je	SHORT $LN104@overflow
	mov	ecx, DWORD PTR [esi+60]
	cmp	edx, ecx
	jae	SHORT $LN104@overflow

; 90   : 			_Mysb::setp(_Mysb::pbase(), _Seekhigh, _Mysb::epptr());

	mov	eax, DWORD PTR [esi+52]
	mov	eax, DWORD PTR [eax]
	add	eax, edx
	mov	DWORD PTR [edi], ecx
	sub	eax, ecx
	mov	ecx, DWORD PTR [esi+52]
	mov	DWORD PTR [ecx], eax
$LN104@overflow:

; 91   : 
; 92   : 		if (_Traits::eq_int_type(_Traits::eof(), _Meta))

	mov	eax, DWORD PTR __Meta$[esp+8]
	cmp	eax, -1
	jne	SHORT $LN17@overflow
	pop	edi

; 93   : 			return (_Traits::not_eof(_Meta));	// EOF, return success code

	xor	eax, eax
	pop	esi

; 151  : 			return (_Meta);
; 152  : 			}
; 153  : 		}

	pop	ecx
	ret	4
$LN17@overflow:

; 94   : 		else if (_Mysb::pptr() != 0
; 95   : 			&& _Mysb::pptr() < _Mysb::epptr())

	mov	edx, DWORD PTR [esi+36]
	mov	edi, DWORD PTR [edx]
	push	ebx
	test	edi, edi
	je	SHORT $LN15@overflow
	mov	ecx, DWORD PTR [esi+52]
	mov	ebx, DWORD PTR [ecx]
	mov	edx, edi
	add	ebx, edx
	cmp	edx, ebx
	jae	SHORT $LN15@overflow

; 96   : 			{	// room in buffer, store it
; 97   : 			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

	dec	DWORD PTR [ecx]
	mov	esi, DWORD PTR [esi+36]
	mov	ecx, DWORD PTR [esi]
	pop	ebx
	lea	edx, DWORD PTR [ecx+1]
	mov	DWORD PTR [esi], edx
	pop	edi
	mov	BYTE PTR [ecx], al
	pop	esi

; 151  : 			return (_Meta);
; 152  : 			}
; 153  : 		}

	pop	ecx
	ret	4
$LN15@overflow:

; 98   : 			return (_Meta);
; 99   : 			}
; 100  : 		else if (_Mystate & _Constant)

	test	BYTE PTR [esi+64], 2
	je	SHORT $LN13@overflow
	pop	ebx
	pop	edi

; 101  : 			return (_Traits::eof());	// array nonmutable, fail

	or	eax, -1
	pop	esi

; 151  : 			return (_Meta);
; 152  : 			}
; 153  : 		}

	pop	ecx
	ret	4
$LN13@overflow:
	push	ebp

; 102  : 		else
; 103  : 			{	// grow buffer and store element
; 104  : 			size_t _Oldsize = _Mysb::pptr() == 0
; 105  : 				? 0 : _Mysb::epptr() - _Mysb::eback();

	test	edi, edi
	jne	SHORT $LN21@overflow
	xor	ebp, ebp
	jmp	SHORT $LN22@overflow
$LN21@overflow:
	mov	eax, DWORD PTR [esi+52]
	mov	ecx, DWORD PTR [esi+16]
	mov	ebp, DWORD PTR [eax]
	sub	ebp, DWORD PTR [ecx]
	add	ebp, edi
$LN22@overflow:

; 106  : 			size_t _Newsize = _Oldsize;
; 107  : 			size_t _Inc = _Newsize / 2 < _MINSIZE
; 108  : 				? _MINSIZE : _Newsize / 2;	// grow by 50 per cent

	mov	eax, ebp
	shr	eax, 1
	cmp	eax, 32					; 00000020H
	jae	SHORT $LN23@overflow
	mov	eax, 32					; 00000020H
	jmp	SHORT $LL11@overflow
$LN23@overflow:

; 109  : 
; 110  : 			while (0 < _Inc && INT_MAX - _Inc < _Newsize)

	test	eax, eax
	jbe	SHORT $LN108@overflow
$LL11@overflow:
	mov	edx, 2147483647				; 7fffffffH
	sub	edx, eax
	cmp	edx, ebp
	jae	SHORT $LN10@overflow

; 111  : 				_Inc /= 2;	// increment causes overflow, halve it

	shr	eax, 1

; 109  : 
; 110  : 			while (0 < _Inc && INT_MAX - _Inc < _Newsize)

	jne	SHORT $LL11@overflow
$LN10@overflow:

; 112  : 			if (_Inc == 0)

	test	eax, eax
$LN108@overflow:
	jne	SHORT $LN9@overflow
	pop	ebp
	pop	ebx
	pop	edi

; 113  : 				return (_Traits::eof());	// buffer can't grow, fail

	or	eax, -1
	pop	esi

; 151  : 			return (_Meta);
; 152  : 			}
; 153  : 		}

	pop	ecx
	ret	4
$LN9@overflow:

; 114  : 
; 115  : 			_Newsize += _Inc;

	add	eax, ebp

; 116  : 
; 117  : 			_Elem *_Newptr = _Al.allocate(_Newsize);

	push	0
	push	eax
	mov	DWORD PTR __Newsize$138582[esp+28], eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	mov	edi, eax

; 118  : 			_Elem *_Oldptr = _Mysb::eback();

	mov	eax, DWORD PTR [esi+16]
	mov	ebx, DWORD PTR [eax]
	add	esp, 8

; 119  : 
; 120  : 			if (0 < _Oldsize)

	test	ebp, ebp
	jbe	SHORT $LN109@overflow

; 121  : 				_Traits_helper::copy_s<_Traits>(_Newptr, _Newsize, _Oldptr, _Oldsize);

	mov	ecx, DWORD PTR __Newsize$138582[esp+20]
	push	ebp
	push	ebx
	push	ecx
	push	edi
	call	??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ; std::_Traits_helper::copy_s<std::char_traits<char> >
	add	esp, 16					; 00000010H

; 122  : 
; 123  : 			if (_Oldsize == 0)

	test	ebp, ebp
$LN109@overflow:
	jne	SHORT $LN7@overflow

; 124  : 				{	// first growth, set up pointers
; 125  : 				_Seekhigh = _Newptr;
; 126  : 				_Mysb::setp(_Newptr, _Newptr + _Newsize);

	mov	edx, DWORD PTR [esi+20]
	mov	DWORD PTR [esi+60], edi
	mov	DWORD PTR [edx], edi
	mov	eax, DWORD PTR [esi+36]
	mov	edx, DWORD PTR __Newsize$138582[esp+20]
	mov	DWORD PTR [eax], edi
	mov	ecx, DWORD PTR [esi+52]
	mov	DWORD PTR [ecx], edx

; 127  : 				if (_Mystate & _Noread)
; 128  : 					_Mysb::setg(_Newptr, 0, _Newptr);

	mov	eax, DWORD PTR [esi+16]
	test	BYTE PTR [esi+64], 4
	mov	DWORD PTR [eax], edi
	mov	ecx, DWORD PTR [esi+32]
	je	SHORT $LN6@overflow
	mov	DWORD PTR [ecx], 0
	mov	edx, DWORD PTR [esi+48]
	mov	DWORD PTR [edx], edi

; 129  : 				else

	jmp	SHORT $LN89@overflow
$LN6@overflow:

; 130  : 					_Mysb::setg(_Newptr, _Newptr, _Newptr + 1);

	mov	DWORD PTR [ecx], edi
	mov	edx, DWORD PTR [esi+48]
	mov	DWORD PTR [edx], 1

; 131  : 				}
; 132  : 			else

	jmp	SHORT $LN89@overflow
$LN7@overflow:

; 133  : 				{	// not first growth, adjust pointers
; 134  : 				_Seekhigh = _Newptr + (_Seekhigh - _Oldptr);
; 135  : 				_Mysb::setp(_Newptr + (_Mysb::pbase() - _Oldptr),
; 136  : 					_Newptr + (_Mysb::pptr() - _Oldptr),
; 137  : 					_Newptr + _Newsize);

	mov	ecx, DWORD PTR [esi+36]
	mov	eax, edi
	sub	eax, ebx
	add	DWORD PTR [esi+60], eax
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [esi+20]
	mov	edx, edi
	sub	edx, ebx
	add	DWORD PTR [ecx], edx
	mov	ecx, DWORD PTR [esi+36]
	sub	eax, ebx
	add	eax, edi
	mov	edx, edi
	sub	edx, eax
	add	edx, DWORD PTR __Newsize$138582[esp+20]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [esi+52]
	mov	DWORD PTR [eax], edx

; 138  : 				if (_Mystate & _Noread)

	test	BYTE PTR [esi+64], 4
	je	SHORT $LN3@overflow

; 139  : 					_Mysb::setg(_Newptr, 0, _Newptr);

	mov	ecx, DWORD PTR [esi+16]
	mov	DWORD PTR [ecx], edi
	mov	edx, DWORD PTR [esi+32]
	mov	DWORD PTR [edx], 0
	mov	eax, DWORD PTR [esi+48]
	mov	DWORD PTR [eax], edi

; 140  : 				else

	jmp	SHORT $LN89@overflow
$LN3@overflow:

; 141  : 					_Mysb::setg(_Newptr,
; 142  : 						_Newptr + (_Mysb::gptr() - _Oldptr),
; 143  : 						_Mysb::pptr() + 1);

	mov	edx, DWORD PTR [esi+32]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [esi+36]
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [esi+16]
	sub	eax, ebx
	add	eax, edi
	mov	DWORD PTR [edx], edi
	mov	edx, DWORD PTR [esi+32]
	sub	ecx, eax
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [esi+48]
	inc	ecx
	mov	DWORD PTR [eax], ecx
$LN89@overflow:

; 144  : 				}
; 145  : 
; 146  : 			if (_Mystate & _Allocated)

	test	BYTE PTR [esi+64], 1
	je	SHORT $LN93@overflow

; 147  : 				_Al.deallocate(_Oldptr, _Oldsize);

	push	ebx
	call	DWORD PTR ?RenDelete@@3P6AXPAX@ZA	; RenDelete
	add	esp, 4
$LN93@overflow:

; 148  : 			_Mystate |= _Allocated;
; 149  : 
; 150  : 			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

	mov	eax, DWORD PTR [esi+52]
	or	DWORD PTR [esi+64], 1
	dec	DWORD PTR [eax]
	mov	esi, DWORD PTR [esi+36]
	mov	ecx, DWORD PTR [esi]
	mov	eax, DWORD PTR __Meta$[esp+16]
	pop	ebp
	pop	ebx
	lea	edx, DWORD PTR [ecx+1]
	mov	DWORD PTR [esi], edx
	pop	edi
	mov	BYTE PTR [ecx], al
	pop	esi

; 151  : 			return (_Meta);
; 152  : 			}
; 153  : 		}

	pop	ecx
	ret	4
?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\xlocale
_TEXT	ENDS
;	COMDAT ??1?$codecvt@DDH@std@@MAE@XZ
_TEXT	SEGMENT
??1?$codecvt@DDH@std@@MAE@XZ PROC			; std::codecvt<char,char,int>::~codecvt<char,char,int>, COMDAT
; _this$ = ecx

; 793  : 		}

	mov	DWORD PTR [ecx], OFFSET ??_7facet@locale@std@@6B@
	ret	0
??1?$codecvt@DDH@std@@MAE@XZ ENDP			; std::codecvt<char,char,int>::~codecvt<char,char,int>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_istream<char,std::char_traits<char> >::`vbase destructor', COMDAT
; _this$ = eax
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	add	eax, 8
	mov	DWORD PTR [edx+eax-8], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
	push	eax
	mov	DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
	call	?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
	pop	ecx
	ret	0
??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_istream<char,std::char_traits<char> >::`vbase destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::`vbase destructor', COMDAT
; _this$ = eax
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	add	eax, 4
	mov	DWORD PTR [edx+eax-4], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
	push	eax
	mov	DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
	call	?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
	pop	ecx
	ret	0
??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::`vbase destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Glocale@std@@QAEPAXI@Z
_TEXT	SEGMENT
__Lock$162774 = -4					; size = 4
___flags$ = 8						; size = 4
??_Glocale@std@@QAEPAXI@Z PROC				; std::locale::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ecx
	push	ebx
	mov	ebx, ecx
	push	edi
	mov	edi, DWORD PTR [ebx]
	test	edi, edi
	je	SHORT $LN7@scalar@26
	push	0
	lea	ecx, DWORD PTR __Lock$162774[esp+16]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	eax, DWORD PTR [edi+4]
	test	eax, eax
	jbe	SHORT $LN9@scalar@26
	cmp	eax, -1
	jae	SHORT $LN9@scalar@26
	dec	eax
	mov	DWORD PTR [edi+4], eax
$LN9@scalar@26:
	push	esi
	mov	esi, DWORD PTR [edi+4]
	neg	esi
	sbb	esi, esi
	not	esi
	lea	ecx, DWORD PTR __Lock$162774[esp+16]
	and	esi, edi
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	test	esi, esi
	je	SHORT $LN15@scalar@26
	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	push	1
	mov	ecx, esi
	call	edx
$LN15@scalar@26:
	pop	esi
$LN7@scalar@26:
	test	BYTE PTR ___flags$[esp+8], 1
	je	SHORT $LN14@scalar@26
	push	ebx
	call	DWORD PTR ?RenDelete@@3P6AXPAX@ZA	; RenDelete
	add	esp, 4
$LN14@scalar@26:
	pop	edi
	mov	eax, ebx
	pop	ebx
	pop	ecx
	ret	4
??_Glocale@std@@QAEPAXI@Z ENDP				; std::locale::`scalar deleting destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_istream<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	lea	esi, DWORD PTR [ecx-8]
	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR [ecx+4]
	lea	eax, DWORD PTR [esi+8]
	mov	DWORD PTR [edx+eax-8], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
	push	eax
	mov	DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
	call	?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
	add	esp, 4
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $LN15@scalar@27
	push	esi
	call	DWORD PTR ?RenDelete@@3P6AXPAX@ZA	; RenDelete
	add	esp, 4
$LN15@scalar@27:
	mov	eax, esi
	pop	esi
	ret	4
??_G?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::`scalar deleting destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_ios<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	push	esi
	mov	DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
	call	?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
	add	esp, 4
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $LN11@scalar@28
	push	esi
	call	DWORD PTR ?RenDelete@@3P6AXPAX@ZA	; RenDelete
	add	esp, 4
$LN11@scalar@28:
	mov	eax, esi
	pop	esi
	ret	4
??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::`scalar deleting destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	lea	esi, DWORD PTR [ecx-4]
	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR [ecx+4]
	lea	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [edx+eax-4], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
	push	eax
	mov	DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
	call	?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
	add	esp, 4
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $LN15@scalar@29
	push	esi
	call	DWORD PTR ?RenDelete@@3P6AXPAX@ZA	; RenDelete
	add	esp, 4
$LN15@scalar@29:
	mov	eax, esi
	pop	esi
	ret	4
??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::`scalar deleting destructor'
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\fstream
_TEXT	ENDS
;	COMDAT ?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::pbackfail, COMDAT
; _this$ = ecx

; 282  : 		if (_Mysb::gptr() != 0
; 283  : 			&& _Mysb::eback() < _Mysb::gptr()
; 284  : 			&& (_Traits::eq_int_type(_Traits::eof(), _Meta)
; 285  : 			|| _Traits::eq_int_type(_Traits::to_int_type(_Mysb::gptr()[-1]),
; 286  : 				_Meta)))

	mov	eax, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [eax]
	push	ebx
	mov	ebx, DWORD PTR __Meta$[esp]
	test	eax, eax
	je	SHORT $LN10@pbackfail@2
	mov	edx, DWORD PTR [ecx+16]
	cmp	DWORD PTR [edx], eax
	jae	SHORT $LN10@pbackfail@2
	cmp	ebx, -1
	je	SHORT $LN9@pbackfail@2
	movzx	eax, BYTE PTR [eax-1]
	cmp	eax, ebx
	jne	SHORT $LN10@pbackfail@2
$LN9@pbackfail@2:

; 287  : 			{	// just back up position
; 288  : 			_Mysb::_Gndec();

	mov	eax, DWORD PTR [ecx+48]
	inc	DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+32]
	dec	DWORD PTR [ecx]

; 289  : 			return (_Traits::not_eof(_Meta));

	mov	eax, ebx
	inc	eax
	neg	eax
	sbb	eax, eax
	and	eax, ebx
	pop	ebx

; 295  : #pragma warning(push)
; 296  : #pragma warning(disable: 6237 6239)
; 297  : 		/* prefast noise VSW 489858 */
; 298  : 		else if (1 < sizeof (_Elem) && _Mysb::gptr() != &_Mychar)
; 299  : #pragma warning(pop)
; 300  : 			{	// putback to _Mychar
; 301  : 			_Mychar = _Traits::to_char_type(_Meta);
; 302  : 			_Mysb::setg(&_Mychar, &_Mychar, &_Mychar + 1);
; 303  : 			return (_Meta);
; 304  : 			}
; 305  : 		else
; 306  : 			return (_Traits::eof());	// nowhere to put back
; 307  : 		}

	ret	4
$LN10@pbackfail@2:

; 290  : 			}
; 291  : 		else if (_Myfile == 0 || _Traits::eq_int_type(_Traits::eof(), _Meta))

	mov	eax, DWORD PTR [ecx+76]
	test	eax, eax
	je	SHORT $LN6@pbackfail@2
	cmp	ebx, -1
	je	SHORT $LN6@pbackfail@2

; 293  : 		else if (_Pcvt == 0 && _Ungetc(_Traits::to_char_type(_Meta), _Myfile))

	cmp	DWORD PTR [ecx+60], 0
	jne	SHORT $LN6@pbackfail@2
	movzx	ecx, bl
	push	eax
	push	ecx
	call	_ungetc
	add	esp, 8
	cmp	eax, -1
	je	SHORT $LN6@pbackfail@2

; 294  : 			return (_Meta);	// no facet and unget succeeded, return

	mov	eax, ebx
	pop	ebx

; 295  : #pragma warning(push)
; 296  : #pragma warning(disable: 6237 6239)
; 297  : 		/* prefast noise VSW 489858 */
; 298  : 		else if (1 < sizeof (_Elem) && _Mysb::gptr() != &_Mychar)
; 299  : #pragma warning(pop)
; 300  : 			{	// putback to _Mychar
; 301  : 			_Mychar = _Traits::to_char_type(_Meta);
; 302  : 			_Mysb::setg(&_Mychar, &_Mychar, &_Mychar + 1);
; 303  : 			return (_Meta);
; 304  : 			}
; 305  : 		else
; 306  : 			return (_Traits::eof());	// nowhere to put back
; 307  : 		}

	ret	4
$LN6@pbackfail@2:

; 292  : 			return (_Traits::eof());	// no open C stream or EOF, fail

	or	eax, -1
	pop	ebx

; 295  : #pragma warning(push)
; 296  : #pragma warning(disable: 6237 6239)
; 297  : 		/* prefast noise VSW 489858 */
; 298  : 		else if (1 < sizeof (_Elem) && _Mysb::gptr() != &_Mychar)
; 299  : #pragma warning(pop)
; 300  : 			{	// putback to _Mychar
; 301  : 			_Mychar = _Traits::to_char_type(_Meta);
; 302  : 			_Mysb::setg(&_Mychar, &_Mychar, &_Mychar + 1);
; 303  : 			return (_Meta);
; 304  : 			}
; 305  : 		else
; 306  : 			return (_Traits::eof());	// nowhere to put back
; 307  : 		}

	ret	4
?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::pbackfail
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\streambuf
_TEXT	ENDS
;	COMDAT ?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPBDH@Z
_TEXT	SEGMENT
__Copied$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPBDH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::xsputn, COMDAT
; _this$ = ecx

; 362  : 		{	// put _Count characters to stream

	push	ecx
	push	ebp

; 363  : 		streamsize _Stream_size, _Size, _Copied;
; 364  : 
; 365  : 		for (_Copied = 0; 0 < _Count; )

	mov	ebp, DWORD PTR __Count$[esp+4]
	push	esi
	xor	esi, esi
	push	edi
	mov	edi, ecx
	mov	DWORD PTR __Copied$[esp+16], esi
	test	ebp, ebp
	jle	SHORT $LN31@xsputn
	push	ebx
	mov	ebx, DWORD PTR __Ptr$[esp+16]
	npad	7
$LL7@xsputn:

; 366  : 			if (0 < (_Stream_size = _Pnavail()))

	mov	eax, edi
	call	?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
	test	eax, eax
	jle	SHORT $LN5@xsputn

; 367  : 				{	// copy to write buffer
; 368  : 				_Size = _Stream_size;
; 369  : 				if (_Count < _Size)

	cmp	ebp, eax
	mov	esi, eax
	jge	SHORT $LN4@xsputn

; 370  : 					_Size = _Count;

	mov	esi, ebp
$LN4@xsputn:

; 371  : 				_Traits_helper::copy_s<_Traits>(pptr(), _Stream_size, _Ptr, _Size);

	push	esi
	push	ebx
	push	eax
	mov	eax, DWORD PTR [edi+36]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy_s

; 372  : 				_Ptr += _Size;
; 373  : 				_Copied += _Size;
; 374  : 				_Count -= _Size;
; 375  : 				pbump((int)_Size);

	mov	eax, DWORD PTR [edi+52]
	sub	DWORD PTR [eax], esi
	add	DWORD PTR __Copied$[esp+36], esi
	mov	eax, DWORD PTR [edi+36]
	add	ebx, esi
	sub	ebp, esi
	add	esp, 16					; 00000010H
	add	DWORD PTR [eax], esi

; 376  : 				}
; 377  : 			else if (_Traits::eq_int_type(_Traits::eof(),

	mov	esi, DWORD PTR __Copied$[esp+20]
	jmp	SHORT $LN1@xsputn
$LN5@xsputn:

; 378  : 				overflow(_Traits::to_int_type(*_Ptr))))

	movzx	eax, BYTE PTR [ebx]
	mov	edx, DWORD PTR [edi]
	push	eax
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, edi
	call	eax
	cmp	eax, -1
	je	SHORT $LN30@xsputn

; 379  : 				break;	// single character put failed, quit
; 380  : 			else
; 381  : 				{	// count character successfully put
; 382  : 				++_Ptr;
; 383  : 				++_Copied;

	inc	esi
	inc	ebx
	mov	DWORD PTR __Copied$[esp+20], esi

; 384  : 				--_Count;

	dec	ebp
$LN1@xsputn:

; 363  : 		streamsize _Stream_size, _Size, _Copied;
; 364  : 
; 365  : 		for (_Copied = 0; 0 < _Count; )

	test	ebp, ebp
	jg	SHORT $LL7@xsputn
$LN30@xsputn:
	pop	ebx
	pop	edi

; 385  : 				}
; 386  : 
; 387  : 		return (_Copied);

	mov	eax, esi
	pop	esi
	pop	ebp

; 388  : 		}

	pop	ecx
	ret	8
$LN31@xsputn:
	pop	edi

; 385  : 				}
; 386  : 
; 387  : 		return (_Copied);

	mov	eax, esi
	pop	esi
	pop	ebp

; 388  : 		}

	pop	ecx
	ret	8
?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPBDH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::xsputn
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Xsgetn_s@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADIH@Z
_TEXT	SEGMENT
__Copied$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Ptr_size$ = 12					; size = 4
__Count$ = 16						; size = 4
?_Xsgetn_s@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADIH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Xsgetn_s, COMDAT
; _this$ = ecx

; 332  : 		{	// get _Count characters from stream

	push	ecx
	push	ebp

; 333  : 		int_type _Meta;
; 334  : 		streamsize _Stream_size, _Size, _Copied;
; 335  : 
; 336  : 		for (_Copied = 0; 0 < _Count; )

	mov	ebp, DWORD PTR __Count$[esp+4]
	push	esi
	xor	esi, esi
	push	edi
	mov	edi, ecx
	mov	DWORD PTR __Copied$[esp+16], esi
	test	ebp, ebp
	jle	SHORT $LN31@Xsgetn_s
	push	ebx
	mov	ebx, DWORD PTR __Ptr$[esp+16]
	npad	7
$LL7@Xsgetn_s:

; 337  : 			if (0 < (_Stream_size = _Gnavail()))

	mov	eax, edi
	call	?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail
	test	eax, eax
	jle	SHORT $LN5@Xsgetn_s

; 338  : 				{	// copy from read buffer
; 339  : 				_Size = _Stream_size;
; 340  : 				if (_Count < _Size)

	cmp	ebp, eax
	mov	esi, eax
	jge	SHORT $LN4@Xsgetn_s

; 341  : 					_Size = _Count;

	mov	esi, ebp
$LN4@Xsgetn_s:

; 342  : 				_Traits_helper::copy_s<_Traits>(_Ptr, _Ptr_size, gptr(), _Size);

	mov	eax, DWORD PTR [edi+32]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ptr_size$[esp+16]
	push	esi
	push	ecx
	push	edx
	push	ebx
	call	_memcpy_s

; 343  : 				_Ptr += _Size;
; 344  : 				_Copied += _Size;
; 345  : 				_Count -= _Size;
; 346  : 				gbump((int)_Size);

	mov	eax, DWORD PTR [edi+48]
	sub	DWORD PTR [eax], esi
	add	DWORD PTR __Copied$[esp+36], esi
	mov	eax, DWORD PTR [edi+32]
	add	ebx, esi
	sub	ebp, esi
	add	esp, 16					; 00000010H
	add	DWORD PTR [eax], esi
	mov	esi, DWORD PTR __Copied$[esp+20]
	jmp	SHORT $LN1@Xsgetn_s
$LN5@Xsgetn_s:

; 347  : 				}
; 348  : 			else if (_Traits::eq_int_type(_Traits::eof(), _Meta = uflow()))

	mov	eax, DWORD PTR [edi]
	mov	edx, DWORD PTR [eax+20]
	mov	ecx, edi
	call	edx
	cmp	eax, -1
	je	SHORT $LN30@Xsgetn_s

; 349  : 				break;	// end of file, quit
; 350  : 			else
; 351  : 				{	// get a single character
; 352  : 				*_Ptr++ = _Traits::to_char_type(_Meta);
; 353  : 				++_Copied;

	inc	esi
	mov	BYTE PTR [ebx], al
	inc	ebx
	mov	DWORD PTR __Copied$[esp+20], esi

; 354  : 				--_Count;

	dec	ebp
$LN1@Xsgetn_s:

; 333  : 		int_type _Meta;
; 334  : 		streamsize _Stream_size, _Size, _Copied;
; 335  : 
; 336  : 		for (_Copied = 0; 0 < _Count; )

	test	ebp, ebp
	jg	SHORT $LL7@Xsgetn_s
$LN30@Xsgetn_s:
	pop	ebx
	pop	edi

; 355  : 				}
; 356  : 
; 357  : 		return (_Copied);

	mov	eax, esi
	pop	esi
	pop	ebp

; 358  : 		}

	pop	ecx
	ret	12					; 0000000cH
$LN31@Xsgetn_s:
	pop	edi

; 355  : 				}
; 356  : 
; 357  : 		return (_Copied);

	mov	eax, esi
	pop	esi
	pop	ebp

; 358  : 		}

	pop	ecx
	ret	12					; 0000000cH
?_Xsgetn_s@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADIH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Xsgetn_s
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
__Lock$163091 = -4					; size = 4
??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 42   : 		{	// destroy the object

	push	ecx
	push	ebx
	push	ebp
	mov	ebp, ecx

; 43   : 		_DELETE_CRT(_Plocale);

	mov	ebx, DWORD PTR [ebp+56]
	mov	DWORD PTR [ebp], OFFSET ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
	test	ebx, ebx
	je	SHORT $LN3@basic_stre
	push	edi
	mov	edi, DWORD PTR [ebx]
	test	edi, edi
	je	SHORT $LN12@basic_stre
	push	0
	lea	ecx, DWORD PTR __Lock$163091[esp+20]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	eax, DWORD PTR [edi+4]
	test	eax, eax
	jbe	SHORT $LN14@basic_stre
	cmp	eax, -1
	jae	SHORT $LN14@basic_stre
	dec	eax
	mov	DWORD PTR [edi+4], eax
$LN14@basic_stre:
	push	esi
	mov	esi, DWORD PTR [edi+4]
	neg	esi
	sbb	esi, esi
	not	esi
	lea	ecx, DWORD PTR __Lock$163091[esp+20]
	and	esi, edi
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	test	esi, esi
	je	SHORT $LN20@basic_stre
	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	push	1
	mov	ecx, esi
	call	edx
$LN20@basic_stre:
	pop	esi
$LN12@basic_stre:
	push	ebx
	call	DWORD PTR ?RenDelete@@3P6AXPAX@ZA	; RenDelete
	add	esp, 4
	pop	edi
$LN3@basic_stre:

; 44   : 		}

	lea	ecx, DWORD PTR [ebp+4]
	pop	ebp
	pop	ebx
	add	esp, 4
	jmp	??1_Mutex@std@@QAE@XZ			; std::_Mutex::~_Mutex
??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\xiosbase
_TEXT	ENDS
;	COMDAT ?getloc@ios_base@std@@QBE?AVlocale@2@XZ
_TEXT	SEGMENT
__Lock$163115 = -4					; size = 4
?getloc@ios_base@std@@QBE?AVlocale@2@XZ PROC		; std::ios_base::getloc, COMDAT
; _this$ = eax
; ___$ReturnUdt$ = edi

; 430  : 		{	// get locale

	push	ecx

; 431  : 		return (*_Ploc);

	mov	ecx, DWORD PTR [eax+36]
	push	esi
	mov	esi, DWORD PTR [ecx]
	push	0
	lea	ecx, DWORD PTR __Lock$163115[esp+12]
	mov	DWORD PTR [edi], esi
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	eax, DWORD PTR [esi+4]
	cmp	eax, -1
	jae	SHORT $LN5@getloc
	inc	eax
	mov	DWORD PTR [esi+4], eax
$LN5@getloc:
	lea	ecx, DWORD PTR __Lock$163115[esp+8]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	mov	eax, edi
	pop	esi

; 432  : 		}

	pop	ecx
	ret	0
?getloc@ios_base@std@@QBE?AVlocale@2@XZ ENDP		; std::ios_base::getloc
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\xlocale
_TEXT	ENDS
;	COMDAT ??1?$ctype@D@std@@MAE@XZ
_TEXT	SEGMENT
??1?$ctype@D@std@@MAE@XZ PROC				; std::ctype<char>::~ctype<char>, COMDAT
; _this$ = ecx

; 1801 : 		{	// destroy the object

	push	esi
	mov	esi, ecx

; 1802 : 		_Tidy();

	mov	eax, DWORD PTR [esi+20]
	mov	DWORD PTR [esi], OFFSET ??_7?$ctype@D@std@@6B@
	test	eax, eax
	jle	SHORT $LN15@ctype
	mov	eax, DWORD PTR [esi+16]
	push	eax
	call	_free
	add	esp, 4

; 1803 : 		}

	mov	DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
	pop	esi
	ret	0
$LN15@ctype:

; 1802 : 		_Tidy();

	jge	SHORT $LN14@ctype
	mov	ecx, DWORD PTR [esi+16]
	push	ecx
	call	DWORD PTR ?RenVecDelete@@3P6AXPAX@ZA	; RenVecDelete
	add	esp, 4
$LN14@ctype:

; 1803 : 		}

	mov	DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
	pop	esi
	ret	0
??1?$ctype@D@std@@MAE@XZ ENDP				; std::ctype<char>::~ctype<char>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Gctype_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gctype_base@std@@UAEPAXI@Z PROC			; std::ctype_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
	test	BYTE PTR ___flags$[esp-4], 1
	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
	je	SHORT $LN10@scalar@30
	push	esi
	call	DWORD PTR ?RenDelete@@3P6AXPAX@ZA	; RenDelete
	add	esp, 4
$LN10@scalar@30:
	mov	eax, esi
	pop	esi
	ret	4
??_Gctype_base@std@@UAEPAXI@Z ENDP			; std::ctype_base::`scalar deleting destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Gcodecvt_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gcodecvt_base@std@@UAEPAXI@Z PROC			; std::codecvt_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
	test	BYTE PTR ___flags$[esp-4], 1
	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
	je	SHORT $LN10@scalar@31
	push	esi
	call	DWORD PTR ?RenDelete@@3P6AXPAX@ZA	; RenDelete
	add	esp, 4
$LN10@scalar@31:
	mov	eax, esi
	pop	esi
	ret	4
??_Gcodecvt_base@std@@UAEPAXI@Z ENDP			; std::codecvt_base::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??1_Locinfo@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1_Locinfo@std@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1_Locinfo@std@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1_Locinfo@std@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1_Locinfo@std@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1_Locinfo@std@@QAE@XZ$4
__ehfuncinfo$??1_Locinfo@std@@QAE@XZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??1_Locinfo@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\xlocinfo
xdata$x	ENDS
;	COMDAT ??1_Locinfo@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
??1_Locinfo@std@@QAE@XZ PROC				; std::_Locinfo::~_Locinfo, COMDAT

; 101  :         {

	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$??1_Locinfo@std@@QAE@XZ
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ebx
	push	ebp
	push	esi
	mov	esi, DWORD PTR _this$[esp+20]
	push	edi

; 102  :         _Locinfo_dtor(this);

	push	esi
	mov	DWORD PTR __$EHRec$[esp+40], 4
	call	?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z ; std::_Locinfo::_Locinfo_dtor

; 103  :         }

	mov	ebp, 16					; 00000010H
	add	esp, 4
	mov	BYTE PTR __$EHRec$[esp+36], 3
	cmp	DWORD PTR [esi+112], ebp
	jb	SHORT $LN26@Locinfo
	mov	eax, DWORD PTR [esi+92]
	push	eax
	call	DWORD PTR ?RenDelete@@3P6AXPAX@ZA	; RenDelete
	add	esp, 4
$LN26@Locinfo:
	xor	ebx, ebx
	mov	edi, 15					; 0000000fH
	mov	DWORD PTR [esi+112], edi
	mov	DWORD PTR [esi+108], ebx
	mov	BYTE PTR [esi+92], bl
	mov	BYTE PTR __$EHRec$[esp+36], 2
	cmp	DWORD PTR [esi+84], ebp
	jb	SHORT $LN54@Locinfo
	mov	eax, DWORD PTR [esi+64]
	push	eax
	call	DWORD PTR ?RenDelete@@3P6AXPAX@ZA	; RenDelete
	add	esp, 4
$LN54@Locinfo:
	mov	DWORD PTR [esi+84], edi
	mov	DWORD PTR [esi+80], ebx
	mov	BYTE PTR [esi+64], bl
	mov	BYTE PTR __$EHRec$[esp+36], 1
	cmp	DWORD PTR [esi+56], ebp
	jb	SHORT $LN82@Locinfo
	mov	eax, DWORD PTR [esi+36]
	push	eax
	call	DWORD PTR ?RenDelete@@3P6AXPAX@ZA	; RenDelete
	add	esp, 4
$LN82@Locinfo:
	mov	DWORD PTR [esi+56], edi
	mov	DWORD PTR [esi+52], ebx
	mov	BYTE PTR [esi+36], bl
	mov	BYTE PTR __$EHRec$[esp+36], bl
	cmp	DWORD PTR [esi+28], ebp
	jb	SHORT $LN110@Locinfo
	mov	eax, DWORD PTR [esi+8]
	push	eax
	call	DWORD PTR ?RenDelete@@3P6AXPAX@ZA	; RenDelete
	add	esp, 4
$LN110@Locinfo:
	mov	DWORD PTR [esi+28], edi
	mov	DWORD PTR [esi+24], ebx
	mov	ecx, esi
	mov	BYTE PTR [esi+8], bl
	mov	DWORD PTR __$EHRec$[esp+36], -1
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	mov	ecx, DWORD PTR __$EHRec$[esp+28]
	pop	edi
	pop	esi
	pop	ebp
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	add	esp, 12					; 0000000cH
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp-4]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp-4]
	add	ecx, 4
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp-4]
	add	ecx, 32					; 00000020H
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp-4]
	add	ecx, 60					; 0000003cH
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp-4]
	add	ecx, 88					; 00000058H
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??1_Locinfo@std@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??1_Locinfo@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1_Locinfo@std@@QAE@XZ ENDP				; std::_Locinfo::~_Locinfo
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\stdexcept
;	COMDAT ??1runtime_error@std@@UAE@XZ
_TEXT	SEGMENT
??1runtime_error@std@@UAE@XZ PROC			; std::runtime_error::~runtime_error, COMDAT
; _this$ = ecx

; 157  : 		{	// destroy the object

	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@

; 158  : 		}

	cmp	DWORD PTR [esi+36], 16			; 00000010H
	jb	SHORT $LN21@runtime_er
	mov	eax, DWORD PTR [esi+16]
	push	eax
	call	DWORD PTR ?RenDelete@@3P6AXPAX@ZA	; RenDelete
	add	esp, 4
$LN21@runtime_er:
	xor	eax, eax
	mov	DWORD PTR [esi+36], 15			; 0000000fH
	mov	DWORD PTR [esi+32], eax
	mov	BYTE PTR [esi+16], al
	mov	ecx, esi
	pop	esi
	jmp	??1exception@std@@UAE@XZ		; std::exception::~exception
??1runtime_error@std@@UAE@XZ ENDP			; std::runtime_error::~runtime_error
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z
_TEXT	SEGMENT
$T165779 = -20						; size = 8
$T165780 = -12						; size = 8
___$ReturnUdt$ = 8					; size = 4
__Ptr$ = 12						; size = 4
__Count$ = 16						; size = 4
__Kseparator$ = 20					; size = 1
__Dest$ = 24						; size = 8
?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putgrouped, COMDAT

; 1525 : 		{	// put char sequence [_Ptr, _Ptr + _Count) to _Dest with commas

	sub	esp, 20					; 00000014H
	push	ebx
	mov	ebx, DWORD PTR __Count$[esp+20]
	push	ebp
	mov	ebp, DWORD PTR __Ptr$[esp+24]
	push	esi
	push	edi
	npad	1
$LL5@Putgrouped:

; 1526 : 		for (; ; ++_Ptr, --_Count)
; 1527 : 			{	// put field with thousands separators for NULs
; 1528 : 			const char *_Pend =
; 1529 : 				(const char *)::memchr(_Ptr, '\0', _Count);

	push	ebx
	push	0
	push	ebp
	call	_memchr
	add	esp, 12					; 0000000cH

; 1530 : 			size_t _Groupsize = _Pend != 0 ? _Pend - _Ptr : _Count;

	test	eax, eax
	je	SHORT $LN8@Putgrouped
	sub	eax, ebp
	mov	esi, eax
	jmp	SHORT $LN9@Putgrouped
$LN8@Putgrouped:
	mov	esi, ebx
$LN9@Putgrouped:

; 1531 : 
; 1532 : 			_Dest = _Putc(_Dest, _Ptr, _Groupsize);

	mov	eax, DWORD PTR __Dest$[esp+36]
	mov	ecx, DWORD PTR __Dest$[esp+32]
	push	esi
	push	eax
	push	ecx
	lea	edx, DWORD PTR $T165779[esp+48]
	push	edx
	mov	eax, ebp
	call	?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Dest$[esp+48], ecx
	mov	edx, DWORD PTR [eax+4]
	add	esp, 16					; 00000010H

; 1533 : 			_Ptr += _Groupsize, _Count -= _Groupsize;

	add	ebp, esi
	sub	ebx, esi
	mov	DWORD PTR __Dest$[esp+36], edx

; 1534 : 			if (_Count == 0)

	je	SHORT $LN12@Putgrouped

; 1535 : 				break;
; 1536 : 			if (_Kseparator != (_Elem)0)

	mov	ecx, DWORD PTR __Kseparator$[esp+32]
	test	cl, cl
	je	SHORT $LN4@Putgrouped

; 1537 : 				_Dest = _Rep(_Dest, _Kseparator, 1);

	mov	edx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	edx
	mov	eax, 1
	lea	edi, DWORD PTR $T165780[esp+48]
	call	?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Dest$[esp+44], ecx
	mov	edx, DWORD PTR [eax+4]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Dest$[esp+36], edx
$LN4@Putgrouped:
	inc	ebp
	dec	ebx
	jmp	SHORT $LL5@Putgrouped
$LN12@Putgrouped:

; 1538 : 			}
; 1539 : 		return (_Dest);

	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR ___$ReturnUdt$[esp+32]
	mov	eax, DWORD PTR [eax+4]

; 1540 : 		}

	pop	edi
	pop	esi
	pop	ebp
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx], edx
	mov	eax, ecx
	pop	ebx
	add	esp, 20					; 00000014H
	ret	0
?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putgrouped
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\xstring
_TEXT	ENDS
;	COMDAT ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z
_TEXT	SEGMENT
tv188 = 8						; size = 4
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 1
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert, COMDAT
; _this$ = edi
; __Off$ = eax

; 1196 : 		{	// insert _Count * _Ch at _Off

	push	ebp
	mov	ebp, DWORD PTR __Count$[esp]
	push	esi
	mov	esi, eax

; 1197 : 		if (_Mysize < _Off)

	cmp	DWORD PTR [edi+20], esi
	jae	SHORT $LN3@insert

; 1198 : 			_String_base::_Xran();	// _Off off end

	call	?_Xran@_String_base@std@@SAXXZ		; std::_String_base::_Xran
$LN3@insert:

; 1199 : 		if (npos - _Mysize <= _Count)

	or	eax, -1
	sub	eax, DWORD PTR [edi+20]
	cmp	eax, ebp
	ja	SHORT $LN2@insert

; 1200 : 			_String_base::_Xlen();	// result too long

	call	?_Xlen@_String_base@std@@SAXXZ		; std::_String_base::_Xlen
$LN2@insert:

; 1201 : 		size_type _Num;
; 1202 : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

	test	ebp, ebp
	jbe	$LN82@insert
	push	ebx
	mov	ebx, DWORD PTR [edi+20]
	add	ebx, ebp
	cmp	ebx, -2					; fffffffeH
	jbe	SHORT $LN11@insert
	call	?_Xlen@_String_base@std@@SAXXZ		; std::_String_base::_Xlen
$LN11@insert:
	mov	eax, DWORD PTR [edi+24]
	cmp	eax, ebx
	jae	SHORT $LN10@insert
	mov	ecx, DWORD PTR [edi+20]
	push	ecx
	push	ebx
	mov	ecx, edi
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	test	ebx, ebx
$LN85@insert:
	jbe	$LN83@insert

; 1203 : 			{	// make room and insert new stuff
; 1204 : 			_Traits_helper::move_s<_Traits>(_Myptr() + _Off + _Count, _Myres - _Off - _Count,
; 1205 : 				_Myptr() + _Off, _Mysize - _Off);	// empty out hole

	mov	eax, DWORD PTR [edi+24]
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN60@insert
	mov	edx, DWORD PTR [edi+4]
	mov	DWORD PTR tv188[esp+8], edx
	jmp	SHORT $LN61@insert

; 1201 : 		size_type _Num;
; 1202 : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN10@insert:
	test	ebx, ebx
	jne	SHORT $LN85@insert
	mov	DWORD PTR [edi+20], ebx
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN54@insert
	mov	eax, DWORD PTR [edi+4]
	mov	BYTE PTR [eax], bl
	pop	ebx
	pop	esi

; 1208 : 			}
; 1209 : 		return (*this);

	mov	eax, edi
	pop	ebp

; 1210 : 		}

	ret	8

; 1201 : 		size_type _Num;
; 1202 : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN54@insert:
	pop	ebx
	lea	eax, DWORD PTR [edi+4]
	pop	esi
	mov	BYTE PTR [eax], 0

; 1208 : 			}
; 1209 : 		return (*this);

	mov	eax, edi
	pop	ebp

; 1210 : 		}

	ret	8

; 1203 : 			{	// make room and insert new stuff
; 1204 : 			_Traits_helper::move_s<_Traits>(_Myptr() + _Off + _Count, _Myres - _Off - _Count,
; 1205 : 				_Myptr() + _Off, _Mysize - _Off);	// empty out hole

$LN60@insert:
	lea	ecx, DWORD PTR [edi+4]
	mov	DWORD PTR tv188[esp+8], ecx
$LN61@insert:
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN64@insert
	mov	ecx, DWORD PTR [edi+4]
	jmp	SHORT $LN65@insert
$LN64@insert:
	lea	ecx, DWORD PTR [edi+4]
$LN65@insert:
	mov	edx, DWORD PTR [edi+20]
	sub	edx, esi
	push	edx
	mov	edx, DWORD PTR tv188[esp+12]
	add	edx, esi
	sub	eax, esi
	push	edx
	sub	eax, ebp
	add	ecx, esi
	push	eax
	add	ecx, ebp
	push	ecx
	call	_memmove_s

; 1206 : 			_Chassign(_Off, _Count, _Ch);	// fill hole

	mov	dl, BYTE PTR __Ch$[esp+24]
	add	esp, 16					; 00000010H
	push	edi
	mov	ecx, ebp
	call	?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign

; 1207 : 			_Eos(_Num);

	cmp	DWORD PTR [edi+24], 16			; 00000010H
	mov	DWORD PTR [edi+20], ebx
	jb	SHORT $LN78@insert
	mov	eax, DWORD PTR [edi+4]
	mov	BYTE PTR [eax+ebx], 0
	pop	ebx
	pop	esi

; 1208 : 			}
; 1209 : 		return (*this);

	mov	eax, edi
	pop	ebp

; 1210 : 		}

	ret	8

; 1207 : 			_Eos(_Num);

$LN78@insert:
	lea	eax, DWORD PTR [edi+4]
	mov	BYTE PTR [eax+ebx], 0
$LN83@insert:
	pop	ebx
$LN82@insert:
	pop	esi

; 1208 : 			}
; 1209 : 		return (*this);

	mov	eax, edi
	pop	ebp

; 1210 : 		}

	ret	8
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\sstream
_TEXT	ENDS
;	COMDAT ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 42   : 		{	// destroy the object

	push	esi
	mov	esi, ecx

; 43   : 		_Tidy();

	test	BYTE PTR [esi+64], 1
	mov	DWORD PTR [esi], OFFSET ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
	je	SHORT $LN21@basic_stri@2
	mov	eax, DWORD PTR [esi+16]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR ?RenDelete@@3P6AXPAX@ZA	; RenDelete
	add	esp, 4
$LN21@basic_stri@2:
	mov	edx, DWORD PTR [esi+16]
	mov	DWORD PTR [edx], 0
	mov	eax, DWORD PTR [esi+32]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR [esi+48]
	mov	DWORD PTR [ecx], 0
	mov	edx, DWORD PTR [esi+20]
	mov	DWORD PTR [edx], 0
	mov	eax, DWORD PTR [esi+36]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR [esi+52]
	mov	DWORD PTR [ecx], 0
	and	DWORD PTR [esi+64], -2			; fffffffeH
	mov	DWORD PTR [esi+60], 0

; 44   : 		}

	mov	ecx, esi
	pop	esi
	jmp	??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 9.0\vc\include\istream
xdata$x	SEGMENT
__unwindtable$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ$0
__ehfuncinfo$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\sstream
xdata$x	ENDS
;	COMDAT ??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 495  : 		{	// destroy the object

	push	-1
	push	__ehhandler$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	mov	eax, DWORD PTR [ecx-84]
	mov	edx, DWORD PTR [eax+4]
	push	esi
	mov	DWORD PTR _this$[esp+20], ecx
	mov	DWORD PTR [edx+ecx-84], OFFSET ??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@

; 496  : 		}

	lea	esi, DWORD PTR [ecx-72]
	mov	ecx, esi
	mov	DWORD PTR __$EHRec$[esp+28], 0
	call	??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR [esi-12]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+esi-12], OFFSET ??_7?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@
	mov	edx, DWORD PTR [esi-4]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+esi-4], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
	mov	ecx, DWORD PTR [esi-12]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR __$EHRec$[esp+20]
	mov	DWORD PTR [edx+esi-12], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
	pop	esi
	mov	DWORD PTR fs:0, ecx
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 72					; 00000048H
	jmp	??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_iostream<char,std::char_traits<char> >::~basic_iostream<char,std::char_traits<char> >
__ehhandler$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ENDP ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
_TEXT	SEGMENT
??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbase destructor', COMDAT
; _this$ = eax
	push	esi
	mov	esi, eax
	add	esi, 84					; 00000054H
	mov	ecx, esi
	call	??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
	push	esi
	mov	DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
	call	?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
	add	esp, 4
	pop	esi
	ret	0
??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ENDP ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbase destructor'
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\xstring
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z
_TEXT	SEGMENT
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = esi

; 1090 : 		if (_Count == npos)
; 1091 : 			_String_base::_Xlen();	// result too long
; 1092 : 
; 1093 : 		if (_Grow(_Count))

	cmp	DWORD PTR [esi+24], 8
	jae	SHORT $LN81@assign@2
	mov	eax, DWORD PTR [esi+20]
	push	eax
	push	8
	mov	ecx, esi
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
$LN81@assign@2:

; 1094 : 			{	// make room and assign new stuff
; 1095 : 			_Chassign(0, _Count, _Ch);

	cmp	DWORD PTR [esi+24], 16			; 00000010H
	lea	edx, DWORD PTR [esi+4]
	jb	SHORT $LN69@assign@2
	mov	ecx, DWORD PTR [edx]
	jmp	SHORT $LN70@assign@2
$LN69@assign@2:
	mov	ecx, edx
$LN70@assign@2:
	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax

; 1096 : 			_Eos(_Count);

	cmp	DWORD PTR [esi+24], 16			; 00000010H
	mov	DWORD PTR [esi+20], 8
	jb	SHORT $LN77@assign@2
	mov	edx, DWORD PTR [edx]
$LN77@assign@2:
	mov	BYTE PTR [edx+8], al

; 1097 : 			}
; 1098 : 		return (*this);

	mov	eax, esi

; 1099 : 		}

	ret	0
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = esi

; 951  : 		{	// append _Right [_Roff, _Roff + _Count)

	push	ebx
	mov	ebx, DWORD PTR __Count$[esp]
	push	ebp
	mov	ebp, DWORD PTR __Right$[esp+4]
	push	edi

; 952  : 		if (_Right.size() < _Roff)

	mov	edi, DWORD PTR __Roff$[esp+8]
	cmp	DWORD PTR [ebp+20], edi
	jae	SHORT $LN5@append

; 953  : 			_String_base::_Xran();	// _Roff off end

	call	?_Xran@_String_base@std@@SAXXZ		; std::_String_base::_Xran
$LN5@append:

; 954  : 		size_type _Num = _Right.size() - _Roff;

	mov	eax, DWORD PTR [ebp+20]
	sub	eax, edi

; 955  : 		if (_Num < _Count)

	cmp	eax, ebx
	jae	SHORT $LN4@append

; 956  : 			_Count = _Num;	// trim _Count to size

	mov	ebx, eax
$LN4@append:

; 957  : 		if (npos - _Mysize <= _Count || _Mysize + _Count < _Mysize)

	mov	eax, DWORD PTR [esi+20]
	or	ecx, -1
	sub	ecx, eax
	cmp	ecx, ebx
	jbe	SHORT $LN2@append
	lea	edx, DWORD PTR [eax+ebx]
	cmp	edx, eax
	jae	SHORT $LN3@append
$LN2@append:

; 958  : 			_String_base::_Xlen();	// result too long

	call	?_Xlen@_String_base@std@@SAXXZ		; std::_String_base::_Xlen
$LN3@append:

; 959  : 
; 960  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

	test	ebx, ebx
	jbe	$LN89@append
	mov	edi, DWORD PTR [esi+20]
	add	edi, ebx
	cmp	edi, -2					; fffffffeH
	jbe	SHORT $LN17@append
	call	?_Xlen@_String_base@std@@SAXXZ		; std::_String_base::_Xlen
$LN17@append:
	mov	eax, DWORD PTR [esi+24]
	cmp	eax, edi
	jae	SHORT $LN16@append
	mov	eax, DWORD PTR [esi+20]
	push	eax
	push	edi
	mov	ecx, esi
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	test	edi, edi
$LN90@append:
	jbe	SHORT $LN89@append

; 961  : 			{	// make room and append new stuff
; 962  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize,
; 963  : 				_Right._Myptr() + _Roff, _Count);

	cmp	DWORD PTR [ebp+24], 16			; 00000010H
	jb	SHORT $LN66@append
	mov	ebp, DWORD PTR [ebp+4]
	jmp	SHORT $LN67@append

; 959  : 
; 960  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN16@append:
	test	edi, edi
	jne	SHORT $LN90@append
	mov	DWORD PTR [esi+20], edi
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN60@append
	mov	eax, DWORD PTR [esi+4]
	pop	edi
	pop	ebp
	mov	BYTE PTR [eax], 0

; 965  : 			}
; 966  : 		return (*this);

	mov	eax, esi
	pop	ebx

; 967  : 		}

	ret	12					; 0000000cH

; 959  : 
; 960  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN60@append:
	pop	edi
	lea	eax, DWORD PTR [esi+4]
	pop	ebp
	mov	BYTE PTR [eax], 0

; 965  : 			}
; 966  : 		return (*this);

	mov	eax, esi
	pop	ebx

; 967  : 		}

	ret	12					; 0000000cH

; 961  : 			{	// make room and append new stuff
; 962  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize,
; 963  : 				_Right._Myptr() + _Roff, _Count);

$LN66@append:
	add	ebp, 4
$LN67@append:
	mov	eax, DWORD PTR [esi+24]
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN70@append
	mov	edx, DWORD PTR [esi+4]
	jmp	SHORT $LN71@append
$LN70@append:
	lea	edx, DWORD PTR [esi+4]
$LN71@append:
	mov	ecx, DWORD PTR [esi+20]
	push	ebx
	mov	ebx, DWORD PTR __Roff$[esp+12]
	add	ebp, ebx
	sub	eax, ecx
	push	ebp
	push	eax
	add	ecx, edx
	push	ecx
	call	_memcpy_s
	add	esp, 16					; 00000010H

; 964  : 			_Eos(_Num);

	cmp	DWORD PTR [esi+24], 16			; 00000010H
	mov	DWORD PTR [esi+20], edi
	jb	SHORT $LN84@append
	mov	eax, DWORD PTR [esi+4]
	mov	BYTE PTR [eax+edi], 0
	pop	edi
	pop	ebp

; 965  : 			}
; 966  : 		return (*this);

	mov	eax, esi
	pop	ebx

; 967  : 		}

	ret	12					; 0000000cH

; 964  : 			_Eos(_Num);

$LN84@append:
	lea	eax, DWORD PTR [esi+4]
	mov	BYTE PTR [eax+edi], 0
$LN89@append:
	pop	edi
	pop	ebp

; 965  : 			}
; 966  : 		return (*this);

	mov	eax, esi
	pop	ebx

; 967  : 		}

	ret	12					; 0000000cH
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$codecvt@DDH@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$codecvt@DDH@std@@MAEPAXI@Z PROC			; std::codecvt<char,char,int>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	test	BYTE PTR ___flags$[esp-4], 1
	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
	je	SHORT $LN12@scalar@32
	push	esi
	call	DWORD PTR ?RenDelete@@3P6AXPAX@ZA	; RenDelete
	add	esp, 4
$LN12@scalar@32:
	mov	eax, esi
	pop	esi
	ret	4
??_G?$codecvt@DDH@std@@MAEPAXI@Z ENDP			; std::codecvt<char,char,int>::`scalar deleting destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx
; __Right$ = eax

; 1041 : 		return (assign(_Right, 0, npos));

	push	-1
	push	0
	push	eax
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1042 : 		}

	ret	0
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = edi
; __Count$ = eax

; 998  : 		{	// append _Count * _Ch

	push	esi
	mov	esi, eax

; 999  : 			if (npos - _Mysize <= _Count)

	or	eax, -1
	sub	eax, DWORD PTR [edi+20]
	cmp	eax, esi
	ja	SHORT $LN2@append@2

; 1000 : 			_String_base::_Xlen();	// result too long

	call	?_Xlen@_String_base@std@@SAXXZ		; std::_String_base::_Xlen
$LN2@append@2:

; 1001 : 
; 1002 : 		size_type _Num;
; 1003 : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

	test	esi, esi
	jbe	SHORT $LN65@append@2
	push	ebx
	mov	ebx, DWORD PTR [edi+20]
	add	ebx, esi
	cmp	ebx, -2					; fffffffeH
	jbe	SHORT $LN10@append@2
	call	?_Xlen@_String_base@std@@SAXXZ		; std::_String_base::_Xlen
$LN10@append@2:
	mov	eax, DWORD PTR [edi+24]
	cmp	eax, ebx
	jae	SHORT $LN9@append@2
	mov	ecx, DWORD PTR [edi+20]
	push	ecx
	push	ebx
	mov	ecx, edi
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	test	ebx, ebx
$LN68@append@2:
	jbe	SHORT $LN66@append@2

; 1004 : 			{	// make room and append new stuff using assign
; 1005 : 			_Chassign(_Mysize, _Count, _Ch);

	mov	dl, BYTE PTR __Ch$[esp+4]
	mov	ecx, esi
	mov	esi, DWORD PTR [edi+20]
	push	edi
	call	?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign

; 1006 : 			_Eos(_Num);

	cmp	DWORD PTR [edi+24], 16			; 00000010H
	mov	DWORD PTR [edi+20], ebx
	jb	SHORT $LN61@append@2
	mov	eax, DWORD PTR [edi+4]
	mov	BYTE PTR [eax+ebx], 0
	pop	ebx

; 1007 : 			}
; 1008 : 		return (*this);

	mov	eax, edi
	pop	esi

; 1009 : 		}

	ret	4

; 1001 : 
; 1002 : 		size_type _Num;
; 1003 : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN9@append@2:
	test	ebx, ebx
	jne	SHORT $LN68@append@2
	mov	DWORD PTR [edi+20], ebx
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN53@append@2
	mov	eax, DWORD PTR [edi+4]
	mov	BYTE PTR [eax], bl
	pop	ebx

; 1007 : 			}
; 1008 : 		return (*this);

	mov	eax, edi
	pop	esi

; 1009 : 		}

	ret	4

; 1001 : 
; 1002 : 		size_type _Num;
; 1003 : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN53@append@2:
	lea	eax, DWORD PTR [edi+4]
	pop	ebx
	mov	BYTE PTR [eax], 0

; 1007 : 			}
; 1008 : 		return (*this);

	mov	eax, edi
	pop	esi

; 1009 : 		}

	ret	4

; 1006 : 			_Eos(_Num);

$LN61@append@2:
	lea	eax, DWORD PTR [edi+4]
	mov	BYTE PTR [eax+ebx], 0
$LN66@append@2:
	pop	ebx
$LN65@append@2:

; 1007 : 			}
; 1008 : 		return (*this);

	mov	eax, edi
	pop	esi

; 1009 : 		}

	ret	4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z
_TEXT	SEGMENT
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = esi

; 665  : 		{	// construct from _Count * _Ch

	push	edi

; 666  : 		_Tidy();

	mov	DWORD PTR [esi+24], 15			; 0000000fH
	lea	edi, DWORD PTR [esi+4]
	mov	DWORD PTR [esi+20], 0
	mov	BYTE PTR [edi], 0

; 667  : 		assign(_Count, _Ch);

	cmp	DWORD PTR [esi+24], 8
	jae	SHORT $LN115@basic_stri@3
	mov	eax, DWORD PTR [esi+20]
	push	eax
	push	8
	mov	ecx, esi
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
$LN115@basic_stri@3:
	mov	edx, 16					; 00000010H
	cmp	DWORD PTR [esi+24], edx
	jb	SHORT $LN103@basic_stri@3
	mov	ecx, DWORD PTR [edi]
	jmp	SHORT $LN104@basic_stri@3
$LN103@basic_stri@3:
	mov	ecx, edi
$LN104@basic_stri@3:
	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [esi+20], 8

; 668  : 		}

	mov	eax, esi
	cmp	DWORD PTR [esi+24], edx
	jb	SHORT $LN111@basic_stri@3

; 667  : 		assign(_Count, _Ch);

	mov	edi, DWORD PTR [edi]
$LN111@basic_stri@3:
	mov	BYTE PTR [edi+8], 0
	pop	edi

; 668  : 		}

	ret	0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	call	??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $LN6@scalar@33
	push	esi
	call	DWORD PTR ?RenDelete@@3P6AXPAX@ZA	; RenDelete
	add	esp, 4
$LN6@scalar@33:
	mov	eax, esi
	pop	esi
	ret	4
??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$0
__ehfuncinfo$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\fstream
xdata$x	ENDS
;	COMDAT ?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
__Ch$136446 = -73					; size = 1
_this$ = -72						; size = 4
__Src$136448 = -68					; size = 4
__Dest$136447 = -64					; size = 4
$T167376 = -60						; size = 8
$T167373 = -52						; size = 8
__Str$136442 = -44					; size = 28
__$EHRec$ = -12						; size = 12
?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::uflow, COMDAT
; _this$ = ecx

; 325  : 		{	// get an element from stream, point past it

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	push	-1
	push	__ehhandler$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	ebp, ecx

; 326  : 		if (_Mysb::gptr() != 0
; 327  : 			&& _Mysb::gptr() < _Mysb::egptr())

	mov	eax, DWORD PTR [ebp+32]
	mov	eax, DWORD PTR [eax]
	xor	edi, edi
	mov	DWORD PTR _this$[esp+96], ebp
	cmp	eax, edi
	je	SHORT $LN19@uflow@2
	mov	ecx, DWORD PTR [ebp+32]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ebp+48]
	mov	ecx, DWORD PTR [edx]
	add	ecx, eax
	cmp	eax, ecx
	jae	SHORT $LN19@uflow@2

; 328  : 			return (_Traits::to_int_type(
; 329  : 				*_Mysb::_Gninc()));	// return buffered

	mov	eax, edx
	dec	DWORD PTR [eax]
	mov	eax, DWORD PTR [ebp+32]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR [ecx+1]
	mov	DWORD PTR [eax], edx
	movzx	eax, BYTE PTR [ecx]

; 381  : 					}
; 382  : 				}
; 383  : 			}
; 384  : 		}

	mov	ecx, DWORD PTR __$EHRec$[esp+96]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN19@uflow@2:

; 330  : 		else if (_Myfile == 0)

	mov	eax, DWORD PTR [ebp+76]
	cmp	eax, edi

; 331  : 			return (_Traits::eof());	// no open C stream, fail

	je	SHORT $LN303@uflow@2

; 332  : 		else if (_Pcvt == 0)

	cmp	DWORD PTR [ebp+60], edi
	jne	SHORT $LN15@uflow@2

; 333  : 			{	// no codecvt facet, just get it
; 334  : 			_Elem _Ch;
; 335  : 			return (_Fgetc(_Ch, _Myfile) ? _Traits::to_int_type(_Ch)
; 336  : 				: _Traits::eof());

	push	eax
	call	_fgetc
	add	esp, 4
	cmp	eax, -1
	je	SHORT $LN303@uflow@2
	movzx	eax, al

; 381  : 					}
; 382  : 				}
; 383  : 			}
; 384  : 		}

	mov	ecx, DWORD PTR __$EHRec$[esp+96]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN15@uflow@2:

; 337  : 			}
; 338  : 		else
; 339  : 			{	// build string until codecvt succeeds
; 340  : 			string _Str;

	mov	DWORD PTR __Str$136442[esp+120], 15	; 0000000fH
	mov	DWORD PTR __Str$136442[esp+116], edi
	mov	BYTE PTR __Str$136442[esp+100], 0

; 341  : 
; 342  : 			for (; ; )
; 343  : 				{	// get using codecvt facet
; 344  : 				_Elem _Ch, *_Dest;
; 345  : 				const char *_Src;
; 346  : 				ptrdiff_t _Nleft;
; 347  : 				int _Meta = fgetc(_Myfile);

	push	eax
	mov	DWORD PTR __$EHRec$[esp+108], edi
	call	_fgetc
	mov	ebx, eax
	add	esp, 4

; 348  : 
; 349  : 				if (_Meta == EOF)

	cmp	ebx, -1
	jne	SHORT $LN13@uflow@2
$LN1@uflow@2:

; 378  : 
; 379  : 				default:
; 380  : 					return (_Traits::eof());	// conversion failed

	lea	ecx, DWORD PTR __Str$136442[esp+96]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN303@uflow@2:
	or	eax, -1

; 381  : 					}
; 382  : 				}
; 383  : 			}
; 384  : 		}

	mov	ecx, DWORD PTR __$EHRec$[esp+96]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	5
$LL298@uflow@2:

; 348  : 
; 349  : 				if (_Meta == EOF)

	xor	edi, edi
$LN13@uflow@2:

; 351  : 
; 352  : 				_Str.append(1, (char)_Meta);	// append byte and convert

	or	eax, -1
	sub	eax, DWORD PTR __Str$136442[esp+116]
	cmp	eax, 1
	ja	SHORT $LN82@uflow@2
	call	?_Xlen@_String_base@std@@SAXXZ		; std::_String_base::_Xlen
$LN82@uflow@2:
	mov	esi, DWORD PTR __Str$136442[esp+116]
	inc	esi
	cmp	esi, -2					; fffffffeH
	jbe	SHORT $LN90@uflow@2
	call	?_Xlen@_String_base@std@@SAXXZ		; std::_String_base::_Xlen
$LN90@uflow@2:
	mov	edx, DWORD PTR __Str$136442[esp+120]
	cmp	edx, esi
	jae	$LN89@uflow@2
	mov	ecx, DWORD PTR __Str$136442[esp+116]
	push	ecx
	push	esi
	lea	ecx, DWORD PTR __Str$136442[esp+104]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	mov	edx, DWORD PTR __Str$136442[esp+120]
	cmp	esi, edi
$LN304@uflow@2:
	jbe	SHORT $LN159@uflow@2
	mov	eax, DWORD PTR __Str$136442[esp+100]
	cmp	edx, 16					; 00000010H
	jae	SHORT $LN144@uflow@2
	lea	eax, DWORD PTR __Str$136442[esp+100]
$LN144@uflow@2:
	mov	edx, DWORD PTR __Str$136442[esp+116]
	mov	BYTE PTR [eax+edx], bl
	cmp	DWORD PTR __Str$136442[esp+120], 16	; 00000010H
	mov	eax, DWORD PTR __Str$136442[esp+100]
	mov	DWORD PTR __Str$136442[esp+116], esi
	jae	SHORT $LN158@uflow@2
	lea	eax, DWORD PTR __Str$136442[esp+100]
$LN158@uflow@2:
	mov	BYTE PTR [eax+esi], 0
$LN305@uflow@2:
	mov	edx, DWORD PTR __Str$136442[esp+120]
$LN159@uflow@2:

; 353  : 				switch (_Pcvt->in(_State,
; 354  : 					&*_Str.begin(), &*_Str.begin() + _Str.size(), _Src,
; 355  : 					&_Ch, &_Ch + 1, _Dest))

	mov	eax, DWORD PTR __Str$136442[esp+100]
	cmp	edx, 16					; 00000010H
	jb	$LN165@uflow@2
	mov	ebx, eax
	cmp	eax, edi
	je	SHORT $LN169@uflow@2
$LN293@uflow@2:
	mov	ecx, eax
	cmp	edx, 16					; 00000010H
	jae	SHORT $LN180@uflow@2
	lea	ecx, DWORD PTR __Str$136442[esp+100]
$LN180@uflow@2:
	cmp	ecx, ebx
	ja	SHORT $LN169@uflow@2
	mov	ecx, eax
	cmp	edx, 16					; 00000010H
	jae	SHORT $LN184@uflow@2
	lea	ecx, DWORD PTR __Str$136442[esp+100]
$LN184@uflow@2:
	mov	esi, DWORD PTR __Str$136442[esp+116]
	add	ecx, esi
	cmp	ebx, ecx
	jbe	SHORT $LN170@uflow@2
$LN169@uflow@2:
	call	__invalid_parameter_noinfo
	mov	edx, DWORD PTR __Str$136442[esp+120]
	mov	eax, DWORD PTR __Str$136442[esp+100]
$LN170@uflow@2:
	lea	ecx, DWORD PTR __Str$136442[esp+96]
	cmp	ecx, -4					; fffffffcH
	je	SHORT $LN187@uflow@2
	mov	ecx, eax
	cmp	edx, 16					; 00000010H
	jae	SHORT $LN197@uflow@2
	lea	ecx, DWORD PTR __Str$136442[esp+100]
$LN197@uflow@2:
	mov	esi, DWORD PTR __Str$136442[esp+116]
	add	ecx, esi
	cmp	ebx, ecx
	jb	SHORT $LN187@uflow@2
	call	__invalid_parameter_noinfo
	mov	edx, DWORD PTR __Str$136442[esp+120]
	mov	eax, DWORD PTR __Str$136442[esp+100]
$LN187@uflow@2:
	mov	edi, DWORD PTR __Str$136442[esp+116]
	cmp	edx, 16					; 00000010H
	jb	$LN204@uflow@2
	mov	esi, eax
	test	eax, eax
	je	SHORT $LN208@uflow@2
$LN294@uflow@2:
	mov	ecx, eax
	cmp	edx, 16					; 00000010H
	jae	SHORT $LN219@uflow@2
	lea	ecx, DWORD PTR __Str$136442[esp+100]
$LN219@uflow@2:
	cmp	ecx, esi
	ja	SHORT $LN208@uflow@2
	mov	ecx, eax
	cmp	edx, 16					; 00000010H
	jae	SHORT $LN223@uflow@2
	lea	ecx, DWORD PTR __Str$136442[esp+100]
$LN223@uflow@2:
	mov	ebp, DWORD PTR __Str$136442[esp+116]
	add	ecx, ebp
	mov	ebp, DWORD PTR _this$[esp+96]
	cmp	esi, ecx
	jbe	SHORT $LN209@uflow@2
$LN208@uflow@2:
	call	__invalid_parameter_noinfo
	mov	edx, DWORD PTR __Str$136442[esp+120]
	mov	eax, DWORD PTR __Str$136442[esp+100]
$LN209@uflow@2:
	lea	ecx, DWORD PTR __Str$136442[esp+96]
	cmp	ecx, -4					; fffffffcH
	je	SHORT $LN226@uflow@2
	cmp	edx, 16					; 00000010H
	jae	SHORT $LN236@uflow@2
	lea	eax, DWORD PTR __Str$136442[esp+100]
$LN236@uflow@2:
	mov	edx, DWORD PTR __Str$136442[esp+116]
	add	eax, edx
	cmp	esi, eax
	jb	SHORT $LN226@uflow@2
	call	__invalid_parameter_noinfo
$LN226@uflow@2:
	mov	ecx, DWORD PTR [ebp+60]
	mov	edx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [edx+16]
	lea	eax, DWORD PTR __Dest$136447[esp+96]
	push	eax
	lea	eax, DWORD PTR __Ch$136446[esp+101]
	push	eax
	lea	eax, DWORD PTR __Ch$136446[esp+104]
	push	eax
	lea	eax, DWORD PTR __Src$136448[esp+108]
	push	eax
	add	ebx, edi
	push	ebx
	push	esi
	lea	eax, DWORD PTR [ebp+68]
	push	eax
	call	edx
	test	eax, eax
	jl	$LN1@uflow@2
	cmp	eax, 1
	jle	$LN8@uflow@2
	cmp	eax, 3
	jne	$LN1@uflow@2

; 369  : 					break;
; 370  : 
; 371  : 				case codecvt_base::noconv:
; 372  : 					if (_Str.size() < sizeof (_Elem))

	cmp	DWORD PTR __Str$136442[esp+116], 1
	jb	$LN4@uflow@2

; 373  : 						break;	// no conversion, but need more chars
; 374  : 
; 375  : 					_CRT_SECURE_MEMCPY(&_Ch,sizeof (_Elem), &*_Str.begin(),

	push	1
	lea	edx, DWORD PTR $T167376[esp+100]
	push	edx
	lea	edi, DWORD PTR __Str$136442[esp+104]
	call	?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
	mov	esi, eax
	call	??D?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEAADXZ ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator*
	push	eax
	lea	eax, DWORD PTR __Ch$136446[esp+104]
	push	1
	push	eax
	call	_memcpy_s

; 376  : 						sizeof (_Elem));	// copy raw bytes to element
; 377  : 					return (_Traits::to_int_type(_Ch));	// return result

	movzx	esi, BYTE PTR __Ch$136446[esp+112]
	add	esp, 16					; 00000010H
	mov	ecx, edi
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, esi

; 381  : 					}
; 382  : 				}
; 383  : 			}
; 384  : 		}

	mov	ecx, DWORD PTR __$EHRec$[esp+96]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0

; 351  : 
; 352  : 				_Str.append(1, (char)_Meta);	// append byte and convert

$LN89@uflow@2:
	cmp	esi, edi
	jne	$LN304@uflow@2
	mov	eax, DWORD PTR __Str$136442[esp+100]
	mov	DWORD PTR __Str$136442[esp+116], edi
	cmp	edx, 16					; 00000010H
	jae	SHORT $LN134@uflow@2
	lea	eax, DWORD PTR __Str$136442[esp+100]
$LN134@uflow@2:
	mov	BYTE PTR [eax], 0
	jmp	$LN305@uflow@2

; 353  : 				switch (_Pcvt->in(_State,
; 354  : 					&*_Str.begin(), &*_Str.begin() + _Str.size(), _Src,
; 355  : 					&_Ch, &_Ch + 1, _Dest))

$LN165@uflow@2:
	lea	ebx, DWORD PTR __Str$136442[esp+100]
	jmp	$LN293@uflow@2
$LN204@uflow@2:
	lea	esi, DWORD PTR __Str$136442[esp+100]
	jmp	$LN294@uflow@2
$LN8@uflow@2:

; 356  : 					{	// test result of converting one element
; 357  : 				case codecvt_base::partial:
; 358  : 				case codecvt_base::ok:
; 359  : 					if (_Dest != &_Ch)

	lea	eax, DWORD PTR __Ch$136446[esp+96]
	cmp	DWORD PTR __Dest$136447[esp+96], eax
	jne	$LN290@uflow@2

; 365  : 						}
; 366  : 					else
; 367  : 						_Str.erase((size_t)0,	// partial, discard used input
; 368  : 							(size_t)(_Src - &*_Str.begin()));

	mov	edx, DWORD PTR __Str$136442[esp+120]
	mov	eax, DWORD PTR __Str$136442[esp+100]
	cmp	edx, 16					; 00000010H
	jb	$LN247@uflow@2
	mov	esi, eax
	test	eax, eax
	je	SHORT $LN251@uflow@2
$LN295@uflow@2:
	mov	ecx, eax
	cmp	edx, 16					; 00000010H
	jae	SHORT $LN262@uflow@2
	lea	ecx, DWORD PTR __Str$136442[esp+100]
$LN262@uflow@2:
	cmp	ecx, esi
	ja	SHORT $LN251@uflow@2
	mov	ecx, eax
	cmp	edx, 16					; 00000010H
	jae	SHORT $LN266@uflow@2
	lea	ecx, DWORD PTR __Str$136442[esp+100]
$LN266@uflow@2:
	mov	edi, DWORD PTR __Str$136442[esp+116]
	add	ecx, edi
	cmp	esi, ecx
	jbe	SHORT $LN252@uflow@2
$LN251@uflow@2:
	call	__invalid_parameter_noinfo
	mov	edx, DWORD PTR __Str$136442[esp+120]
	mov	eax, DWORD PTR __Str$136442[esp+100]
$LN252@uflow@2:
	lea	ecx, DWORD PTR __Str$136442[esp+96]
	cmp	ecx, -4					; fffffffcH
	je	SHORT $LN269@uflow@2
	cmp	edx, 16					; 00000010H
	jae	SHORT $LN279@uflow@2
	lea	eax, DWORD PTR __Str$136442[esp+100]
$LN279@uflow@2:
	mov	edx, DWORD PTR __Str$136442[esp+116]
	add	eax, edx
	cmp	esi, eax
	jb	SHORT $LN269@uflow@2
	call	__invalid_parameter_noinfo
$LN269@uflow@2:
	mov	eax, DWORD PTR __Src$136448[esp+96]
	sub	eax, esi
	push	eax
	push	0
	lea	ecx, DWORD PTR __Str$136442[esp+104]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
$LN4@uflow@2:
	mov	ecx, DWORD PTR [ebp+76]
	push	ecx
	call	_fgetc
	mov	ebx, eax
	add	esp, 4
	cmp	ebx, -1
	jne	$LL298@uflow@2

; 350  : 					return (_Traits::eof());	// partial char?

	jmp	$LN1@uflow@2

; 365  : 						}
; 366  : 					else
; 367  : 						_Str.erase((size_t)0,	// partial, discard used input
; 368  : 							(size_t)(_Src - &*_Str.begin()));

$LN247@uflow@2:
	lea	esi, DWORD PTR __Str$136442[esp+100]
	jmp	$LN295@uflow@2
$LN290@uflow@2:

; 360  : 						{	// got an element, put back excess and deliver it
; 361  : 						_Nleft = (int)(&*_Str.begin() + _Str.size() - _Src);

	mov	ebp, DWORD PTR __Str$136442[esp+116]
	lea	ecx, DWORD PTR $T167373[esp+96]
	push	ecx
	lea	edi, DWORD PTR __Str$136442[esp+100]
	call	?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
	mov	esi, eax
	call	??D?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEAADXZ ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator*
	sub	ebp, DWORD PTR __Src$136448[esp+96]
	mov	esi, eax
	add	esi, ebp

; 362  : 						for (; 0 < _Nleft; )

	test	esi, esi
	jle	SHORT $LN5@uflow@2
	mov	edi, DWORD PTR _this$[esp+96]
$LN6@uflow@2:

; 363  : 							ungetc(_Src[--_Nleft], _Myfile);

	mov	eax, DWORD PTR __Src$136448[esp+96]
	mov	edx, DWORD PTR [edi+76]
	movsx	ecx, BYTE PTR [esi+eax-1]
	dec	esi
	push	edx
	push	ecx
	call	_ungetc
	add	esp, 8
	test	esi, esi
	jg	SHORT $LN6@uflow@2
$LN5@uflow@2:

; 364  : 						return (_Traits::to_int_type(_Ch));

	movzx	esi, BYTE PTR __Ch$136446[esp+96]
	lea	ecx, DWORD PTR __Str$136442[esp+96]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 381  : 					}
; 382  : 				}
; 383  : 			}
; 384  : 		}

	mov	ecx, DWORD PTR __$EHRec$[esp+96]
	pop	edi
	mov	eax, esi
	mov	DWORD PTR fs:0, ecx
	pop	esi
	pop	ebp
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$0:
	lea	ecx, DWORD PTR __Str$136442[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ:
	mov	eax, OFFSET __ehfuncinfo$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::uflow
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$0
__ehfuncinfo$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\fstream
xdata$x	ENDS
;	COMDAT ?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
_TEXT	SEGMENT
__Ch$136295 = -61					; size = 1
_this$ = -60						; size = 4
$T168475 = -56						; size = 4
__Dest$136297 = -52					; size = 4
__Src$136296 = -48					; size = 4
__Str$136298 = -44					; size = 28
__$EHRec$ = -12						; size = 12
__Meta$ = 8						; size = 4
?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::overflow, COMDAT
; _this$ = ecx

; 222  : 		{	// put an element to stream

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	push	-1
	push	__ehhandler$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 56					; 00000038H
	push	ebx

; 223  : 		if (_Traits::eq_int_type(_Traits::eof(), _Meta))

	mov	ebx, DWORD PTR __Meta$[ebp]
	push	esi
	mov	edx, ecx
	push	edi
	mov	DWORD PTR _this$[esp+80], edx
	cmp	ebx, -1
	jne	SHORT $LN21@overflow@2

; 224  : 			return (_Traits::not_eof(_Meta));	// EOF, return success code

	xor	eax, eax

; 277  : 			}
; 278  : 		}

	mov	ecx, DWORD PTR __$EHRec$[esp+80]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
$LN21@overflow@2:

; 225  : 		else if (_Mysb::pptr() != 0
; 226  : 			&& _Mysb::pptr() < _Mysb::epptr())

	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [eax]
	test	ecx, ecx
	je	SHORT $LN19@overflow@2
	mov	eax, DWORD PTR [edx+52]
	mov	esi, DWORD PTR [eax]
	add	esi, ecx
	cmp	ecx, esi
	jae	SHORT $LN19@overflow@2

; 227  : 			{	// room in buffer, store it
; 228  : 			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

	dec	DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR [ecx+1]
	mov	DWORD PTR [eax], edx
	mov	BYTE PTR [ecx], bl

; 229  : 			return (_Meta);

	mov	eax, ebx

; 277  : 			}
; 278  : 		}

	mov	ecx, DWORD PTR __$EHRec$[esp+80]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
$LN19@overflow@2:

; 230  : 			}
; 231  : 		else if (_Myfile == 0)

	mov	eax, DWORD PTR [edx+76]
	test	eax, eax

; 232  : 			return (_Traits::eof());	// no open C stream, fail

	je	$LN238@overflow@2

; 233  : 		else if (_Pcvt == 0)

	cmp	DWORD PTR [edx+60], 0
	jne	SHORT $LN15@overflow@2

; 234  : 			return (_Fputc(_Traits::to_char_type(_Meta), _Myfile)
; 235  : 				? _Meta : _Traits::eof());	// no codecvt facet, put as is

	push	eax
	movsx	eax, bl
	push	eax
	call	_fputc
	add	esp, 8
	cmp	eax, -1
	je	$LN238@overflow@2
	mov	eax, ebx

; 277  : 			}
; 278  : 		}

	mov	ecx, DWORD PTR __$EHRec$[esp+80]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
$LN15@overflow@2:

; 236  : 		else
; 237  : 			{	// put using codecvt facet
; 238  : 			const int _STRING_INC = 8;
; 239  : 			const _Elem _Ch = _Traits::to_char_type(_Meta);
; 240  : 			const _Elem *_Src;
; 241  : 			char *_Dest;
; 242  : 
; 243  : 			string _Str(_STRING_INC, '\0');

	lea	esi, DWORD PTR __Str$136298[esp+80]
	mov	BYTE PTR __Ch$136295[esp+80], bl
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[esp+88], 0
$LN239@overflow@2:
	mov	eax, DWORD PTR __Str$136298[esp+84]
	mov	edx, DWORD PTR __Str$136298[esp+104]
$LL13@overflow@2:

; 244  : 			for (; ; )
; 245  : 				switch (_Pcvt->out(_State,
; 246  : 					&_Ch, &_Ch + 1, _Src,
; 247  : 					&*_Str.begin(), &*_Str.begin() + _Str.size(), _Dest))

	cmp	edx, 16					; 00000010H
	jb	$LN65@overflow@2
	mov	ebx, eax
	mov	DWORD PTR $T168475[esp+80], ebx
	test	eax, eax
	je	SHORT $LN69@overflow@2
$LN227@overflow@2:
	mov	ecx, eax
	cmp	edx, 16					; 00000010H
	jae	SHORT $LN80@overflow@2
	lea	ecx, DWORD PTR __Str$136298[esp+84]
$LN80@overflow@2:
	cmp	ecx, ebx
	ja	SHORT $LN69@overflow@2
	mov	ecx, eax
	cmp	edx, 16					; 00000010H
	jae	SHORT $LN84@overflow@2
	lea	ecx, DWORD PTR __Str$136298[esp+84]
$LN84@overflow@2:
	mov	esi, DWORD PTR __Str$136298[esp+100]
	add	ecx, esi
	cmp	ebx, ecx
	jbe	SHORT $LN70@overflow@2
$LN69@overflow@2:
	call	__invalid_parameter_noinfo
	mov	edx, DWORD PTR __Str$136298[esp+104]
	mov	eax, DWORD PTR __Str$136298[esp+84]
$LN70@overflow@2:
	lea	ecx, DWORD PTR __Str$136298[esp+80]
	cmp	ecx, -4					; fffffffcH
	je	SHORT $LN87@overflow@2
	mov	ecx, eax
	cmp	edx, 16					; 00000010H
	jae	SHORT $LN97@overflow@2
	lea	ecx, DWORD PTR __Str$136298[esp+84]
$LN97@overflow@2:
	mov	esi, DWORD PTR __Str$136298[esp+100]
	add	ecx, esi
	cmp	ebx, ecx
	jb	SHORT $LN87@overflow@2
	call	__invalid_parameter_noinfo
	mov	edx, DWORD PTR __Str$136298[esp+104]
	mov	eax, DWORD PTR __Str$136298[esp+84]
$LN87@overflow@2:
	mov	edi, DWORD PTR __Str$136298[esp+100]
	cmp	edx, 16					; 00000010H
	jb	$LN104@overflow@2
	mov	esi, eax
	test	eax, eax
	je	SHORT $LN108@overflow@2
$LN228@overflow@2:
	mov	ecx, eax
	cmp	edx, 16					; 00000010H
	jae	SHORT $LN119@overflow@2
	lea	ecx, DWORD PTR __Str$136298[esp+84]
$LN119@overflow@2:
	cmp	ecx, esi
	ja	SHORT $LN108@overflow@2
	mov	ecx, eax
	cmp	edx, 16					; 00000010H
	jae	SHORT $LN123@overflow@2
	lea	ecx, DWORD PTR __Str$136298[esp+84]
$LN123@overflow@2:
	mov	ebx, DWORD PTR __Str$136298[esp+100]
	add	ecx, ebx
	mov	ebx, DWORD PTR $T168475[esp+80]
	cmp	esi, ecx
	jbe	SHORT $LN109@overflow@2
$LN108@overflow@2:
	call	__invalid_parameter_noinfo
	mov	edx, DWORD PTR __Str$136298[esp+104]
	mov	eax, DWORD PTR __Str$136298[esp+84]
$LN109@overflow@2:
	lea	ecx, DWORD PTR __Str$136298[esp+80]
	cmp	ecx, -4					; fffffffcH
	je	SHORT $LN126@overflow@2
	cmp	edx, 16					; 00000010H
	jae	SHORT $LN136@overflow@2
	lea	eax, DWORD PTR __Str$136298[esp+84]
$LN136@overflow@2:
	mov	edx, DWORD PTR __Str$136298[esp+100]
	add	eax, edx
	cmp	esi, eax
	jb	SHORT $LN126@overflow@2
	call	__invalid_parameter_noinfo
$LN126@overflow@2:
	mov	eax, DWORD PTR _this$[esp+80]
	mov	ecx, DWORD PTR [eax+60]
	mov	edx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [edx+20]
	lea	eax, DWORD PTR __Dest$136297[esp+80]
	push	eax
	add	ebx, edi
	push	ebx
	push	esi
	lea	eax, DWORD PTR __Src$136296[esp+92]
	push	eax
	lea	eax, DWORD PTR __Ch$136295[esp+97]
	push	eax
	lea	eax, DWORD PTR __Ch$136295[esp+100]
	push	eax
	mov	eax, DWORD PTR _this$[esp+104]
	add	eax, 68					; 00000044H
	push	eax
	call	edx
	test	eax, eax
	jl	$LN1@overflow@2
	cmp	eax, 1
	jg	$LN224@overflow@2

; 248  : 				{	// test result of converting one element
; 249  : 				case codecvt_base::partial:
; 250  : 				case codecvt_base::ok:
; 251  : 					{	// converted something, try to put it out
; 252  : 					size_t _Count = _Dest - &*_Str.begin();

	mov	edx, DWORD PTR __Str$136298[esp+104]
	mov	eax, DWORD PTR __Str$136298[esp+84]
	cmp	edx, 16					; 00000010H
	jb	$LN143@overflow@2
	mov	esi, eax
	test	eax, eax
	je	SHORT $LN147@overflow@2
$LN229@overflow@2:
	mov	ecx, eax
	cmp	edx, 16					; 00000010H
	jae	SHORT $LN158@overflow@2
	lea	ecx, DWORD PTR __Str$136298[esp+84]
$LN158@overflow@2:
	cmp	ecx, esi
	ja	SHORT $LN147@overflow@2
	mov	ecx, eax
	cmp	edx, 16					; 00000010H
	jae	SHORT $LN162@overflow@2
	lea	ecx, DWORD PTR __Str$136298[esp+84]
$LN162@overflow@2:
	mov	edi, DWORD PTR __Str$136298[esp+100]
	add	ecx, edi
	cmp	esi, ecx
	jbe	SHORT $LN148@overflow@2
$LN147@overflow@2:
	call	__invalid_parameter_noinfo
	mov	edx, DWORD PTR __Str$136298[esp+104]
	mov	eax, DWORD PTR __Str$136298[esp+84]
$LN148@overflow@2:
	lea	ecx, DWORD PTR __Str$136298[esp+80]
	cmp	ecx, -4					; fffffffcH
	je	SHORT $LN165@overflow@2
	mov	ecx, eax
	cmp	edx, 16					; 00000010H
	jae	SHORT $LN175@overflow@2
	lea	ecx, DWORD PTR __Str$136298[esp+84]
$LN175@overflow@2:
	mov	edi, DWORD PTR __Str$136298[esp+100]
	add	ecx, edi
	cmp	esi, ecx
	jb	SHORT $LN165@overflow@2
	call	__invalid_parameter_noinfo
	mov	edx, DWORD PTR __Str$136298[esp+104]
	mov	eax, DWORD PTR __Str$136298[esp+84]
$LN165@overflow@2:
	mov	edi, DWORD PTR __Dest$136297[esp+80]
	sub	edi, esi

; 253  : 					if (0 < _Count && _Count !=
; 254  : 						fwrite(&*_Str.begin(), 1, _Count, _Myfile))

	je	$LN8@overflow@2
	cmp	edx, 16					; 00000010H
	jb	$LN180@overflow@2
	mov	esi, eax
	test	eax, eax
	je	SHORT $LN184@overflow@2
$LN230@overflow@2:
	mov	ecx, eax
	cmp	edx, 16					; 00000010H
	jae	SHORT $LN195@overflow@2
	lea	ecx, DWORD PTR __Str$136298[esp+84]
$LN195@overflow@2:
	cmp	ecx, esi
	ja	SHORT $LN184@overflow@2
	mov	ecx, eax
	cmp	edx, 16					; 00000010H
	jae	SHORT $LN199@overflow@2
	lea	ecx, DWORD PTR __Str$136298[esp+84]
$LN199@overflow@2:
	mov	ebx, DWORD PTR __Str$136298[esp+100]
	add	ecx, ebx
	cmp	esi, ecx
	jbe	SHORT $LN185@overflow@2
$LN184@overflow@2:
	call	__invalid_parameter_noinfo
	mov	edx, DWORD PTR __Str$136298[esp+104]
	mov	eax, DWORD PTR __Str$136298[esp+84]
$LN185@overflow@2:
	lea	ecx, DWORD PTR __Str$136298[esp+80]
	cmp	ecx, -4					; fffffffcH
	je	SHORT $LN202@overflow@2
	cmp	edx, 16					; 00000010H
	jae	SHORT $LN212@overflow@2
	lea	eax, DWORD PTR __Str$136298[esp+84]
$LN212@overflow@2:
	mov	edx, DWORD PTR __Str$136298[esp+100]
	add	eax, edx
	cmp	esi, eax
	jb	SHORT $LN202@overflow@2
	call	__invalid_parameter_noinfo
$LN202@overflow@2:
	mov	eax, DWORD PTR _this$[esp+80]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	push	edi
	push	1
	push	esi
	call	_fwrite
	add	esp, 16					; 00000010H
	cmp	edi, eax
	jne	$LN1@overflow@2
	mov	edx, DWORD PTR __Str$136298[esp+104]
	mov	eax, DWORD PTR __Str$136298[esp+84]
$LN8@overflow@2:

; 255  : 						return (_Traits::eof());	// write failed
; 256  : 
; 257  : 					_Wrotesome = true;	// write succeeded

	mov	ecx, DWORD PTR _this$[esp+80]
	mov	BYTE PTR [ecx+65], 1

; 258  : 					if (_Src != &_Ch)

	lea	ecx, DWORD PTR __Ch$136295[esp+80]
	cmp	DWORD PTR __Src$136296[esp+80], ecx
	jne	$LN226@overflow@2

; 260  : 
; 261  : 					if (0 < _Count)

	test	edi, edi
	ja	$LL13@overflow@2

; 262  : 						;
; 263  : 					else if (_Str.size() < 4 * _STRING_INC)

	cmp	DWORD PTR __Str$136298[esp+100], 32	; 00000020H
	jae	$LN1@overflow@2

; 264  : 						_Str.append(_STRING_INC, '\0');	// try with more space

	push	0
	mov	eax, 8
	lea	edi, DWORD PTR __Str$136298[esp+84]
	call	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 276  : 				}

	jmp	$LN239@overflow@2

; 244  : 			for (; ; )
; 245  : 				switch (_Pcvt->out(_State,
; 246  : 					&_Ch, &_Ch + 1, _Src,
; 247  : 					&*_Str.begin(), &*_Str.begin() + _Str.size(), _Dest))

$LN65@overflow@2:
	lea	ebx, DWORD PTR __Str$136298[esp+84]
	mov	DWORD PTR $T168475[esp+80], ebx
	jmp	$LN227@overflow@2
$LN104@overflow@2:
	lea	esi, DWORD PTR __Str$136298[esp+84]
	jmp	$LN228@overflow@2

; 248  : 				{	// test result of converting one element
; 249  : 				case codecvt_base::partial:
; 250  : 				case codecvt_base::ok:
; 251  : 					{	// converted something, try to put it out
; 252  : 					size_t _Count = _Dest - &*_Str.begin();

$LN143@overflow@2:
	lea	esi, DWORD PTR __Str$136298[esp+84]
	jmp	$LN229@overflow@2

; 253  : 					if (0 < _Count && _Count !=
; 254  : 						fwrite(&*_Str.begin(), 1, _Count, _Myfile))

$LN180@overflow@2:
	lea	esi, DWORD PTR __Str$136298[esp+84]
	jmp	$LN230@overflow@2
$LN224@overflow@2:

; 244  : 			for (; ; )
; 245  : 				switch (_Pcvt->out(_State,
; 246  : 					&_Ch, &_Ch + 1, _Src,
; 247  : 					&*_Str.begin(), &*_Str.begin() + _Str.size(), _Dest))

	cmp	eax, 3
	jne	SHORT $LN1@overflow@2

; 265  : 					else
; 266  : 						return (_Traits::eof());	// conversion failed
; 267  : 					break;
; 268  : 					}
; 269  : 
; 270  : 				case codecvt_base::noconv:
; 271  : 					return (_Fputc(_Ch, _Myfile) ? _Meta
; 272  : 						: _Traits::eof());	// no conversion, put as is

	mov	edx, DWORD PTR _this$[esp+80]
	mov	eax, DWORD PTR [edx+76]
	mov	cl, BYTE PTR __Ch$136295[esp+80]
	call	??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z	; std::_Fputc<char>
	test	al, al
	je	SHORT $LN26@overflow@2
	mov	esi, DWORD PTR __Meta$[ebp]
	lea	ecx, DWORD PTR __Str$136298[esp+80]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, esi

; 277  : 			}
; 278  : 		}

	mov	ecx, DWORD PTR __$EHRec$[esp+80]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
$LN26@overflow@2:

; 265  : 					else
; 266  : 						return (_Traits::eof());	// conversion failed
; 267  : 					break;
; 268  : 					}
; 269  : 
; 270  : 				case codecvt_base::noconv:
; 271  : 					return (_Fputc(_Ch, _Myfile) ? _Meta
; 272  : 						: _Traits::eof());	// no conversion, put as is

	lea	ecx, DWORD PTR __Str$136298[esp+80]
	or	esi, -1
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, esi

; 277  : 			}
; 278  : 		}

	mov	ecx, DWORD PTR __$EHRec$[esp+80]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
$LN226@overflow@2:

; 259  : 						return (_Meta);	// converted whole element

	lea	ecx, DWORD PTR __Str$136298[esp+80]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR __Meta$[ebp]

; 277  : 			}
; 278  : 		}

	mov	ecx, DWORD PTR __$EHRec$[esp+80]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
$LN1@overflow@2:

; 273  : 
; 274  : 				default:
; 275  : 					return (_Traits::eof());	// conversion failed

	lea	ecx, DWORD PTR __Str$136298[esp+80]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN238@overflow@2:

; 277  : 			}
; 278  : 		}

	mov	ecx, DWORD PTR __$EHRec$[esp+80]
	pop	edi
	pop	esi
	or	eax, -1
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$0:
	lea	ecx, DWORD PTR __Str$136298[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z:
	mov	eax, OFFSET __ehfuncinfo$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::overflow
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\xiosbase
;	COMDAT ??1failure@ios_base@std@@UAE@XZ
_TEXT	SEGMENT
??1failure@ios_base@std@@UAE@XZ PROC			; std::ios_base::failure::~failure, COMDAT
; _this$ = ecx

; 224  : 			{	// destroy the object

	push	esi
	mov	esi, ecx

; 225  : 			}

	mov	DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@
	cmp	DWORD PTR [esi+36], 16			; 00000010H
	jb	SHORT $LN23@failure
	mov	eax, DWORD PTR [esi+16]
	push	eax
	call	DWORD PTR ?RenDelete@@3P6AXPAX@ZA	; RenDelete
	add	esp, 4
$LN23@failure:
	xor	eax, eax
	mov	DWORD PTR [esi+36], 15			; 0000000fH
	mov	DWORD PTR [esi+32], eax
	mov	BYTE PTR [esi+16], al
	mov	ecx, esi
	pop	esi
	jmp	??1exception@std@@UAE@XZ		; std::exception::~exception
??1failure@ios_base@std@@UAE@XZ ENDP			; std::ios_base::failure::~failure
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$ctype@D@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$ctype@D@std@@MAEPAXI@Z PROC			; std::ctype<char>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	mov	eax, DWORD PTR [esi+20]
	mov	DWORD PTR [esi], OFFSET ??_7?$ctype@D@std@@6B@
	test	eax, eax
	jle	SHORT $LN20@scalar@34
	mov	eax, DWORD PTR [esi+16]
	push	eax
	call	_free
	jmp	SHORT $LN21@scalar@34
$LN20@scalar@34:
	jge	SHORT $LN11@scalar@34
	mov	ecx, DWORD PTR [esi+16]
	push	ecx
	call	DWORD PTR ?RenVecDelete@@3P6AXPAX@ZA	; RenVecDelete
$LN21@scalar@34:
	add	esp, 4
$LN11@scalar@34:
	test	BYTE PTR ___flags$[esp], 1
	mov	DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
	je	SHORT $LN19@scalar@34
	push	esi
	call	DWORD PTR ?RenDelete@@3P6AXPAX@ZA	; RenDelete
	add	esp, 4
$LN19@scalar@34:
	mov	eax, esi
	pop	esi
	ret	4
??_G?$ctype@D@std@@MAEPAXI@Z ENDP			; std::ctype<char>::`scalar deleting destructor'
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\xlocale
_TEXT	ENDS
;	COMDAT ?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T169176 = -4						; size = 4
?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::locale::name, COMDAT
; _this$ = eax
; ___$ReturnUdt$ = esi

; 407  : 		{	// return locale name

	push	ecx

; 408  : 		return (_Ptr->_Name);

	mov	eax, DWORD PTR [eax]
	xor	ecx, ecx
	push	-1
	mov	DWORD PTR [esi+20], ecx
	push	ecx
	add	eax, 24					; 00000018H
	mov	DWORD PTR [esi+24], 15			; 0000000fH
	mov	DWORD PTR $T169176[esp+12], ecx
	mov	BYTE PTR [esi+4], cl
	push	eax
	mov	ecx, esi
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	mov	eax, esi

; 409  : 		}

	pop	ecx
	ret	0
?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::locale::name
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0runtime_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0runtime_error@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0runtime_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0runtime_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??0runtime_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0runtime_error@std@@QAE@ABV01@@Z PROC			; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx
	push	-1
	push	__ehhandler$??0runtime_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	push	esi
	push	edi
	mov	edi, DWORD PTR ___that$[esp+20]
	mov	esi, ecx
	push	edi
	mov	DWORD PTR _this$[esp+28], esi
	call	??0exception@std@@QAE@ABV01@@Z		; std::exception::exception
	xor	edx, edx
	mov	DWORD PTR __$EHRec$[esp+32], edx
	push	-1
	lea	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@
	lea	eax, DWORD PTR [edi+12]
	push	edx
	mov	DWORD PTR [ecx+24], 15			; 0000000fH
	mov	DWORD PTR [ecx+20], edx
	push	eax
	mov	BYTE PTR [ecx+4], dl
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	mov	ecx, DWORD PTR __$EHRec$[esp+24]
	pop	edi
	mov	eax, esi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	add	esp, 16					; 00000010H
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0runtime_error@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1exception@std@@UAE@XZ		; std::exception::~exception
__ehhandler$??0runtime_error@std@@QAE@ABV01@@Z:
	mov	eax, OFFSET __ehfuncinfo$??0runtime_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0runtime_error@std@@QAE@ABV01@@Z ENDP			; std::runtime_error::runtime_error
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$4
__ehfuncinfo$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\xlocinfo
xdata$x	ENDS
;	COMDAT ??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_locstr$ = 12						; size = 4
??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::_Locinfo::_Locinfo, COMDAT

; 96   : 		{

	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ebx
	push	esi
	mov	esi, DWORD PTR _this$[esp+16]
	xor	ebx, ebx
	push	ebx
	mov	ecx, esi
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[esp+28], ebx
	mov	eax, 15					; 0000000fH
	mov	DWORD PTR [esi+28], eax
	mov	DWORD PTR [esi+24], ebx
	mov	BYTE PTR [esi+8], bl
	mov	DWORD PTR [esi+56], eax
	mov	DWORD PTR [esi+52], ebx
	mov	BYTE PTR [esi+36], bl
	mov	DWORD PTR [esi+84], eax
	mov	DWORD PTR [esi+80], ebx
	mov	BYTE PTR [esi+64], bl
	mov	DWORD PTR [esi+112], eax
	mov	DWORD PTR [esi+108], ebx
	mov	BYTE PTR [esi+92], bl

; 97   :         _Locinfo_ctor(this, locstr);

	mov	eax, DWORD PTR _locstr$[esp+16]
	push	eax
	push	esi
	mov	BYTE PTR __$EHRec$[esp+36], 4
	call	?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::_Locinfo::_Locinfo_ctor

; 98   : 		}

	mov	ecx, DWORD PTR __$EHRec$[esp+28]
	add	esp, 8
	mov	eax, esi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	add	esp, 12					; 0000000cH
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp-4]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp-4]
	add	ecx, 4
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp-4]
	add	ecx, 32					; 00000020H
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$3:
	mov	ecx, DWORD PTR _this$[ebp-4]
	add	ecx, 60					; 0000003cH
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$4:
	mov	ecx, DWORD PTR _this$[ebp-4]
	add	ecx, 88					; 00000058H
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
	mov	eax, OFFSET __ehfuncinfo$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::_Locinfo::_Locinfo
; Function compile flags: /Ogtpy
;	COMDAT ??_Gruntime_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gruntime_error@std@@UAEPAXI@Z PROC			; std::runtime_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@
	cmp	DWORD PTR [esi+36], 16			; 00000010H
	jb	SHORT $LN24@scalar@35
	mov	eax, DWORD PTR [esi+16]
	push	eax
	call	DWORD PTR ?RenDelete@@3P6AXPAX@ZA	; RenDelete
	add	esp, 4
$LN24@scalar@35:
	xor	eax, eax
	mov	DWORD PTR [esi+36], 15			; 0000000fH
	mov	DWORD PTR [esi+32], eax
	mov	ecx, esi
	mov	BYTE PTR [esi+16], al
	call	??1exception@std@@UAE@XZ		; std::exception::~exception
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $LN36@scalar@35
	push	esi
	call	DWORD PTR ?RenDelete@@3P6AXPAX@ZA	; RenDelete
	add	esp, 4
$LN36@scalar@35:
	mov	eax, esi
	pop	esi
	ret	4
??_Gruntime_error@std@@UAEPAXI@Z ENDP			; std::runtime_error::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
__ehfuncinfo$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	ENDS
;	COMDAT ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
__Message$ = 12						; size = 4
??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::runtime_error::runtime_error, COMDAT

; 153  : 		{	// construct from message string

	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	push	eax
	mov	DWORD PTR fs:0, esp
	push	esi
	mov	esi, DWORD PTR _this$[esp+12]
	mov	ecx, esi
	call	??0exception@std@@QAE@XZ		; std::exception::exception
	xor	eax, eax
	mov	DWORD PTR __$EHRec$[esp+24], eax
	lea	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@
	push	-1
	mov	DWORD PTR [ecx+20], eax
	mov	DWORD PTR [ecx+24], 15			; 0000000fH
	push	eax
	mov	BYTE PTR [ecx+4], al
	mov	eax, DWORD PTR __Message$[esp+20]
	push	eax
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 154  : 		}

	mov	ecx, DWORD PTR __$EHRec$[esp+16]
	mov	eax, esi
	mov	DWORD PTR fs:0, ecx
	pop	esi
	add	esp, 12					; 0000000cH
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp-4]
	jmp	??1exception@std@@UAE@XZ		; std::exception::~exception
__ehhandler$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
	mov	eax, OFFSET __ehfuncinfo$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::runtime_error::runtime_error
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
	DD	03H
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$2
__ehfuncinfo$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
_TEXT	SEGMENT
$T171995 = -164						; size = 4
$T171989 = -160						; size = 4
$T171991 = -156						; size = 28
$T171990 = -128						; size = 116
__$EHRec$ = -12						; size = 12
__Ppf$ = 8						; size = 4
__Ploc$ = 12						; size = 4
?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z PROC ; std::numpunct<char>::_Getcat, COMDAT

; 112  : 		{	// return locale category mask and construct standard facet

	push	-1
	push	__ehhandler$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 152				; 00000098H
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR __Ppf$[esp+168]

; 114  : 			*_Ppf = _NEW_CRT numpunct<_Elem>(
; 115  : 				_Locinfo(_Ploc->name()), 0, true);

	xor	ebx, ebx
	push	esi
	push	edi
	mov	DWORD PTR $T171995[esp+180], ebx
	cmp	ebp, ebx
	je	$LN47@Getcat

; 113  : 		if (_Ppf != 0 && *_Ppf == 0)

	cmp	DWORD PTR [ebp], ebx
	jne	$LN47@Getcat

; 114  : 			*_Ppf = _NEW_CRT numpunct<_Elem>(
; 115  : 				_Locinfo(_Ploc->name()), 0, true);

	cmp	DWORD PTR ?RenNew@@3P6APAXK@ZA, ebx	; RenNew
	jne	SHORT $LN13@Getcat
	call	?InitEngine@@YAXXZ			; InitEngine
$LN13@Getcat:
	push	24					; 00000018H
	call	DWORD PTR ?RenNew@@3P6APAXK@ZA		; RenNew
	mov	edi, eax
	add	esp, 4
	mov	DWORD PTR $T171989[esp+180], edi
	mov	DWORD PTR __$EHRec$[esp+188], ebx
	cmp	edi, ebx
	je	SHORT $LN4@Getcat
	mov	eax, DWORD PTR __Ploc$[esp+176]
	lea	esi, DWORD PTR $T171991[esp+180]
	call	?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::locale::name
	push	eax
	lea	eax, DWORD PTR $T171990[esp+184]
	mov	BYTE PTR __$EHRec$[esp+192], 1
	push	eax
	mov	DWORD PTR $T171995[esp+188], 1
	call	??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Locinfo::_Locinfo
	mov	DWORD PTR __$EHRec$[esp+188], 2
	mov	ebx, 3
	push	edi
	mov	DWORD PTR $T171995[esp+184], ebx
	call	??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z ; std::numpunct<char>::numpunct<char>
	jmp	SHORT $LN5@Getcat
$LN4@Getcat:
	xor	eax, eax
$LN5@Getcat:
	mov	DWORD PTR [ebp], eax
	mov	DWORD PTR __$EHRec$[esp+188], 3
	test	bl, 2
	je	SHORT $LN11@Getcat
	lea	ecx, DWORD PTR $T171990[esp+180]
	and	ebx, -3					; fffffffdH
	push	ecx
	mov	DWORD PTR $T171995[esp+184], ebx
	call	??1_Locinfo@std@@QAE@XZ			; std::_Locinfo::~_Locinfo
$LN11@Getcat:
	mov	DWORD PTR __$EHRec$[esp+188], -1
	test	bl, 1
	je	SHORT $LN47@Getcat
	cmp	DWORD PTR $T171991[esp+204], 16		; 00000010H
	jb	SHORT $LN47@Getcat
	mov	edx, DWORD PTR $T171991[esp+184]
	push	edx
	call	DWORD PTR ?RenDelete@@3P6AXPAX@ZA	; RenDelete
	add	esp, 4
$LN47@Getcat:

; 116  : 		return (_X_NUMERIC);
; 117  : 		}

	mov	ecx, DWORD PTR __$EHRec$[esp+180]
	pop	edi
	pop	esi
	pop	ebp
	mov	eax, 4
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	add	esp, 164				; 000000a4H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
	mov	eax, DWORD PTR $T171989[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1:
	mov	eax, DWORD PTR $T171995[ebp]
	and	eax, 1
	je	$LN8@Getcat
	and	DWORD PTR $T171995[ebp], -2		; fffffffeH
	lea	ecx, DWORD PTR $T171991[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN8@Getcat:
	ret	0
__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$2:
	mov	eax, DWORD PTR $T171995[ebp]
	and	eax, 2
	je	$LN10@Getcat
	and	DWORD PTR $T171995[ebp], -3		; fffffffdH
	lea	ecx, DWORD PTR $T171990[ebp]
	push	ecx
	call	??1_Locinfo@std@@QAE@XZ			; std::_Locinfo::~_Locinfo
$LN10@Getcat:
	ret	0
__ehhandler$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
	mov	eax, OFFSET __ehfuncinfo$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ENDP ; std::numpunct<char>::_Getcat
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 9.0\vc\include\xlocale
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$0
__ehfuncinfo$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT
__Psave$139467 = -36					; size = 4
__Lock$172147 = -32					; size = 4
__Lock$172169 = -32					; size = 4
__Lock$139466 = -28					; size = 4
$T172139 = -24						; size = 12
__$EHRec$ = -12						; size = 12
??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z PROC ; std::use_facet<std::numpunct<char> >, COMDAT
; __Loc$ = edi

; 486  : {	// get facet reference from locale

	push	-1
	push	__ehhandler$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 24					; 00000018H
	push	ebx
	push	esi

; 487  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

	push	0
	lea	ecx, DWORD PTR __Lock$139466[esp+48]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[esp+52], 0

; 488  : 		const locale::facet *_Psave =
; 489  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet
; 490  : 
; 491  : 		size_t _Id = _Facet::id;

	cmp	DWORD PTR ?id@?$numpunct@D@std@@2V0locale@2@A, 0 ; std::numpunct<char>::id
	mov	ebx, DWORD PTR ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::numpunct<char> >::_Psave
	mov	DWORD PTR __Psave$139467[esp+44], ebx
	jne	SHORT $LN11@use_facet
	push	0
	lea	ecx, DWORD PTR __Lock$172147[esp+48]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	cmp	DWORD PTR ?id@?$numpunct@D@std@@2V0locale@2@A, 0 ; std::numpunct<char>::id
	jne	SHORT $LN10@use_facet
	mov	eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
	inc	eax
	mov	DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
	mov	DWORD PTR ?id@?$numpunct@D@std@@2V0locale@2@A, eax ; std::numpunct<char>::id
$LN10@use_facet:
	lea	ecx, DWORD PTR __Lock$172147[esp+44]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
$LN11@use_facet:
	mov	esi, DWORD PTR ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id

; 492  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);

	mov	eax, DWORD PTR [edi]
	cmp	esi, DWORD PTR [eax+12]
	jae	SHORT $LN20@use_facet
	mov	ecx, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR [ecx+esi*4]
	test	ecx, ecx
	jne	SHORT $LN16@use_facet
$LN30@use_facet:
	cmp	BYTE PTR [eax+20], 0
	je	SHORT $LN16@use_facet
	call	?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
	cmp	esi, DWORD PTR [eax+12]
	jae	SHORT $LN31@use_facet
	mov	edx, DWORD PTR [eax+8]
	mov	esi, DWORD PTR [edx+esi*4]
	jmp	SHORT $LN15@use_facet
$LN20@use_facet:
	xor	ecx, ecx
	jmp	SHORT $LN30@use_facet
$LN16@use_facet:
	mov	esi, ecx
$LN15@use_facet:

; 493  : 
; 494  : 		if (_Pf != 0)

	test	esi, esi
	jne	SHORT $LN28@use_facet
$LN31@use_facet:

; 495  : 			;	// got facet from locale
; 496  : 		else if (_Psave != 0)

	test	ebx, ebx
	je	SHORT $LN4@use_facet

; 497  : 			_Pf = _Psave;	// lazy facet already allocated

	mov	esi, ebx
	jmp	SHORT $LN28@use_facet
$LN4@use_facet:

; 498  : 		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

	lea	eax, DWORD PTR __Psave$139467[esp+44]
	push	edi
	push	eax
	call	?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::numpunct<char>::_Getcat
	add	esp, 8
	cmp	eax, -1
	jne	SHORT $LN2@use_facet

; 499  : 
; 500  :  #if _HAS_EXCEPTIONS
; 501  : 		_THROW_NCEE(bad_cast, _EMPTY_ARGUMENT);	// lazy disallowed

	push	OFFSET ??_C@_08EPJLHIJG@bad?5cast?$AA@
	lea	ecx, DWORD PTR $T172139[esp+48]
	call	??0bad_cast@std@@QAE@PBD@Z		; std::bad_cast::bad_cast
	push	OFFSET __TI2?AVbad_cast@std@@
	lea	ecx, DWORD PTR $T172139[esp+48]
	push	ecx
	call	__CxxThrowException@8
$LN34@use_facet:
$LN2@use_facet:

; 502  : 
; 503  : 	#else /* _HAS_EXCEPTIONS */
; 504  : 			abort();	// lazy disallowed
; 505  : 	#endif /* _HAS_EXCEPTIONS */
; 506  : 
; 507  : 		else
; 508  : 			{	// queue up lazy facet for destruction
; 509  : 			_Pf = _Psave;

	mov	esi, DWORD PTR __Psave$139467[esp+44]

; 510  : 			_Facetptr<_Facet>::_Psave = _Psave;
; 511  : 
; 512  : 			locale::facet *_Pfmod = (_Facet *)_Psave;
; 513  : 			_Pfmod->_Incref();

	push	0
	lea	ecx, DWORD PTR __Lock$172169[esp+48]
	mov	DWORD PTR ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B, esi ; std::_Facetptr<std::numpunct<char> >::_Psave
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	eax, DWORD PTR [esi+4]
	cmp	eax, -1
	jae	SHORT $LN24@use_facet
	inc	eax
	mov	DWORD PTR [esi+4], eax
$LN24@use_facet:
	lea	ecx, DWORD PTR __Lock$172169[esp+44]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit

; 514  : 			_Pfmod->_Register();

	push	esi
	call	?facet_Register@facet@locale@std@@CAXPAV123@@Z ; std::locale::facet::facet_Register
	add	esp, 4
$LN28@use_facet:

; 515  : 			}
; 516  : 
; 517  : 		return ((const _Facet&)(*_Pf));	// should be dynamic_cast

	lea	ecx, DWORD PTR __Lock$139466[esp+44]
	mov	DWORD PTR __$EHRec$[esp+52], -1
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit

; 518  : 	_END_LOCK()
; 519  : 	}

	mov	ecx, DWORD PTR __$EHRec$[esp+44]
	mov	eax, esi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	add	esp, 36					; 00000024H
	ret	0
$LN33@use_facet:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$0:
	lea	ecx, DWORD PTR __Lock$139466[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
__ehhandler$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z:
	mov	eax, OFFSET __ehfuncinfo$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::numpunct<char> >
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T172188 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::do_truename, COMDAT
; _this$ = ecx

; 184  : 		{	// return name for true

	push	ecx

; 185  : 		return (string_type(_Truename));

	mov	ecx, DWORD PTR [ecx+20]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[esp+4]
	mov	eax, ecx
	push	edi
	mov	DWORD PTR [esi+24], 15			; 0000000fH
	mov	DWORD PTR [esi+20], 0
	mov	DWORD PTR $T172188[esp+12], 0
	mov	BYTE PTR [esi+4], 0
	lea	edi, DWORD PTR [eax+1]
	npad	7
$LL43@do_truenam:
	mov	dl, BYTE PTR [eax]
	inc	eax
	test	dl, dl
	jne	SHORT $LL43@do_truenam
	sub	eax, edi
	push	eax
	push	ecx
	mov	ecx, esi
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	pop	edi
	mov	eax, esi
	pop	esi

; 186  : 		}

	pop	ecx
	ret	4
?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::do_truename
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T172348 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::do_falsename, COMDAT
; _this$ = ecx

; 179  : 		{	// return name for false

	push	ecx

; 180  : 		return (string_type(_Falsename));

	mov	ecx, DWORD PTR [ecx+16]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[esp+4]
	mov	eax, ecx
	push	edi
	mov	DWORD PTR [esi+24], 15			; 0000000fH
	mov	DWORD PTR [esi+20], 0
	mov	DWORD PTR $T172348[esp+12], 0
	mov	BYTE PTR [esi+4], 0
	lea	edi, DWORD PTR [eax+1]
	npad	7
$LL43@do_falsena:
	mov	dl, BYTE PTR [eax]
	inc	eax
	test	dl, dl
	jne	SHORT $LL43@do_falsena
	sub	eax, edi
	push	eax
	push	ecx
	mov	ecx, esi
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	pop	edi
	mov	eax, esi
	pop	esi

; 181  : 		}

	pop	ecx
	ret	4
?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::do_falsename
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T172508 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::do_grouping, COMDAT
; _this$ = ecx

; 174  : 		{	// return grouping string

	push	ecx

; 175  : 		return (string(_Grouping));

	mov	ecx, DWORD PTR [ecx+8]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[esp+4]
	mov	eax, ecx
	push	edi
	mov	DWORD PTR [esi+24], 15			; 0000000fH
	mov	DWORD PTR [esi+20], 0
	mov	DWORD PTR $T172508[esp+12], 0
	mov	BYTE PTR [esi+4], 0
	lea	edi, DWORD PTR [eax+1]
	npad	7
$LL43@do_groupin:
	mov	dl, BYTE PTR [eax]
	inc	eax
	test	dl, dl
	jne	SHORT $LL43@do_groupin
	sub	eax, edi
	push	eax
	push	ecx
	mov	ecx, esi
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	pop	edi
	mov	eax, esi
	pop	esi

; 176  : 		}

	pop	ecx
	ret	4
?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::do_grouping
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$1
__ehfuncinfo$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z
_TEXT	SEGMENT
$T172678 = -56						; size = 8
$T172677 = -56						; size = 8
$T172676 = -56						; size = 8
$T172675 = -56						; size = 8
__Punct_fac$ = -56					; size = 4
$T172667 = -48						; size = 4
__Grouping$ = -44					; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Iosbase$ = 12						; size = 4
__Fill$ = 16						; size = 1
$T172768 = 20						; size = 1
__Lock$172703 = 20					; size = 4
__Prefix$ = 20						; size = 4
__Buf$ = 20						; size = 4
__Count$ = 24						; size = 4
__Dest$ = 28						; size = 8
?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput, COMDAT

; 1458 : 		{	// put formatted integer to _Dest

	push	-1
	push	__ehhandler$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 44					; 0000002cH

; 1459 : 		_DEBUG_POINTER(_Dest);
; 1460 : 		const _Mypunct& _Punct_fac = _USE(_Iosbase.getloc(), _Mypunct);

	mov	eax, DWORD PTR __Iosbase$[esp+52]
	push	ebx
	mov	ebx, DWORD PTR __Buf$[esp+56]
	push	ebp
	push	esi
	push	edi
	lea	edi, DWORD PTR $T172667[esp+72]
	call	?getloc@ios_base@std@@QBE?AVlocale@2@XZ	; std::ios_base::getloc
	mov	edi, eax
	mov	DWORD PTR __$EHRec$[esp+80], 0
	call	??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
	mov	DWORD PTR __$EHRec$[esp+80], -1
	mov	edi, DWORD PTR $T172667[esp+72]
	mov	ebp, eax
	mov	DWORD PTR __Punct_fac$[esp+72], ebp
	test	edi, edi
	je	SHORT $LN22@Iput
	push	0
	lea	ecx, DWORD PTR __Lock$172703[esp+72]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	eax, DWORD PTR [edi+4]
	test	eax, eax
	jbe	SHORT $LN24@Iput
	cmp	eax, -1
	jae	SHORT $LN24@Iput
	dec	eax
	mov	DWORD PTR [edi+4], eax
$LN24@Iput:
	mov	esi, DWORD PTR [edi+4]
	neg	esi
	sbb	esi, esi
	not	esi
	lea	ecx, DWORD PTR __Lock$172703[esp+68]
	and	esi, edi
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	test	esi, esi
	je	SHORT $LN22@Iput
	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	push	1
	mov	ecx, esi
	call	edx
$LN22@Iput:

; 1461 : 		const string _Grouping = _Punct_fac.grouping();

	lea	esi, DWORD PTR __Grouping$[esp+72]
	mov	ecx, ebp
	call	?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::grouping
	mov	ecx, 1
	mov	DWORD PTR __$EHRec$[esp+80], ecx

; 1462 : 		const size_t _Prefix = *_Buf == '+' || *_Buf == '-' ? 1
; 1463 : 			: *_Buf == '0' && (_Buf[1] == 'x' || _Buf[1] == 'X') ? 2
; 1464 : 			: 0;

	mov	al, BYTE PTR [ebx]
	cmp	al, 43					; 0000002bH
	je	SHORT $LN10@Iput
	cmp	al, 45					; 0000002dH
	je	SHORT $LN10@Iput
	cmp	al, 48					; 00000030H
	jne	SHORT $LN12@Iput
	mov	al, BYTE PTR [ebx+1]
	cmp	al, 120					; 00000078H
	je	SHORT $LN11@Iput
	cmp	al, 88					; 00000058H
	jne	SHORT $LN12@Iput
$LN11@Iput:
	mov	DWORD PTR __Prefix$[esp+68], 2
	jmp	SHORT $LN14@Iput
$LN12@Iput:
	mov	DWORD PTR __Prefix$[esp+68], 0
	jmp	SHORT $LN14@Iput
$LN10@Iput:
	mov	DWORD PTR __Prefix$[esp+68], ecx
$LN14@Iput:

; 1465 : 
; 1466 : 		if (*_Grouping.c_str() != CHAR_MAX && '\0' < *_Grouping.c_str())

	mov	ecx, DWORD PTR __Grouping$[esp+96]
	mov	edx, DWORD PTR __Grouping$[esp+76]
	mov	eax, edx
	cmp	ecx, 16					; 00000010H
	jae	SHORT $LN33@Iput
	lea	eax, DWORD PTR __Grouping$[esp+76]
$LN33@Iput:
	cmp	BYTE PTR [eax], 127			; 0000007fH
	je	SHORT $LN5@Iput
	mov	eax, edx
	cmp	ecx, 16					; 00000010H
	jae	SHORT $LN39@Iput
	lea	eax, DWORD PTR __Grouping$[esp+76]
$LN39@Iput:
	cmp	BYTE PTR [eax], 0
	jle	SHORT $LN5@Iput

; 1467 : 			{	// grouping specified, add thousands separators
; 1468 : 			const char *_Pg = _Grouping.c_str();

	mov	ebp, edx
	cmp	ecx, 16					; 00000010H
	jae	SHORT $LN45@Iput
	lea	ebp, DWORD PTR __Grouping$[esp+76]
$LN45@Iput:

; 1469 : 			size_t _Off = _Count;
; 1470 : 			while (*_Pg != CHAR_MAX && '\0' < *_Pg
; 1471 : 				&& (size_t)*_Pg < _Off - _Prefix)

	mov	al, BYTE PTR [ebp]
	mov	esi, DWORD PTR __Count$[esp+68]
	cmp	al, 127					; 0000007fH
	je	SHORT $LN93@Iput
$LN6@Iput:
	test	al, al
	jle	SHORT $LN93@Iput
	mov	ecx, esi
	sub	ecx, DWORD PTR __Prefix$[esp+68]
	movsx	eax, al
	cmp	eax, ecx
	jae	SHORT $LN93@Iput

; 1472 : 				{	// add a NUL to mark thousands separator
; 1473 : 				_Off -= *_Pg;

	sub	esi, eax

; 1474 : 				_CRT_SECURE_MEMMOVE(&_Buf[_Off + 1], _Count + 1 - _Off,

	mov	eax, DWORD PTR __Count$[esp+68]
	sub	eax, esi
	inc	eax
	push	eax
	lea	edi, DWORD PTR [esi+ebx]
	push	edi
	push	eax
	lea	edx, DWORD PTR [esi+ebx+1]
	push	edx
	call	_memmove_s

; 1475 : 					&_Buf[_Off],	 _Count + 1 - _Off);
; 1476 : 				_Buf[_Off] = '\0', ++_Count;

	inc	DWORD PTR __Count$[esp+84]
	add	esp, 16					; 00000010H
	mov	BYTE PTR [edi], 0

; 1477 : 				if ('\0' < _Pg[1])

	cmp	BYTE PTR [ebp+1], 0
	jle	SHORT $LN4@Iput

; 1469 : 			size_t _Off = _Count;
; 1470 : 			while (*_Pg != CHAR_MAX && '\0' < *_Pg
; 1471 : 				&& (size_t)*_Pg < _Off - _Prefix)

	inc	ebp
$LN4@Iput:
	mov	al, BYTE PTR [ebp]
	cmp	al, 127					; 0000007fH
	jne	SHORT $LN6@Iput
$LN93@Iput:
	mov	ebp, DWORD PTR __Punct_fac$[esp+72]
$LN5@Iput:

; 1478 : 					++_Pg;	// not last group, advance
; 1479 : 				}
; 1480 : 			}
; 1481 : 
; 1482 : 		size_t _Fillcount = _Iosbase.width() <= 0
; 1483 : 			|| (size_t)_Iosbase.width() <= _Count
; 1484 : 				? 0 : (size_t)_Iosbase.width() - _Count;

	mov	ecx, DWORD PTR __Iosbase$[esp+68]
	mov	esi, DWORD PTR [ecx+24]
	test	esi, esi
	jle	SHORT $LN15@Iput
	mov	eax, DWORD PTR __Count$[esp+68]
	cmp	esi, eax
	jbe	SHORT $LN15@Iput
	sub	esi, eax
	jmp	SHORT $LN16@Iput
$LN15@Iput:
	xor	esi, esi
$LN16@Iput:

; 1485 : 
; 1486 : 		ios_base::fmtflags _Adjustfield =
; 1487 : 			_Iosbase.flags() & ios_base::adjustfield;

	mov	eax, DWORD PTR [ecx+16]
	and	eax, 448				; 000001c0H

; 1488 : 		if (_Adjustfield != ios_base::left
; 1489 : 			&& _Adjustfield != ios_base::internal)

	cmp	eax, 64					; 00000040H
	je	SHORT $LN1@Iput
	cmp	eax, 256				; 00000100H
	je	SHORT $LN87@Iput

; 1490 : 			{	// put leading fill
; 1491 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount);

	mov	eax, DWORD PTR __Fill$[esp+68]
	mov	ecx, DWORD PTR __Dest$[esp+72]
	mov	edx, DWORD PTR __Dest$[esp+68]
	push	eax
	push	ecx
	push	edx
	mov	eax, esi
	lea	edi, DWORD PTR $T172675[esp+84]
	call	?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
	add	esp, 12					; 0000000cH

; 1492 : 			_Fillcount = 0;

	jmp	SHORT $LN97@Iput
$LN87@Iput:

; 1493 : 			}
; 1494 : 		else if (_Adjustfield == ios_base::internal)
; 1495 : 			{	// put internal fill
; 1496 : 			_Dest = _Putc(_Dest, _Buf, _Prefix);	// put prefix

	mov	edi, DWORD PTR __Prefix$[esp+68]
	mov	eax, DWORD PTR __Dest$[esp+72]
	mov	ecx, DWORD PTR __Dest$[esp+68]
	push	edi
	push	eax
	push	ecx
	lea	edx, DWORD PTR $T172676[esp+84]
	push	edx
	mov	eax, ebx
	call	?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc
	mov	ecx, DWORD PTR [eax]

; 1497 : 			_Buf += _Prefix, _Count -= _Prefix;

	sub	DWORD PTR __Count$[esp+84], edi
	mov	DWORD PTR __Dest$[esp+84], ecx
	mov	edx, DWORD PTR [eax+4]

; 1498 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount), _Fillcount = 0;

	mov	ecx, DWORD PTR __Fill$[esp+84]
	mov	DWORD PTR __Dest$[esp+88], edx
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax]
	push	ecx
	push	edx
	push	eax
	add	ebx, edi
	mov	eax, esi
	lea	edi, DWORD PTR $T172677[esp+100]
	call	?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
	add	esp, 28					; 0000001cH
$LN97@Iput:
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Dest$[esp+68], ecx
	mov	edx, DWORD PTR [eax+4]
	xor	esi, esi
	mov	DWORD PTR __Dest$[esp+72], edx
$LN1@Iput:

; 1499 : 			}
; 1500 : 
; 1501 : 		_Dest = _Putgrouped(_Dest, _Buf, _Count,
; 1502 : 			_Punct_fac.thousands_sep());	// put field

	mov	eax, DWORD PTR [ebp]
	mov	edx, DWORD PTR [eax+8]
	mov	ecx, ebp
	call	edx
	mov	ecx, DWORD PTR __Dest$[esp+68]
	mov	BYTE PTR $T172768[esp+68], al
	mov	eax, DWORD PTR __Dest$[esp+72]
	mov	edx, DWORD PTR $T172768[esp+68]
	push	eax
	mov	eax, DWORD PTR __Count$[esp+72]
	push	ecx
	push	edx
	push	eax
	lea	ecx, DWORD PTR $T172678[esp+88]
	push	ebx
	push	ecx
	call	?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putgrouped
	mov	ecx, DWORD PTR [eax]

; 1503 : 		_Iosbase.width(0);

	mov	edx, DWORD PTR __Iosbase$[esp+92]

; 1504 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

	mov	edi, DWORD PTR ___$ReturnUdt$[esp+92]
	mov	DWORD PTR __Dest$[esp+92], ecx
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+24], 0
	mov	edx, DWORD PTR __Fill$[esp+92]
	push	edx
	push	eax
	mov	DWORD PTR __Dest$[esp+104], eax
	push	ecx
	mov	eax, esi
	call	?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
	add	esp, 36					; 00000024H
	mov	DWORD PTR __$EHRec$[esp+80], -1
	cmp	DWORD PTR __Grouping$[esp+96], 16	; 00000010H
	jb	SHORT $LN88@Iput
	mov	eax, DWORD PTR __Grouping$[esp+76]
	push	eax
	call	DWORD PTR ?RenDelete@@3P6AXPAX@ZA	; RenDelete
	add	esp, 4
$LN88@Iput:

; 1505 : 		}

	mov	ecx, DWORD PTR __$EHRec$[esp+72]
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	add	esp, 56					; 00000038H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$0:
	lea	ecx, DWORD PTR $T172667[ebp]
	jmp	??1locale@std@@QAE@XZ			; std::locale::~locale
__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$1:
	lea	ecx, DWORD PTR __Grouping$[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z:
	mov	eax, OFFSET __ehfuncinfo$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = eax

; 970  : 		{	// append [_Ptr, _Ptr + _Count)

	mov	ecx, DWORD PTR __Ptr$[esp-4]
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR __Count$[esp+4]
	push	esi
	push	edi
	mov	esi, eax

; 971  : 
; 972  :  #if _HAS_ITERATOR_DEBUGGING
; 973  : 		if (_Count != 0)
; 974  : 			_DEBUG_POINTER(_Ptr);
; 975  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 976  : 
; 977  : 		if (_Inside(_Ptr))

	test	ecx, ecx
	je	SHORT $LN97@append@3
	mov	edi, DWORD PTR [esi+24]
	lea	eax, DWORD PTR [esi+4]
	cmp	edi, 16					; 00000010H
	jb	SHORT $LN14@append@3
	mov	edx, DWORD PTR [eax]
	jmp	SHORT $LN15@append@3
$LN14@append@3:
	mov	edx, eax
$LN15@append@3:
	cmp	ecx, edx
	jb	SHORT $LN97@append@3
	cmp	edi, 16					; 00000010H
	jb	SHORT $LN18@append@3
	mov	edx, DWORD PTR [eax]
	jmp	SHORT $LN19@append@3
$LN18@append@3:
	mov	edx, eax
$LN19@append@3:
	mov	ebx, DWORD PTR [esi+20]
	add	ebx, edx
	cmp	ebx, ecx
	jbe	SHORT $LN97@append@3

; 978  : 			return (append(*this, _Ptr - _Myptr(), _Count));	// substring

	cmp	edi, 16					; 00000010H
	jb	SHORT $LN22@append@3
	mov	eax, DWORD PTR [eax]
$LN22@append@3:
	push	ebp
	sub	ecx, eax
	push	ecx
	push	esi
	call	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 989  : 		}

	ret	8
$LN97@append@3:

; 979  : 		if (npos - _Mysize <= _Count || _Mysize + _Count < _Mysize)

	mov	eax, DWORD PTR [esi+20]
	or	ecx, -1
	sub	ecx, eax
	cmp	ecx, ebp
	jbe	SHORT $LN2@append@3
	lea	edx, DWORD PTR [eax+ebp]
	cmp	edx, eax
	jae	SHORT $LN3@append@3
$LN2@append@3:

; 980  : 			_String_base::_Xlen();	// result too long

	call	?_Xlen@_String_base@std@@SAXXZ		; std::_String_base::_Xlen
$LN3@append@3:

; 981  : 
; 982  : 		size_type _Num;
; 983  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

	test	ebp, ebp
	jbe	$LN94@append@3
	mov	edi, DWORD PTR [esi+20]
	add	edi, ebp
	cmp	edi, -2					; fffffffeH
	jbe	SHORT $LN29@append@3
	call	?_Xlen@_String_base@std@@SAXXZ		; std::_String_base::_Xlen
$LN29@append@3:
	mov	eax, DWORD PTR [esi+24]
	cmp	eax, edi
	jae	SHORT $LN28@append@3
	mov	eax, DWORD PTR [esi+20]
	push	eax
	push	edi
	mov	ecx, esi
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	test	edi, edi
$LN98@append@3:
	jbe	SHORT $LN94@append@3

; 984  : 			{	// make room and append new stuff
; 985  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize, _Ptr, _Count);

	mov	eax, DWORD PTR [esi+24]
	lea	ebx, DWORD PTR [esi+4]
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN78@append@3
	mov	edx, DWORD PTR [ebx]
	jmp	SHORT $LN79@append@3

; 981  : 
; 982  : 		size_type _Num;
; 983  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN28@append@3:
	test	edi, edi
	jne	SHORT $LN98@append@3
	mov	DWORD PTR [esi+20], edi
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN72@append@3
	mov	eax, DWORD PTR [esi+4]
	pop	edi
	mov	BYTE PTR [eax], 0

; 987  : 			}
; 988  : 		return (*this);

	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx

; 989  : 		}

	ret	8

; 981  : 
; 982  : 		size_type _Num;
; 983  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN72@append@3:
	lea	eax, DWORD PTR [esi+4]
	pop	edi
	mov	BYTE PTR [eax], 0

; 987  : 			}
; 988  : 		return (*this);

	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx

; 989  : 		}

	ret	8

; 984  : 			{	// make room and append new stuff
; 985  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize, _Ptr, _Count);

$LN78@append@3:
	mov	edx, ebx
$LN79@append@3:
	mov	ecx, DWORD PTR [esi+20]
	push	ebp
	mov	ebp, DWORD PTR __Ptr$[esp+16]
	sub	eax, ecx
	push	ebp
	push	eax
	add	ecx, edx
	push	ecx
	call	_memcpy_s
	add	esp, 16					; 00000010H

; 986  : 			_Eos(_Num);

	cmp	DWORD PTR [esi+24], 16			; 00000010H
	mov	DWORD PTR [esi+20], edi
	jb	SHORT $LN92@append@3
	mov	ebx, DWORD PTR [ebx]
$LN92@append@3:
	mov	BYTE PTR [ebx+edi], 0
$LN94@append@3:
	pop	edi

; 987  : 			}
; 988  : 		return (*this);

	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx

; 989  : 		}

	ret	8
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\xlocnum
_TEXT	ENDS
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z
_TEXT	SEGMENT
__Buf$ = -64						; size = 64
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 4
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1278 : 		{	// put formatted void pointer to _Dest

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H

; 1279 : 		const size_t _Buf_size = 2 * _MAX_INT_DIG;
; 1280 : 		char _Buf[_Buf_size];
; 1281 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
; 1282 : 			::sprintf_s(_Buf, _Buf_size, "%p", _Val)));

	mov	eax, DWORD PTR __Dest$[ebp+4]
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	edx, DWORD PTR __Val$[ebp]
	sub	esp, 68					; 00000044H
	push	esi
	push	eax
	push	ecx
	push	edx
	push	OFFSET ??_C@_02BBAHNLBA@?$CFp?$AA@
	lea	eax, DWORD PTR __Buf$[esp+88]
	push	64					; 00000040H
	push	eax
	call	_sprintf_s
	mov	edx, DWORD PTR __Fill$[ebp]
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	add	esp, 16					; 00000010H
	push	eax
	mov	eax, DWORD PTR __Iosbase$[ebp]
	lea	ecx, DWORD PTR __Buf$[esp+84]
	push	ecx
	push	edx
	push	eax
	push	esi
	call	?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput
	add	esp, 28					; 0000001cH
	mov	eax, esi

; 1283 : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z
_TEXT	SEGMENT
__Fmt$ = -72						; size = 8
__Buf$ = -64						; size = 64
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 8
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1184 : 		{	// put formatted unsigned long long to _Dest

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H

; 1185 : 		const size_t _Buf_size = 2 * _MAX_INT_DIG;
; 1186 : 		char _Buf[_Buf_size], _Fmt[8];
; 1187 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
; 1188 : 			::sprintf_s(_Buf, _Buf_size, _Ifmt(_Fmt, "Lu",
; 1189 : 				_Iosbase.flags()), _Val)));

	mov	eax, DWORD PTR __Dest$[ebp+4]
	mov	ecx, DWORD PTR __Dest$[ebp]
	sub	esp, 72					; 00000048H
	push	esi
	mov	esi, DWORD PTR __Iosbase$[ebp]
	mov	edx, DWORD PTR [esi+16]
	push	edi
	push	eax
	mov	eax, DWORD PTR __Val$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR __Val$[ebp]
	push	eax
	push	ecx
	mov	edi, OFFSET ??_C@_02CLHGNPPK@Lu?$AA@
	lea	eax, DWORD PTR __Fmt$[esp+96]
	call	?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
	push	eax
	lea	edx, DWORD PTR __Buf$[esp+100]
	push	64					; 00000040H
	push	edx
	call	_sprintf_s
	mov	ecx, DWORD PTR __Fill$[ebp]
	add	esp, 20					; 00000014H
	push	eax
	lea	eax, DWORD PTR __Buf$[esp+92]
	push	eax
	push	ecx
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	call	?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput
	add	esp, 28					; 0000001cH

; 1190 : 		}

	pop	edi
	mov	eax, esi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z
_TEXT	SEGMENT
__Fmt$ = -72						; size = 8
__Buf$ = -64						; size = 64
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 8
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1174 : 		{	// put formatted long long to _Dest

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H

; 1175 : 		const size_t _Buf_size = 2 * _MAX_INT_DIG;
; 1176 : 		char _Buf[_Buf_size], _Fmt[8];
; 1177 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
; 1178 : 			::sprintf_s(_Buf, _Buf_size, _Ifmt(_Fmt, "Ld",
; 1179 : 				_Iosbase.flags()), _Val)));

	mov	eax, DWORD PTR __Dest$[ebp+4]
	mov	ecx, DWORD PTR __Dest$[ebp]
	sub	esp, 72					; 00000048H
	push	esi
	mov	esi, DWORD PTR __Iosbase$[ebp]
	mov	edx, DWORD PTR [esi+16]
	push	edi
	push	eax
	mov	eax, DWORD PTR __Val$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR __Val$[ebp]
	push	eax
	push	ecx
	mov	edi, OFFSET ??_C@_02HIKPPMOK@Ld?$AA@
	lea	eax, DWORD PTR __Fmt$[esp+96]
	call	?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
	push	eax
	lea	edx, DWORD PTR __Buf$[esp+100]
	push	64					; 00000040H
	push	edx
	call	_sprintf_s
	mov	ecx, DWORD PTR __Fill$[ebp]
	add	esp, 20					; 00000014H
	push	eax
	lea	eax, DWORD PTR __Buf$[esp+92]
	push	eax
	push	ecx
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	call	?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput
	add	esp, 28					; 0000001cH

; 1180 : 		}

	pop	edi
	mov	eax, esi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z
_TEXT	SEGMENT
__Fmt$ = -72						; size = 6
__Buf$ = -64						; size = 64
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 4
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1163 : 		{	// put formatted unsigned long to _Dest

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H

; 1164 : 		const size_t _Buf_size = 2 * _MAX_INT_DIG;
; 1165 : 		char _Buf[_Buf_size], _Fmt[6];
; 1166 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
; 1167 : 			::sprintf_s(_Buf, _Buf_size, _Ifmt(_Fmt, "lu",
; 1168 : 				_Iosbase.flags()), _Val)));

	mov	eax, DWORD PTR __Dest$[ebp+4]
	mov	ecx, DWORD PTR __Dest$[ebp]
	sub	esp, 72					; 00000048H
	push	esi
	mov	esi, DWORD PTR __Iosbase$[ebp]
	mov	edx, DWORD PTR [esi+16]
	push	edi
	push	eax
	mov	eax, DWORD PTR __Val$[ebp]
	push	ecx
	push	eax
	mov	edi, OFFSET ??_C@_02BDDLJJBK@lu?$AA@
	lea	eax, DWORD PTR __Fmt$[esp+92]
	call	?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
	push	eax
	lea	ecx, DWORD PTR __Buf$[esp+96]
	push	64					; 00000040H
	push	ecx
	call	_sprintf_s
	add	esp, 16					; 00000010H
	push	eax
	mov	eax, DWORD PTR __Fill$[ebp]
	lea	edx, DWORD PTR __Buf$[esp+92]
	push	edx
	push	eax
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	call	?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput
	add	esp, 28					; 0000001cH

; 1169 : 		}

	pop	edi
	mov	eax, esi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z
_TEXT	SEGMENT
__Fmt$ = -72						; size = 6
__Buf$ = -64						; size = 64
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 4
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1153 : 		{	// put formatted long to _Dest

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H

; 1154 : 		const size_t _Buf_size = 2 * _MAX_INT_DIG;
; 1155 : 		char _Buf[_Buf_size], _Fmt[6];
; 1156 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
; 1157 : 			::sprintf_s(_Buf, _Buf_size, _Ifmt(_Fmt, "ld",
; 1158 : 				_Iosbase.flags()), _Val)));

	mov	eax, DWORD PTR __Dest$[ebp+4]
	mov	ecx, DWORD PTR __Dest$[ebp]
	sub	esp, 72					; 00000048H
	push	esi
	mov	esi, DWORD PTR __Iosbase$[ebp]
	mov	edx, DWORD PTR [esi+16]
	push	edi
	push	eax
	mov	eax, DWORD PTR __Val$[ebp]
	push	ecx
	push	eax
	mov	edi, OFFSET ??_C@_02EAOCLKAK@ld?$AA@
	lea	eax, DWORD PTR __Fmt$[esp+92]
	call	?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
	push	eax
	lea	ecx, DWORD PTR __Buf$[esp+96]
	push	64					; 00000040H
	push	ecx
	call	_sprintf_s
	add	esp, 16					; 00000010H
	push	eax
	mov	eax, DWORD PTR __Fill$[ebp]
	lea	edx, DWORD PTR __Buf$[esp+92]
	push	edx
	push	eax
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	call	?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput
	add	esp, 28					; 0000001cH

; 1159 : 		}

	pop	edi
	mov	eax, esi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$3
__ehfuncinfo$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
_TEXT	SEGMENT
$T173225 = -92						; size = 4
__Lock$173262 = -88					; size = 4
$T173230 = -88						; size = 8
$T173231 = -80						; size = 8
__Str$138734 = -72					; size = 28
$T173227 = -44						; size = 28
$T173226 = -44						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 1
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1123 : 		{	// put formatted bool to _Dest

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
	push	eax

; 1124 : 		_DEBUG_POINTER(_Dest);
; 1125 : 		if (!(_Iosbase.flags() & ios_base::boolalpha))

	mov	eax, DWORD PTR __Iosbase$[ebp]
	mov	DWORD PTR fs:0, esp
	sub	esp, 80					; 00000050H
	test	DWORD PTR [eax+16], 16384		; 00004000H
	push	ebx
	push	esi
	push	edi
	jne	SHORT $LN5@do_put

; 1126 : 			return (do_put(_Dest, _Iosbase, _Fill, (long)_Val));

	movzx	esi, BYTE PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [edx+28]
	push	esi
	mov	esi, DWORD PTR __Fill$[ebp]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	eax, DWORD PTR __Dest$[ebp+4]
	push	eax
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	push	esi
	call	edx
	mov	eax, esi

; 1148 : 			}
; 1149 : 		}

	mov	ecx, DWORD PTR __$EHRec$[esp+104]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
$LN5@do_put:

; 1127 : 		else
; 1128 : 			{	// put "false" or "true"
; 1129 : 			const _Mypunct& _Punct_fac = _USE(_Iosbase.getloc(), _Mypunct);

	lea	edi, DWORD PTR $T173225[esp+104]
	call	?getloc@ios_base@std@@QBE?AVlocale@2@XZ	; std::ios_base::getloc
	mov	edi, eax
	mov	DWORD PTR __$EHRec$[esp+112], 0
	call	??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
	mov	DWORD PTR __$EHRec$[esp+112], -1
	mov	edi, DWORD PTR $T173225[esp+104]
	mov	ebx, eax
	test	edi, edi
	je	SHORT $LN19@do_put
	push	0
	lea	ecx, DWORD PTR __Lock$173262[esp+108]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	eax, DWORD PTR [edi+4]
	test	eax, eax
	jbe	SHORT $LN21@do_put
	cmp	eax, -1
	jae	SHORT $LN21@do_put
	dec	eax
	mov	DWORD PTR [edi+4], eax
$LN21@do_put:
	mov	esi, DWORD PTR [edi+4]
	neg	esi
	sbb	esi, esi
	not	esi
	lea	ecx, DWORD PTR __Lock$173262[esp+104]
	and	esi, edi
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	test	esi, esi
	je	SHORT $LN19@do_put
	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	push	1
	mov	ecx, esi
	call	edx
$LN19@do_put:

; 1130 : 			_Mystr _Str;

	mov	DWORD PTR __Str$138734[esp+128], 15	; 0000000fH
	mov	DWORD PTR __Str$138734[esp+124], 0
	mov	BYTE PTR __Str$138734[esp+108], 0

; 1131 : 			if (_Val)

	cmp	BYTE PTR __Val$[ebp], 0
	mov	DWORD PTR __$EHRec$[esp+112], 1

; 1132 : 				_Str.assign(_Punct_fac.truename());

	lea	esi, DWORD PTR $T173226[esp+104]
	mov	ecx, ebx
	je	SHORT $LN3@do_put
	call	?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::truename
	push	-1
	push	0
	push	eax
	lea	ecx, DWORD PTR __Str$138734[esp+116]
	mov	BYTE PTR __$EHRec$[esp+124], 2
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	mov	BYTE PTR __$EHRec$[esp+112], 1
	cmp	DWORD PTR $T173226[esp+128], 16		; 00000010H
	jb	SHORT $LN109@do_put
	mov	eax, DWORD PTR $T173226[esp+108]
	push	eax

; 1133 : 			else

	jmp	SHORT $LN174@do_put
$LN3@do_put:

; 1134 : 				_Str.assign(_Punct_fac.falsename());

	call	?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::falsename
	push	-1
	push	0
	push	eax
	lea	ecx, DWORD PTR __Str$138734[esp+116]
	mov	BYTE PTR __$EHRec$[esp+124], 3
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	mov	BYTE PTR __$EHRec$[esp+112], 1
	cmp	DWORD PTR $T173227[esp+128], 16		; 00000010H
	jb	SHORT $LN109@do_put
	mov	ecx, DWORD PTR $T173227[esp+108]
	push	ecx
$LN174@do_put:
	call	DWORD PTR ?RenDelete@@3P6AXPAX@ZA	; RenDelete
	add	esp, 4
$LN109@do_put:

; 1135 : 
; 1136 : 			size_t _Fillcount = _Iosbase.width() <= 0
; 1137 : 				|| (size_t)_Iosbase.width() <= _Str.size()
; 1138 : 					? 0 : (size_t)_Iosbase.width() - _Str.size();

	mov	eax, DWORD PTR __Iosbase$[ebp]
	mov	esi, DWORD PTR [eax+24]
	mov	ecx, DWORD PTR __Str$138734[esp+124]
	test	esi, esi
	jle	SHORT $LN8@do_put
	cmp	esi, ecx
	jbe	SHORT $LN8@do_put
	sub	esi, ecx
	jmp	SHORT $LN9@do_put
$LN8@do_put:
	xor	esi, esi
$LN9@do_put:

; 1139 : 
; 1140 : 			if ((_Iosbase.flags() & ios_base::adjustfield) != ios_base::left)

	mov	eax, DWORD PTR [eax+16]
	mov	ebx, DWORD PTR __Fill$[ebp]
	and	eax, 448				; 000001c0H
	cmp	eax, 64					; 00000040H
	je	SHORT $LN1@do_put

; 1141 : 				{	// put leading fill
; 1142 : 				_Dest = _Rep(_Dest, _Fill, _Fillcount);

	mov	edx, DWORD PTR __Dest$[ebp+4]
	mov	eax, DWORD PTR __Dest$[ebp]
	push	ebx
	push	edx
	push	eax
	mov	eax, esi
	lea	edi, DWORD PTR $T173230[esp+116]
	call	?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]

; 1143 : 				_Fillcount = 0;

	mov	ecx, DWORD PTR __Str$138734[esp+136]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Dest$[ebp+4], edx
	xor	esi, esi
$LN1@do_put:

; 1144 : 				}
; 1145 : 			_Dest = _Put(_Dest, _Str.c_str(), _Str.size());	// put field

	cmp	DWORD PTR __Str$138734[esp+128], 16	; 00000010H
	mov	eax, DWORD PTR __Str$138734[esp+108]
	jae	SHORT $LN138@do_put
	lea	eax, DWORD PTR __Str$138734[esp+108]
$LN138@do_put:
	mov	edx, DWORD PTR __Dest$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Dest$[ebp+4]
	push	ecx
	push	edx
	lea	ecx, DWORD PTR $T173231[esp+116]
	push	ecx
	call	?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
	mov	ecx, DWORD PTR [eax]

; 1146 : 			_Iosbase.width(0);

	mov	edx, DWORD PTR __Iosbase$[ebp]

; 1147 : 			return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	eax, DWORD PTR [eax+4]
	push	ebx
	push	eax
	mov	DWORD PTR __Dest$[ebp+4], eax
	push	ecx
	mov	eax, esi
	mov	DWORD PTR [edx+24], 0
	call	?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
	add	esp, 28					; 0000001cH
	mov	DWORD PTR __$EHRec$[esp+112], -1
	cmp	DWORD PTR __Str$138734[esp+128], 16	; 00000010H
	jb	SHORT $LN159@do_put
	mov	eax, DWORD PTR __Str$138734[esp+108]
	push	eax
	call	DWORD PTR ?RenDelete@@3P6AXPAX@ZA	; RenDelete
	add	esp, 4
$LN159@do_put:

; 1148 : 			}
; 1149 : 		}

	mov	ecx, DWORD PTR __$EHRec$[esp+104]
	mov	eax, edi
	pop	edi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$0:
	lea	ecx, DWORD PTR $T173225[ebp]
	jmp	??1locale@std@@QAE@XZ			; std::locale::~locale
__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$1:
	lea	ecx, DWORD PTR __Str$138734[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$2:
	lea	ecx, DWORD PTR $T173226[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$3:
	lea	ecx, DWORD PTR $T173227[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z:
	mov	eax, OFFSET __ehfuncinfo$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
; Function compile flags: /Ogtpy
;	COMDAT ??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	call	??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $LN6@scalar@37
	push	esi
	call	DWORD PTR ?RenDelete@@3P6AXPAX@ZA	; RenDelete
	add	esp, 4
$LN6@scalar@37:
	mov	eax, esi
	pop	esi
	ret	4
??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ecx-84]
	lea	esi, DWORD PTR [edi+84]
	mov	ecx, esi
	call	??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
	push	esi
	mov	DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
	call	?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
	add	esp, 4
	test	BYTE PTR ___flags$[esp+4], 1
	je	SHORT $LN13@scalar@38
	push	edi
	call	DWORD PTR ?RenDelete@@3P6AXPAX@ZA	; RenDelete
	add	esp, 4
$LN13@scalar@38:
	mov	eax, edi
	pop	edi
	pop	esi
	ret	4
??_G?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z ENDP ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?_Getcat@?$codecvt@DDH@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$codecvt@DDH@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Getcat@?$codecvt@DDH@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$codecvt@DDH@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
__ehfuncinfo$?_Getcat@?$codecvt@DDH@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?_Getcat@?$codecvt@DDH@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\xlocale
xdata$x	ENDS
;	COMDAT ?_Getcat@?$codecvt@DDH@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
_TEXT	SEGMENT
$T173869 = -164						; size = 4
$T173863 = -160						; size = 4
$T173865 = -156						; size = 28
$T173864 = -128						; size = 116
__$EHRec$ = -12						; size = 12
__Ppf$ = 8						; size = 4
__Ploc$ = 12						; size = 4
?_Getcat@?$codecvt@DDH@std@@SAIPAPBVfacet@locale@2@PBV42@@Z PROC ; std::codecvt<char,char,int>::_Getcat, COMDAT

; 783  : 		{	// return locale category mask and construct standard facet

	push	-1
	push	__ehhandler$?_Getcat@?$codecvt@DDH@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 152				; 00000098H
	push	ebx
	push	esi

; 784  : 		if (_Ppf != 0 && *_Ppf == 0)

	mov	esi, DWORD PTR __Ppf$[esp+168]
	xor	ebx, ebx
	mov	DWORD PTR $T173869[esp+172], ebx
	test	esi, esi
	je	$LN55@Getcat@2
	cmp	DWORD PTR [esi], ebx
	jne	$LN55@Getcat@2

; 785  : 			*_Ppf = _NEW_CRT codecvt<_Elem, _Byte, _Statype>(
; 786  : 				_Locinfo(_Ploc->name()));

	cmp	DWORD PTR ?RenNew@@3P6APAXK@ZA, ebx	; RenNew
	jne	SHORT $LN13@Getcat@2
	call	?InitEngine@@YAXXZ			; InitEngine
$LN13@Getcat@2:
	push	edi
	push	8
	call	DWORD PTR ?RenNew@@3P6APAXK@ZA		; RenNew
	mov	edi, eax
	add	esp, 4
	mov	DWORD PTR $T173863[esp+176], edi
	mov	DWORD PTR __$EHRec$[esp+184], 0
	test	edi, edi
	je	SHORT $LN4@Getcat@2
	mov	eax, DWORD PTR __Ploc$[esp+172]
	lea	esi, DWORD PTR $T173865[esp+176]
	call	?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::locale::name
	push	eax
	lea	eax, DWORD PTR $T173864[esp+180]
	mov	BYTE PTR __$EHRec$[esp+188], 1
	push	eax
	mov	DWORD PTR $T173869[esp+184], 1
	call	??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Locinfo::_Locinfo
	mov	esi, DWORD PTR __Ppf$[esp+172]
	mov	ebx, 3
	mov	DWORD PTR [edi+4], 0
	mov	DWORD PTR [edi], OFFSET ??_7?$codecvt@DDH@std@@6B@
	jmp	SHORT $LN5@Getcat@2
$LN4@Getcat@2:
	xor	edi, edi
$LN5@Getcat@2:
	mov	DWORD PTR __$EHRec$[esp+184], 2
	mov	DWORD PTR [esi], edi
	pop	edi
	test	bl, 2
	je	SHORT $LN11@Getcat@2
	lea	ecx, DWORD PTR $T173864[esp+172]
	and	ebx, -3					; fffffffdH
	push	ecx
	mov	DWORD PTR $T173869[esp+176], ebx
	call	??1_Locinfo@std@@QAE@XZ			; std::_Locinfo::~_Locinfo
$LN11@Getcat@2:
	mov	DWORD PTR __$EHRec$[esp+180], -1
	test	bl, 1
	je	SHORT $LN55@Getcat@2
	cmp	DWORD PTR $T173865[esp+196], 16		; 00000010H
	jb	SHORT $LN55@Getcat@2
	mov	edx, DWORD PTR $T173865[esp+176]
	push	edx
	call	DWORD PTR ?RenDelete@@3P6AXPAX@ZA	; RenDelete
	add	esp, 4
$LN55@Getcat@2:

; 787  : 		return (_X_CTYPE);
; 788  : 		}

	mov	ecx, DWORD PTR __$EHRec$[esp+172]
	pop	esi
	mov	eax, 2
	pop	ebx
	mov	DWORD PTR fs:0, ecx
	add	esp, 164				; 000000a4H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getcat@?$codecvt@DDH@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
	mov	eax, DWORD PTR $T173863[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?_Getcat@?$codecvt@DDH@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1:
	mov	eax, DWORD PTR $T173869[ebp]
	and	eax, 1
	je	$LN8@Getcat@2
	and	DWORD PTR $T173869[ebp], -2		; fffffffeH
	lea	ecx, DWORD PTR $T173865[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN8@Getcat@2:
	ret	0
__ehhandler$?_Getcat@?$codecvt@DDH@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
	mov	eax, OFFSET __ehfuncinfo$?_Getcat@?$codecvt@DDH@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Getcat@?$codecvt@DDH@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ENDP ; std::codecvt<char,char,int>::_Getcat
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z$0
__ehfuncinfo$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z
_TEXT	SEGMENT
__Psave$138122 = -36					; size = 4
__Lock$174040 = -32					; size = 4
__Lock$174062 = -32					; size = 4
__Lock$138121 = -28					; size = 4
$T174033 = -24						; size = 12
__$EHRec$ = -12						; size = 12
??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z PROC ; std::use_facet<std::codecvt<char,char,int> >, COMDAT
; __Loc$ = edi

; 486  : {	// get facet reference from locale

	push	-1
	push	__ehhandler$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 24					; 00000018H
	push	ebx
	push	esi

; 487  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

	push	0
	lea	ecx, DWORD PTR __Lock$138121[esp+48]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[esp+52], 0

; 488  : 		const locale::facet *_Psave =
; 489  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet
; 490  : 
; 491  : 		size_t _Id = _Facet::id;

	cmp	DWORD PTR ?id@?$codecvt@DDH@std@@2V0locale@2@A, 0 ; std::codecvt<char,char,int>::id
	mov	ebx, DWORD PTR ?_Psave@?$_Facetptr@V?$codecvt@DDH@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::codecvt<char,char,int> >::_Psave
	mov	DWORD PTR __Psave$138122[esp+44], ebx
	jne	SHORT $LN11@use_facet@2
	push	0
	lea	ecx, DWORD PTR __Lock$174040[esp+48]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	cmp	DWORD PTR ?id@?$codecvt@DDH@std@@2V0locale@2@A, 0 ; std::codecvt<char,char,int>::id
	jne	SHORT $LN10@use_facet@2
	mov	eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
	inc	eax
	mov	DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
	mov	DWORD PTR ?id@?$codecvt@DDH@std@@2V0locale@2@A, eax ; std::codecvt<char,char,int>::id
$LN10@use_facet@2:
	lea	ecx, DWORD PTR __Lock$174040[esp+44]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
$LN11@use_facet@2:
	mov	esi, DWORD PTR ?id@?$codecvt@DDH@std@@2V0locale@2@A ; std::codecvt<char,char,int>::id

; 492  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);

	mov	eax, DWORD PTR [edi]
	cmp	esi, DWORD PTR [eax+12]
	jae	SHORT $LN20@use_facet@2
	mov	ecx, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR [ecx+esi*4]
	test	ecx, ecx
	jne	SHORT $LN16@use_facet@2
$LN30@use_facet@2:
	cmp	BYTE PTR [eax+20], 0
	je	SHORT $LN16@use_facet@2
	call	?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
	cmp	esi, DWORD PTR [eax+12]
	jae	SHORT $LN31@use_facet@2
	mov	edx, DWORD PTR [eax+8]
	mov	esi, DWORD PTR [edx+esi*4]
	jmp	SHORT $LN15@use_facet@2
$LN20@use_facet@2:
	xor	ecx, ecx
	jmp	SHORT $LN30@use_facet@2
$LN16@use_facet@2:
	mov	esi, ecx
$LN15@use_facet@2:

; 493  : 
; 494  : 		if (_Pf != 0)

	test	esi, esi
	jne	SHORT $LN28@use_facet@2
$LN31@use_facet@2:

; 495  : 			;	// got facet from locale
; 496  : 		else if (_Psave != 0)

	test	ebx, ebx
	je	SHORT $LN4@use_facet@2

; 497  : 			_Pf = _Psave;	// lazy facet already allocated

	mov	esi, ebx
	jmp	SHORT $LN28@use_facet@2
$LN4@use_facet@2:

; 498  : 		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

	lea	eax, DWORD PTR __Psave$138122[esp+44]
	push	edi
	push	eax
	call	?_Getcat@?$codecvt@DDH@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::codecvt<char,char,int>::_Getcat
	add	esp, 8
	cmp	eax, -1
	jne	SHORT $LN2@use_facet@2

; 499  : 
; 500  :  #if _HAS_EXCEPTIONS
; 501  : 		_THROW_NCEE(bad_cast, _EMPTY_ARGUMENT);	// lazy disallowed

	push	OFFSET ??_C@_08EPJLHIJG@bad?5cast?$AA@
	lea	ecx, DWORD PTR $T174033[esp+48]
	call	??0bad_cast@std@@QAE@PBD@Z		; std::bad_cast::bad_cast
	push	OFFSET __TI2?AVbad_cast@std@@
	lea	ecx, DWORD PTR $T174033[esp+48]
	push	ecx
	call	__CxxThrowException@8
$LN34@use_facet@2:
$LN2@use_facet@2:

; 502  : 
; 503  : 	#else /* _HAS_EXCEPTIONS */
; 504  : 			abort();	// lazy disallowed
; 505  : 	#endif /* _HAS_EXCEPTIONS */
; 506  : 
; 507  : 		else
; 508  : 			{	// queue up lazy facet for destruction
; 509  : 			_Pf = _Psave;

	mov	esi, DWORD PTR __Psave$138122[esp+44]

; 510  : 			_Facetptr<_Facet>::_Psave = _Psave;
; 511  : 
; 512  : 			locale::facet *_Pfmod = (_Facet *)_Psave;
; 513  : 			_Pfmod->_Incref();

	push	0
	lea	ecx, DWORD PTR __Lock$174062[esp+48]
	mov	DWORD PTR ?_Psave@?$_Facetptr@V?$codecvt@DDH@std@@@std@@2PBVfacet@locale@2@B, esi ; std::_Facetptr<std::codecvt<char,char,int> >::_Psave
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	eax, DWORD PTR [esi+4]
	cmp	eax, -1
	jae	SHORT $LN24@use_facet@2
	inc	eax
	mov	DWORD PTR [esi+4], eax
$LN24@use_facet@2:
	lea	ecx, DWORD PTR __Lock$174062[esp+44]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit

; 514  : 			_Pfmod->_Register();

	push	esi
	call	?facet_Register@facet@locale@std@@CAXPAV123@@Z ; std::locale::facet::facet_Register
	add	esp, 4
$LN28@use_facet@2:

; 515  : 			}
; 516  : 
; 517  : 		return ((const _Facet&)(*_Pf));	// should be dynamic_cast

	lea	ecx, DWORD PTR __Lock$138121[esp+44]
	mov	DWORD PTR __$EHRec$[esp+52], -1
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit

; 518  : 	_END_LOCK()
; 519  : 	}

	mov	ecx, DWORD PTR __$EHRec$[esp+44]
	mov	eax, esi
	pop	esi
	pop	ebx
	mov	DWORD PTR fs:0, ecx
	add	esp, 36					; 00000024H
	ret	0
$LN33@use_facet@2:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z$0:
	lea	ecx, DWORD PTR __Lock$138121[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
__ehhandler$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z:
	mov	eax, OFFSET __ehfuncinfo$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::codecvt<char,char,int> >
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 9.0\vc\include\xstring
xdata$x	SEGMENT
__unwindtable$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$0
__ehfuncinfo$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\fstream
xdata$x	ENDS
;	COMDAT ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ
_TEXT	SEGMENT
$T174167 = -52						; size = 4
__Dest$137102 = -48					; size = 4
__Str$137106 = -44					; size = 28
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite, COMDAT

; 490  : 		{	// put shift to initial conversion state, as needed

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	mov	eax, DWORD PTR fs:0
	mov	ecx, DWORD PTR _this$[ebp]
	push	-1
	push	__ehhandler$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 40					; 00000028H

; 491  : 		if (_Pcvt == 0 || !_Wrotesome)

	cmp	DWORD PTR [ecx+60], 0
	push	ebx
	push	esi
	push	edi
	je	$LN14@Endwrite
	cmp	BYTE PTR [ecx+65], 0
	je	$LN14@Endwrite

; 492  : 			return (true);
; 493  : 		else
; 494  : 			{	// may have to put
; 495  : 			const int _STRING_INC = 8;
; 496  : 			char *_Dest;
; 497  : 			if (_Traits::eq_int_type(_Traits::eof(), overflow()))

	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+4]
	push	-1
	call	edx
	cmp	eax, -1

; 498  : 				return (false);

	je	$LN193@Endwrite

; 499  : 
; 500  : 			string _Str(_STRING_INC, '\0');

	lea	esi, DWORD PTR __Str$137106[esp+64]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[esp+72], 0
$LN192@Endwrite:
	mov	eax, DWORD PTR __Str$137106[esp+68]
	mov	edx, DWORD PTR __Str$137106[esp+88]
$LL11@Endwrite:

; 501  : 			for (; ; )
; 502  : 				switch (_Pcvt->unshift(_State,
; 503  : 					&*_Str.begin(), &*_Str.begin() + _Str.size(), _Dest))

	cmp	edx, 16					; 00000010H
	jb	$LN29@Endwrite
	mov	ebx, eax
	mov	DWORD PTR $T174167[esp+64], ebx
	test	eax, eax
	je	SHORT $LN33@Endwrite
$LN180@Endwrite:
	mov	ecx, eax
	cmp	edx, 16					; 00000010H
	jae	SHORT $LN44@Endwrite
	lea	ecx, DWORD PTR __Str$137106[esp+68]
$LN44@Endwrite:
	cmp	ecx, ebx
	ja	SHORT $LN33@Endwrite
	mov	ecx, eax
	cmp	edx, 16					; 00000010H
	jae	SHORT $LN48@Endwrite
	lea	ecx, DWORD PTR __Str$137106[esp+68]
$LN48@Endwrite:
	mov	esi, DWORD PTR __Str$137106[esp+84]
	add	ecx, esi
	cmp	ebx, ecx
	jbe	SHORT $LN34@Endwrite
$LN33@Endwrite:
	call	__invalid_parameter_noinfo
	mov	edx, DWORD PTR __Str$137106[esp+88]
	mov	eax, DWORD PTR __Str$137106[esp+68]
$LN34@Endwrite:
	lea	ecx, DWORD PTR __Str$137106[esp+64]
	cmp	ecx, -4					; fffffffcH
	je	SHORT $LN51@Endwrite
	mov	ecx, eax
	cmp	edx, 16					; 00000010H
	jae	SHORT $LN61@Endwrite
	lea	ecx, DWORD PTR __Str$137106[esp+68]
$LN61@Endwrite:
	mov	esi, DWORD PTR __Str$137106[esp+84]
	add	ecx, esi
	cmp	ebx, ecx
	jb	SHORT $LN51@Endwrite
	call	__invalid_parameter_noinfo
	mov	edx, DWORD PTR __Str$137106[esp+88]
	mov	eax, DWORD PTR __Str$137106[esp+68]
$LN51@Endwrite:
	mov	edi, DWORD PTR __Str$137106[esp+84]
	cmp	edx, 16					; 00000010H
	jb	$LN68@Endwrite
	mov	esi, eax
	test	eax, eax
	je	SHORT $LN72@Endwrite
$LN181@Endwrite:
	mov	ecx, eax
	cmp	edx, 16					; 00000010H
	jae	SHORT $LN83@Endwrite
	lea	ecx, DWORD PTR __Str$137106[esp+68]
$LN83@Endwrite:
	cmp	ecx, esi
	ja	SHORT $LN72@Endwrite
	mov	ecx, eax
	cmp	edx, 16					; 00000010H
	jae	SHORT $LN87@Endwrite
	lea	ecx, DWORD PTR __Str$137106[esp+68]
$LN87@Endwrite:
	mov	ebx, DWORD PTR __Str$137106[esp+84]
	add	ecx, ebx
	mov	ebx, DWORD PTR $T174167[esp+64]
	cmp	esi, ecx
	jbe	SHORT $LN73@Endwrite
$LN72@Endwrite:
	call	__invalid_parameter_noinfo
	mov	edx, DWORD PTR __Str$137106[esp+88]
	mov	eax, DWORD PTR __Str$137106[esp+68]
$LN73@Endwrite:
	lea	ecx, DWORD PTR __Str$137106[esp+64]
	cmp	ecx, -4					; fffffffcH
	je	SHORT $LN90@Endwrite
	cmp	edx, 16					; 00000010H
	jae	SHORT $LN100@Endwrite
	lea	eax, DWORD PTR __Str$137106[esp+68]
$LN100@Endwrite:
	mov	edx, DWORD PTR __Str$137106[esp+84]
	add	eax, edx
	cmp	esi, eax
	jb	SHORT $LN90@Endwrite
	call	__invalid_parameter_noinfo
$LN90@Endwrite:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	edx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [edx+24]
	lea	eax, DWORD PTR __Dest$137102[esp+64]
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	add	ebx, edi
	push	ebx
	push	esi
	add	eax, 68					; 00000044H
	push	eax
	call	edx
	sub	eax, 0
	je	SHORT $LN7@Endwrite
	sub	eax, 1
	je	SHORT $LN6@Endwrite
	sub	eax, 2

; 523  : 
; 524  : 				default:
; 525  : 					return (false);	// conversion failed

	lea	ecx, DWORD PTR __Str$137106[esp+64]
	jne	$LN194@Endwrite

; 518  : 					break;
; 519  : 					}
; 520  : 
; 521  : 				case codecvt_base::noconv:
; 522  : 					return (true);	// nothing to do

	jmp	$LN195@Endwrite

; 501  : 			for (; ; )
; 502  : 				switch (_Pcvt->unshift(_State,
; 503  : 					&*_Str.begin(), &*_Str.begin() + _Str.size(), _Dest))

$LN29@Endwrite:
	lea	ebx, DWORD PTR __Str$137106[esp+68]
	mov	DWORD PTR $T174167[esp+64], ebx
	jmp	$LN180@Endwrite
$LN68@Endwrite:
	lea	esi, DWORD PTR __Str$137106[esp+68]
	jmp	$LN181@Endwrite
$LN7@Endwrite:

; 504  : 				{	// test result of homing conversion
; 505  : 				case codecvt_base::ok:
; 506  : 					_Wrotesome = false;	// homed successfully

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+65], 0
$LN6@Endwrite:

; 507  : 
; 508  : 				case codecvt_base::partial:	// fall through
; 509  : 					{	// put any generated bytes
; 510  : 					size_t _Count = _Dest - &*_Str.begin();

	mov	edx, DWORD PTR __Str$137106[esp+88]
	mov	eax, DWORD PTR __Str$137106[esp+68]
	cmp	edx, 16					; 00000010H
	jb	$LN107@Endwrite
	mov	esi, eax
	test	eax, eax
	je	SHORT $LN111@Endwrite
$LN182@Endwrite:
	mov	ecx, eax
	cmp	edx, 16					; 00000010H
	jae	SHORT $LN122@Endwrite
	lea	ecx, DWORD PTR __Str$137106[esp+68]
$LN122@Endwrite:
	cmp	ecx, esi
	ja	SHORT $LN111@Endwrite
	mov	ecx, eax
	cmp	edx, 16					; 00000010H
	jae	SHORT $LN126@Endwrite
	lea	ecx, DWORD PTR __Str$137106[esp+68]
$LN126@Endwrite:
	mov	edi, DWORD PTR __Str$137106[esp+84]
	add	ecx, edi
	cmp	esi, ecx
	jbe	SHORT $LN112@Endwrite
$LN111@Endwrite:
	call	__invalid_parameter_noinfo
	mov	edx, DWORD PTR __Str$137106[esp+88]
	mov	eax, DWORD PTR __Str$137106[esp+68]
$LN112@Endwrite:
	lea	ecx, DWORD PTR __Str$137106[esp+64]
	cmp	ecx, -4					; fffffffcH
	je	SHORT $LN129@Endwrite
	mov	ecx, eax
	cmp	edx, 16					; 00000010H
	jae	SHORT $LN139@Endwrite
	lea	ecx, DWORD PTR __Str$137106[esp+68]
$LN139@Endwrite:
	mov	edi, DWORD PTR __Str$137106[esp+84]
	add	ecx, edi
	cmp	esi, ecx
	jb	SHORT $LN129@Endwrite
	call	__invalid_parameter_noinfo
	mov	edx, DWORD PTR __Str$137106[esp+88]
	mov	eax, DWORD PTR __Str$137106[esp+68]
$LN129@Endwrite:
	mov	edi, DWORD PTR __Dest$137102[esp+64]
	sub	edi, esi

; 511  : 					if (0 < _Count && _Count !=
; 512  : 						fwrite(&*_Str.begin(), 1, _Count, _Myfile))

	je	$LN5@Endwrite
	cmp	edx, 16					; 00000010H
	jb	$LN144@Endwrite
	mov	esi, eax
	test	eax, eax
	je	SHORT $LN148@Endwrite
$LN183@Endwrite:
	mov	ecx, eax
	cmp	edx, 16					; 00000010H
	jae	SHORT $LN159@Endwrite
	lea	ecx, DWORD PTR __Str$137106[esp+68]
$LN159@Endwrite:
	cmp	ecx, esi
	ja	SHORT $LN148@Endwrite
	mov	ecx, eax
	cmp	edx, 16					; 00000010H
	jae	SHORT $LN163@Endwrite
	lea	ecx, DWORD PTR __Str$137106[esp+68]
$LN163@Endwrite:
	mov	ebx, DWORD PTR __Str$137106[esp+84]
	add	ecx, ebx
	cmp	esi, ecx
	jbe	SHORT $LN149@Endwrite
$LN148@Endwrite:
	call	__invalid_parameter_noinfo
	mov	edx, DWORD PTR __Str$137106[esp+88]
	mov	eax, DWORD PTR __Str$137106[esp+68]
$LN149@Endwrite:
	lea	ecx, DWORD PTR __Str$137106[esp+64]
	cmp	ecx, -4					; fffffffcH
	je	SHORT $LN166@Endwrite
	cmp	edx, 16					; 00000010H
	jae	SHORT $LN176@Endwrite
	lea	eax, DWORD PTR __Str$137106[esp+68]
$LN176@Endwrite:
	mov	edx, DWORD PTR __Str$137106[esp+84]
	add	eax, edx
	cmp	esi, eax
	jb	SHORT $LN166@Endwrite
	call	__invalid_parameter_noinfo
$LN166@Endwrite:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	push	edi
	push	1
	push	esi
	call	_fwrite
	add	esp, 16					; 00000010H
	cmp	edi, eax
	jne	SHORT $LN178@Endwrite
	mov	edx, DWORD PTR __Str$137106[esp+88]
	mov	eax, DWORD PTR __Str$137106[esp+68]
$LN5@Endwrite:

; 514  : 					if (!_Wrotesome)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	BYTE PTR [ecx+65], 0
	je	SHORT $LN179@Endwrite

; 516  : 					if (_Count == 0)

	test	edi, edi
	jne	$LL11@Endwrite

; 517  : 						_Str.append(_STRING_INC, '\0');	// try with more space

	push	edi
	lea	eax, DWORD PTR [edi+8]
	lea	edi, DWORD PTR __Str$137106[esp+68]
	call	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 526  : 				}

	jmp	$LN192@Endwrite

; 507  : 
; 508  : 				case codecvt_base::partial:	// fall through
; 509  : 					{	// put any generated bytes
; 510  : 					size_t _Count = _Dest - &*_Str.begin();

$LN107@Endwrite:
	lea	esi, DWORD PTR __Str$137106[esp+68]
	jmp	$LN182@Endwrite

; 511  : 					if (0 < _Count && _Count !=
; 512  : 						fwrite(&*_Str.begin(), 1, _Count, _Myfile))

$LN144@Endwrite:
	lea	esi, DWORD PTR __Str$137106[esp+68]
	jmp	$LN183@Endwrite
$LN178@Endwrite:

; 513  : 						return (false);	// write failed

	lea	ecx, DWORD PTR __Str$137106[esp+64]
$LN194@Endwrite:
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN193@Endwrite:
	xor	al, al

; 527  : 			}
; 528  : 		}

	mov	ecx, DWORD PTR __$EHRec$[esp+64]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
$LN179@Endwrite:

; 515  : 						return (true);

	lea	ecx, DWORD PTR __Str$137106[esp+64]
$LN195@Endwrite:
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN14@Endwrite:

; 527  : 			}
; 528  : 		}

	mov	ecx, DWORD PTR __$EHRec$[esp+64]
	pop	edi
	pop	esi
	mov	al, 1
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$0:
	lea	ecx, DWORD PTR __Str$137106[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ:
	mov	eax, OFFSET __ehfuncinfo$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
; Function compile flags: /Ogtpy
;	COMDAT ?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ
_TEXT	SEGMENT
?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::close, COMDAT
; _this$ = esi

; 205  : 		{	// close the C stream

	push	ebx

; 206  : 		_Myt *_Ans = this;
; 207  : 		if (_Myfile == 0)

	xor	ebx, ebx
	push	edi
	mov	edi, esi
	cmp	DWORD PTR [esi+76], ebx

; 208  : 			_Ans = 0;
; 209  : 		else

	je	SHORT $LN18@close

; 210  : 			{	// put any homing sequence and close file
; 211  : 			if (!_Endwrite())

	push	esi
	call	?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
	test	al, al
	jne	SHORT $LN2@close

; 212  : 				_Ans = 0;

	xor	edi, edi
$LN2@close:

; 213  : 			if (fclose(_Myfile) != 0)

	mov	eax, DWORD PTR [esi+76]
	push	eax
	call	_fclose
	add	esp, 4
	test	eax, eax
	je	SHORT $LN1@close
$LN18@close:

; 214  : 				_Ans = 0;

	xor	edi, edi
$LN1@close:

; 215  : 			}
; 216  : 		_Init(0, _Closefl);

	lea	ecx, DWORD PTR [esi+8]
	mov	DWORD PTR [esi+16], ecx
	mov	BYTE PTR [esi+72], bl
	mov	BYTE PTR [esi+65], bl
	lea	edx, DWORD PTR [esi+24]
	mov	DWORD PTR [esi+32], edx
	lea	ecx, DWORD PTR [esi+28]
	mov	DWORD PTR [esi+36], ecx
	lea	eax, DWORD PTR [esi+12]
	mov	DWORD PTR [esi+20], eax
	lea	edx, DWORD PTR [esi+40]
	mov	DWORD PTR [esi+48], edx
	lea	ecx, DWORD PTR [esi+44]
	mov	DWORD PTR [esi+52], ecx
	mov	DWORD PTR [eax], ebx
	mov	edx, DWORD PTR [esi+36]
	mov	DWORD PTR [edx], ebx
	mov	eax, DWORD PTR [esi+52]
	mov	DWORD PTR [eax], ebx
	mov	ecx, DWORD PTR [esi+16]
	mov	DWORD PTR [ecx], ebx
	mov	edx, DWORD PTR [esi+32]
	mov	ecx, DWORD PTR ?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4HA
	mov	DWORD PTR [edx], ebx
	mov	eax, DWORD PTR [esi+48]
	mov	DWORD PTR [eax], ebx

; 217  : 		return (_Ans);

	mov	eax, edi
	pop	edi
	mov	DWORD PTR [esi+76], ebx
	mov	DWORD PTR [esi+60], ebx
	mov	DWORD PTR [esi+68], ecx
	pop	ebx

; 218  : 		}

	ret	0
?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::close
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
_TEXT	SEGMENT
__Loc$ = 8						; size = 4
?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::imbue, COMDAT
; _this$ = ecx

; 454  : 		{	// set locale to argument (capture nontrivial codecvt facet)

	push	esi
	push	edi

; 455  : 		_Initcvt((_Cvt *)&_USE(_Loc, _Cvt));

	mov	edi, DWORD PTR __Loc$[esp+4]
	mov	esi, ecx
	call	??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z ; std::use_facet<std::codecvt<char,char,int> >
	mov	edi, eax
	call	?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAV?$codecvt@DDH@2@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt
	pop	edi
	pop	esi

; 456  : 		}

	ret	4
?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::imbue
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z
_TEXT	SEGMENT
__Fileposition$ = -8					; size = 8
___$ReturnUdt$ = 8					; size = 4
__Pos$ = 12						; size = 24
___formal$ = 36						; size = 4
?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::seekpos, COMDAT
; _this$ = ecx

; 414  : 		{	// change position to _Pos

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 8

; 415  : 		fpos_t _Fileposition = _POS_TYPE_TO_FPOS_T(_Pos);

	mov	eax, DWORD PTR __Pos$[ebp+8]
	push	esi
	mov	esi, ecx

; 416  : 		off_type _Off = (off_type)_Pos - (off_type)_FPOSOFF(_Fileposition);
; 417  : 
; 418  : 		if (_Myfile == 0 || !_Endwrite()
; 419  : 			|| fsetpos(_Myfile, &_Fileposition) != 0
; 420  : 			|| _Off != 0 && fseek(_Myfile, (long)_Off, SEEK_CUR) != 0
; 421  : 			|| fgetpos(_Myfile, &_Fileposition) != 0)

	cmp	DWORD PTR [esi+76], 0
	mov	ecx, DWORD PTR __Pos$[ebp+12]
	push	edi
	mov	edi, DWORD PTR __Pos$[ebp]
	mov	DWORD PTR __Fileposition$[esp+16], eax
	mov	DWORD PTR __Fileposition$[esp+20], ecx
	je	$LN3@seekpos@2
	push	esi
	call	?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
	test	al, al
	je	$LN3@seekpos@2
	mov	eax, DWORD PTR [esi+76]
	lea	edx, DWORD PTR __Fileposition$[esp+16]
	push	edx
	push	eax
	call	_fsetpos
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN3@seekpos@2
	test	edi, edi
	je	SHORT $LN2@seekpos@2
	mov	ecx, DWORD PTR [esi+76]
	push	1
	push	edi
	push	ecx
	call	_fseek
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN3@seekpos@2
$LN2@seekpos@2:
	mov	eax, DWORD PTR [esi+76]
	lea	edx, DWORD PTR __Fileposition$[esp+16]
	push	edx
	push	eax
	call	_fgetpos
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN3@seekpos@2

; 423  : 
; 424  : 		_State = _POS_TYPE_TO_STATE(_Pos);

	mov	ecx, DWORD PTR __Pos$[ebp+16]

; 425  : 
; 426  : 		if (_Mysb::gptr() == &_Mychar)

	mov	edx, DWORD PTR [esi+32]
	mov	DWORD PTR [esi+68], ecx
	lea	ecx, DWORD PTR [esi+64]
	cmp	DWORD PTR [edx], ecx
	jne	SHORT $LN17@seekpos@2

; 427  : 			_Mysb::setg(&_Mychar, &_Mychar + 1,
; 428  : 				&_Mychar + 1);	// discard any putback

	mov	edx, DWORD PTR [esi+16]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [esi+32]
	lea	eax, DWORD PTR [esi+65]
	mov	edx, esi
	sub	edx, eax
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [esi+48]
	add	edx, 65					; 00000041H
	mov	DWORD PTR [eax], edx
$LN17@seekpos@2:

; 429  : 		return (_POS_TYPE_FROM_STATE(pos_type, _State,

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR __Fileposition$[esp+16]
	mov	edx, DWORD PTR __Fileposition$[esp+20]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR [esi+68]
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+12], edx
	mov	DWORD PTR [eax+16], ecx

; 430  : 			_Fileposition));	// return new position
; 431  : 		}

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	32					; 00000020H
$LN3@seekpos@2:

; 422  : 			return (pos_type(_BADOFF));	// report failure

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR ?_BADOFF@std@@3JB	; std::_BADOFF

; 430  : 			_Fileposition));	// return new position
; 431  : 		}

	pop	edi
	mov	DWORD PTR [eax], edx
	mov	DWORD PTR [eax+8], 0
	mov	DWORD PTR [eax+12], 0
	mov	DWORD PTR [eax+16], 0
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	32					; 00000020H
?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::seekpos
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z
_TEXT	SEGMENT
__Fileposition$ = -8					; size = 8
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
__Way$ = 16						; size = 4
___formal$ = 20						; size = 4
?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::seekoff, COMDAT
; _this$ = ecx

; 390  : 		{	// change position by _Off

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	mov	esi, ecx

; 391  : 		fpos_t _Fileposition;
; 392  : 
; 393  : 		if (_Mysb::gptr() == &_Mychar	// something putback
; 394  : 			&& _Way == ios_base::cur	// a relative seek
; 395  : 			&& _Pcvt == 0)	// not converting

	mov	eax, DWORD PTR [esi+32]
	push	edi
	lea	edi, DWORD PTR [esi+64]
	cmp	DWORD PTR [eax], edi
	jne	SHORT $LN19@seekoff@2
	cmp	DWORD PTR __Way$[ebp], 1
	jne	SHORT $LN19@seekoff@2
	cmp	DWORD PTR [esi+60], 0
	jne	SHORT $LN19@seekoff@2

; 396  : 			_Off -= (off_type)sizeof (_Elem);	// back up over _Elem bytes

	mov	ebx, DWORD PTR __Off$[ebp]
	dec	ebx
	jmp	SHORT $LN6@seekoff@2
$LN19@seekoff@2:
	mov	ebx, DWORD PTR __Off$[ebp]
$LN6@seekoff@2:

; 397  : 
; 398  : 		if (_Myfile == 0 || !_Endwrite()
; 399  : 			|| (_Off != 0 || _Way != ios_base::cur)
; 400  : 				&& fseek(_Myfile, (long)_Off, _Way) != 0
; 401  : 			|| fgetpos(_Myfile, &_Fileposition) != 0)

	cmp	DWORD PTR [esi+76], 0
	je	$LN4@seekoff@2
	push	esi
	call	?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
	test	al, al
	je	SHORT $LN4@seekoff@2
	test	ebx, ebx
	jne	SHORT $LN2@seekoff@2
	cmp	DWORD PTR __Way$[ebp], 1
	je	SHORT $LN3@seekoff@2
$LN2@seekoff@2:
	mov	ecx, DWORD PTR __Way$[ebp]
	mov	edx, DWORD PTR [esi+76]
	push	ecx
	push	ebx
	push	edx
	call	_fseek
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN4@seekoff@2
$LN3@seekoff@2:
	mov	ecx, DWORD PTR [esi+76]
	lea	eax, DWORD PTR __Fileposition$[esp+24]
	push	eax
	push	ecx
	call	_fgetpos
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN4@seekoff@2

; 403  : 
; 404  : 		if (_Mysb::gptr() == &_Mychar)

	mov	edx, DWORD PTR [esi+32]
	cmp	DWORD PTR [edx], edi
	jne	SHORT $LN15@seekoff@2

; 405  : 			_Mysb::setg(&_Mychar, &_Mychar + 1,
; 406  : 				&_Mychar + 1);	// discard any putback

	mov	ecx, DWORD PTR [esi+16]
	mov	DWORD PTR [ecx], edi
	mov	edx, DWORD PTR [esi+32]
	lea	eax, DWORD PTR [esi+65]
	mov	ecx, esi
	mov	DWORD PTR [edx], eax
	mov	edx, DWORD PTR [esi+48]
	sub	ecx, eax
	add	ecx, 65					; 00000041H
	mov	DWORD PTR [edx], ecx
$LN15@seekoff@2:

; 407  : 		return (_POS_TYPE_FROM_STATE(pos_type, _State,

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR __Fileposition$[esp+24]
	mov	edx, DWORD PTR __Fileposition$[esp+28]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR [esi+68]
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+12], edx
	mov	DWORD PTR [eax+16], ecx

; 408  : 			_Fileposition));	// return new position
; 409  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN4@seekoff@2:

; 402  : 			return (pos_type(_BADOFF));	// report failure

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR ?_BADOFF@std@@3JB	; std::_BADOFF

; 408  : 			_Fileposition));	// return new position
; 409  : 		}

	pop	edi
	xor	ecx, ecx
	pop	esi
	mov	DWORD PTR [eax], edx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::seekoff
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ$0
__ehfuncinfo$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 117  : 		{	// destroy the object

	push	-1
	push	__ehhandler$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	push	esi
	mov	esi, ecx
	mov	DWORD PTR _this$[esp+20], esi
	mov	DWORD PTR [esi], OFFSET ??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@
	mov	DWORD PTR __$EHRec$[esp+28], 0

; 118  : 		if (_Closef)

	cmp	BYTE PTR [esi+72], 0
	je	SHORT $LN1@basic_file

; 119  : 			close();

	call	?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ ; std::basic_filebuf<char,std::char_traits<char> >::close
$LN1@basic_file:

; 120  : 		}

	mov	ecx, esi
	mov	DWORD PTR __$EHRec$[esp+28], -1
	call	??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
	mov	ecx, DWORD PTR __$EHRec$[esp+20]
	pop	esi
	mov	DWORD PTR fs:0, ecx
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
__ehhandler$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 9.0\vc\include\ostream
xdata$x	SEGMENT
__unwindtable$??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ$2
__ehfuncinfo$??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\fstream
xdata$x	ENDS
;	COMDAT ??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T174762 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_ofstream<char,std::char_traits<char> >::~basic_ofstream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 741  : 		{	// destroy the object

	push	-1
	push	__ehhandler$??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 8
	mov	eax, DWORD PTR [ecx-84]
	mov	edx, DWORD PTR [eax+4]
	push	esi
	push	edi
	mov	DWORD PTR _this$[esp+28], ecx
	mov	DWORD PTR [edx+ecx-84], OFFSET ??_7?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@

; 742  : 		}

	lea	edi, DWORD PTR [ecx-80]
	mov	esi, edi
	mov	DWORD PTR __$EHRec$[esp+36], 0
	mov	DWORD PTR $T174762[esp+28], esi
	mov	DWORD PTR [esi], OFFSET ??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@
	mov	BYTE PTR __$EHRec$[esp+36], 1
	cmp	BYTE PTR [esi+72], 0
	je	SHORT $LN5@basic_ofst
	call	?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ ; std::basic_filebuf<char,std::char_traits<char> >::close
$LN5@basic_ofst:
	mov	ecx, esi
	mov	BYTE PTR __$EHRec$[esp+36], 0
	call	??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
	mov	eax, DWORD PTR [edi-4]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+edi-4], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
	mov	ecx, DWORD PTR __$EHRec$[esp+28]
	pop	edi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	add	esp, 20					; 00000014H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 80					; 00000050H
	jmp	??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >
__unwindfunclet$??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ$2:
	mov	ecx, DWORD PTR $T174762[ebp]
	jmp	??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
__ehhandler$??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_ofstream<char,std::char_traits<char> >::~basic_ofstream<char,std::char_traits<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_ofstream<char,std::char_traits<char> >::`vbase destructor', COMDAT
; _this$ = eax
	push	esi
	mov	esi, eax
	add	esi, 84					; 00000054H
	mov	ecx, esi
	call	??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ofstream<char,std::char_traits<char> >::~basic_ofstream<char,std::char_traits<char> >
	push	esi
	mov	DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
	call	?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
	add	esp, 4
	pop	esi
	ret	0
??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_ofstream<char,std::char_traits<char> >::`vbase destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0failure@ios_base@std@@QAE@ABV012@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0failure@ios_base@std@@QAE@ABV012@@Z PROC		; std::ios_base::failure::failure, COMDAT
; _this$ = ecx
	mov	eax, DWORD PTR ___that$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	??0runtime_error@std@@QAE@ABV01@@Z
	mov	DWORD PTR [esi], OFFSET ??_7failure@ios_base@std@@6B@
	mov	eax, esi
	pop	esi
	ret	4
??0failure@ios_base@std@@QAE@ABV012@@Z ENDP		; std::ios_base::failure::failure
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Gfailure@ios_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gfailure@ios_base@std@@UAEPAXI@Z PROC		; std::ios_base::failure::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@
	cmp	DWORD PTR [esi+36], 16			; 00000010H
	jb	SHORT $LN26@scalar@39
	mov	eax, DWORD PTR [esi+16]
	push	eax
	call	DWORD PTR ?RenDelete@@3P6AXPAX@ZA	; RenDelete
	add	esp, 4
$LN26@scalar@39:
	xor	eax, eax
	mov	DWORD PTR [esi+36], 15			; 0000000fH
	mov	DWORD PTR [esi+32], eax
	mov	ecx, esi
	mov	BYTE PTR [esi+16], al
	call	??1exception@std@@UAE@XZ		; std::exception::~exception
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $LN38@scalar@39
	push	esi
	call	DWORD PTR ?RenDelete@@3P6AXPAX@ZA	; RenDelete
	add	esp, 4
$LN38@scalar@39:
	mov	eax, esi
	pop	esi
	ret	4
??_Gfailure@ios_base@std@@UAEPAXI@Z ENDP		; std::ios_base::failure::`scalar deleting destructor'
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\xiosbase
_TEXT	ENDS
;	COMDAT ??0failure@ios_base@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
??0failure@ios_base@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; std::ios_base::failure::failure, COMDAT
; _this$ = esi
; __Message$ = eax

; 220  : 			{	// construct with message

	push	eax
	push	esi
	call	??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
	mov	DWORD PTR [esi], OFFSET ??_7failure@ios_base@std@@6B@

; 221  : 			}

	mov	eax, esi
	ret	0
??0failure@ios_base@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; std::ios_base::failure::failure
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z$2
__ehfuncinfo$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z
_TEXT	SEGMENT
__Prefix$ = -96						; size = 4
__Kseparator$ = -92					; size = 1
__Lock$175310 = -92					; size = 4
$T175266 = -88						; size = 4
$T175275 = -84						; size = 8
$T175274 = -84						; size = 8
$T175273 = -84						; size = 8
$T175272 = -84						; size = 8
__Pointptr$ = -84					; size = 4
$T175284 = -76						; size = 8
$T175283 = -76						; size = 8
$T175282 = -76						; size = 8
$T175279 = -76						; size = 8
$T175278 = -76						; size = 8
$T175277 = -76						; size = 8
$T175276 = -76						; size = 8
__Punct_fac$ = -76					; size = 4
__Groupstring$ = -68					; size = 28
__Grouping$ = -40					; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Iosbase$ = 12						; size = 4
__Fill$ = 16						; size = 1
$T175301 = 20						; size = 4
__Fillcount$ = 20					; size = 4
__Eptr$ = 20						; size = 4
__Buf$ = 20						; size = 4
$T175554 = 24						; size = 1
__Beforepoint$ = 24					; size = 4
__Afterpoint$ = 28					; size = 4
__Trailing$ = 32					; size = 4
__Enders$ = 36						; size = 3
__Count$ = 36						; size = 4
__Dest$ = 40						; size = 8
?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput, COMDAT

; 1313 : 		{	// put formatted floating-point to _Dest

	push	-1
	push	__ehhandler$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 88					; 00000058H

; 1314 : 		_DEBUG_POINTER(_Dest);
; 1315 : 		const _Mypunct& _Punct_fac = _USE(_Iosbase.getloc(), _Mypunct);

	mov	eax, DWORD PTR __Iosbase$[esp+96]
	push	ebx
	mov	ebx, DWORD PTR __Count$[esp+100]
	push	ebp
	mov	ebp, DWORD PTR __Buf$[esp+104]
	push	esi
	push	edi
	lea	edi, DWORD PTR $T175266[esp+116]
	call	?getloc@ios_base@std@@QBE?AVlocale@2@XZ	; std::ios_base::getloc
	mov	edi, eax
	mov	DWORD PTR __$EHRec$[esp+124], 0
	call	??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
	mov	edi, eax
	mov	DWORD PTR __$EHRec$[esp+124], -1
	mov	eax, DWORD PTR $T175266[esp+116]
	mov	DWORD PTR __Punct_fac$[esp+116], edi
	test	eax, eax
	je	SHORT $LN31@Fput
	mov	esi, eax
	push	0
	lea	ecx, DWORD PTR __Lock$175310[esp+120]
	mov	DWORD PTR $T175301[esp+116], esi
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	jbe	SHORT $LN33@Fput
	cmp	eax, -1
	jae	SHORT $LN33@Fput
	dec	eax
	mov	DWORD PTR [esi+4], eax
$LN33@Fput:
	mov	esi, DWORD PTR [esi+4]
	neg	esi
	sbb	esi, esi
	not	esi
	and	esi, DWORD PTR $T175301[esp+112]
	lea	ecx, DWORD PTR __Lock$175310[esp+116]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	test	esi, esi
	je	SHORT $LN31@Fput
	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	push	1
	mov	ecx, esi
	call	edx
$LN31@Fput:

; 1316 : 		const string _Grouping = _Punct_fac.grouping();

	lea	esi, DWORD PTR __Grouping$[esp+116]
	mov	ecx, edi
	call	?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::grouping
	mov	esi, 1
	mov	DWORD PTR __$EHRec$[esp+124], esi

; 1317 : 		const _Elem _Kseparator = _Punct_fac.thousands_sep();

	mov	eax, DWORD PTR [edi]
	mov	edx, DWORD PTR [eax+8]
	mov	ecx, edi
	call	edx

; 1318 : 		string _Groupstring;

	xor	ecx, ecx
	mov	BYTE PTR __Kseparator$[esp+116], al
	mov	DWORD PTR __Groupstring$[esp+140], 15	; 0000000fH
	mov	DWORD PTR __Groupstring$[esp+136], ecx
	mov	BYTE PTR __Groupstring$[esp+120], cl
	mov	BYTE PTR __$EHRec$[esp+124], 2

; 1319 : 		const _Elem _E0 = _MAKLOCCHR(_Elem, '0', _Cvt);
; 1320 : 		size_t _Prefix = _Buf[0] == '+' || _Buf[0] == '-' ? 1 : 0;

	mov	al, BYTE PTR [ebp]
	cmp	al, 43					; 0000002bH
	je	SHORT $LN19@Fput
	mov	DWORD PTR __Prefix$[esp+116], ecx
	cmp	al, 45					; 0000002dH
	jne	SHORT $LN20@Fput
$LN19@Fput:
	mov	DWORD PTR __Prefix$[esp+116], esi
$LN20@Fput:

; 1321 : 
; 1322 : 		char _Enders[3];
; 1323 : 		_Enders[0] = ::localeconv()->decimal_point[0];

	call	_localeconv
	mov	eax, DWORD PTR [eax]
	mov	cl, BYTE PTR [eax]

; 1324 : 		_Enders[1] = 'e';
; 1325 : 		_Enders[2] = '\0';
; 1326 : 
; 1327 : 		const char *_Eptr = (const char *)::memchr(_Buf,
; 1328 : 			'e', _Count);	// find exponent

	push	ebx
	push	101					; 00000065H
	push	ebp
	mov	BYTE PTR __Enders$[esp+124], cl
	mov	BYTE PTR __Enders$[esp+125], 101	; 00000065H
	mov	BYTE PTR __Enders$[esp+126], 0
	call	_memchr

; 1329 : 		const char *_Pointptr = (const char *)::memchr(_Buf,
; 1330 : 			_Enders[0], _Count);	// find decimal point

	movsx	edx, BYTE PTR __Enders$[esp+124]
	add	esp, 12					; 0000000cH
	push	ebx
	push	edx
	mov	esi, eax
	push	ebp
	mov	DWORD PTR __Eptr$[esp+124], esi
	call	_memchr
	mov	edi, eax
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Pointptr$[esp+116], edi

; 1331 : 		if (_Pointptr == 0)

	test	edi, edi
	jne	SHORT $LN16@Fput

; 1332 : 			_Trailing = 0;

	mov	DWORD PTR __Trailing$[esp+112], eax
$LN16@Fput:

; 1333 : 
; 1334 : 		if (*_Grouping.c_str() != CHAR_MAX && '\0' < *_Grouping.c_str())

	mov	ecx, DWORD PTR __Grouping$[esp+140]
	mov	edx, DWORD PTR __Grouping$[esp+120]
	mov	eax, edx
	cmp	ecx, 16					; 00000010H
	jae	SHORT $LN80@Fput
	lea	eax, DWORD PTR __Grouping$[esp+120]
$LN80@Fput:
	cmp	BYTE PTR [eax], 127			; 0000007fH
	je	$LN107@Fput
	mov	eax, edx
	cmp	ecx, 16					; 00000010H
	jae	SHORT $LN86@Fput
	lea	eax, DWORD PTR __Grouping$[esp+120]
$LN86@Fput:
	cmp	BYTE PTR [eax], 0
	jle	$LN107@Fput

; 1335 : 			{	// grouping specified, add thousands separators
; 1336 : 			_Groupstring.append(_Buf, _Count);	// assemble field into string

	push	ebx
	push	ebp
	lea	eax, DWORD PTR __Groupstring$[esp+124]
	call	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1337 : 			if (_Eptr == 0)

	test	esi, esi
	jne	SHORT $LN14@Fput

; 1338 : 				_Groupstring.append(_Trailing, '0');

	mov	eax, DWORD PTR __Trailing$[esp+112]
	push	48					; 00000030H
	lea	edi, DWORD PTR __Groupstring$[esp+120]
	call	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1339 : 			else

	mov	esi, DWORD PTR __Beforepoint$[esp+112]
	jmp	SHORT $LN13@Fput
$LN14@Fput:

; 1340 : 				{	/* dispose of any zeros before exponent */
; 1341 : 				if (_Pointptr == 0)

	test	edi, edi
	jne	SHORT $LN186@Fput

; 1342 : 					{	/* no point but exponent, put scaling zeros */
; 1343 : 					_Groupstring.append(_Beforepoint, '0');

	mov	eax, DWORD PTR __Beforepoint$[esp+112]
	push	48					; 00000030H
	lea	edi, DWORD PTR __Groupstring$[esp+120]
	call	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1344 : 					_Beforepoint = 0;

	xor	esi, esi
	jmp	SHORT $LN12@Fput
$LN186@Fput:
	mov	esi, DWORD PTR __Beforepoint$[esp+112]
$LN12@Fput:

; 1345 : 					}
; 1346 : 				_Groupstring.insert(_Eptr - _Buf, _Trailing, '0');

	mov	eax, DWORD PTR __Trailing$[esp+112]
	push	48					; 00000030H
	push	eax
	mov	eax, DWORD PTR __Eptr$[esp+120]
	sub	eax, ebp
	lea	edi, DWORD PTR __Groupstring$[esp+124]
	call	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
$LN13@Fput:

; 1347 : 				}
; 1348 : 			_Trailing = 0;
; 1349 : 
; 1350 : 			if (_Pointptr == 0)

	mov	ebx, DWORD PTR __Pointptr$[esp+116]

; 1351 : 				_Groupstring.append(_Beforepoint, '0');

	push	48					; 00000030H
	lea	edi, DWORD PTR __Groupstring$[esp+120]
	test	ebx, ebx
	jne	SHORT $LN11@Fput
	mov	eax, esi
	call	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1352 : 			else

	jmp	SHORT $LN10@Fput
$LN11@Fput:

; 1353 : 				{	// fill in zeros around decimal point
; 1354 : 				_Groupstring.insert(_Pointptr - _Buf + 1, _Afterpoint, '0');

	mov	ecx, DWORD PTR __Afterpoint$[esp+116]
	sub	ebx, ebp
	push	ecx
	lea	eax, DWORD PTR [ebx+1]
	call	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert

; 1355 : 				_Groupstring.insert(_Pointptr - _Buf, _Beforepoint, '0');

	push	48					; 00000030H
	push	esi
	mov	eax, ebx
	lea	edi, DWORD PTR __Groupstring$[esp+124]
	call	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert

; 1356 : 				_Afterpoint = 0;

	mov	DWORD PTR __Afterpoint$[esp+112], 0
$LN10@Fput:

; 1357 : 				}
; 1358 : 			_Beforepoint = 0;
; 1359 : 
; 1360 : 			const char *_Pg = _Grouping.c_str();

	mov	ebp, DWORD PTR __Grouping$[esp+120]
	mov	esi, 16					; 00000010H
	mov	DWORD PTR __Beforepoint$[esp+112], 0
	cmp	DWORD PTR __Grouping$[esp+140], esi
	jae	SHORT $LN92@Fput
	lea	ebp, DWORD PTR __Grouping$[esp+120]
$LN92@Fput:

; 1361 : 			size_t _Off = ::strcspn(&_Groupstring[0], &_Enders[0]);

	mov	eax, DWORD PTR __Groupstring$[esp+120]
	cmp	DWORD PTR __Groupstring$[esp+140], esi
	jae	SHORT $LN99@Fput
	lea	eax, DWORD PTR __Groupstring$[esp+120]
$LN99@Fput:
	lea	edx, DWORD PTR __Enders$[esp+112]
	push	edx
	push	eax
	call	_strcspn
	mov	ebx, eax

; 1362 : 			while (*_Pg != CHAR_MAX && '\0' < *_Pg
; 1363 : 				&& (size_t)*_Pg < _Off - _Prefix)

	mov	al, BYTE PTR [ebp]
	add	esp, 8
	cmp	al, 127					; 0000007fH
	je	SHORT $LN8@Fput
$LN9@Fput:
	test	al, al
	jle	SHORT $LN8@Fput
	mov	ecx, ebx
	sub	ecx, DWORD PTR __Prefix$[esp+116]
	movsx	eax, al
	cmp	eax, ecx
	jae	SHORT $LN8@Fput

; 1364 : 				{	// add a NUL to mark thousands separator
; 1365 : 				_Groupstring.insert(_Off -= *_Pg, (size_t)1, '\0');

	sub	ebx, eax
	push	0
	push	1
	mov	eax, ebx
	lea	edi, DWORD PTR __Groupstring$[esp+124]
	call	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert

; 1366 : 				if ('\0' < _Pg[1])

	cmp	BYTE PTR [ebp+1], 0
	jle	SHORT $LN7@Fput

; 1362 : 			while (*_Pg != CHAR_MAX && '\0' < *_Pg
; 1363 : 				&& (size_t)*_Pg < _Off - _Prefix)

	inc	ebp
$LN7@Fput:
	mov	al, BYTE PTR [ebp]
	cmp	al, 127					; 0000007fH
	jne	SHORT $LN9@Fput
$LN8@Fput:

; 1367 : 					++_Pg;	// not last group, advance
; 1368 : 				}
; 1369 : 
; 1370 : 			_Buf = &_Groupstring[0];

	mov	ebp, DWORD PTR __Groupstring$[esp+120]
	cmp	DWORD PTR __Groupstring$[esp+140], esi
	jae	SHORT $LN106@Fput
	lea	ebp, DWORD PTR __Groupstring$[esp+120]
$LN106@Fput:

; 1371 : 			_Trailing = 0;
; 1372 : 			_Count = _Groupstring.size();

	mov	ebx, DWORD PTR __Groupstring$[esp+136]
	mov	DWORD PTR __Trailing$[esp+112], 0
$LN107@Fput:

; 1373 : 			}
; 1374 : 
; 1375 : 		size_t _Fillcount = _Beforepoint + _Afterpoint + _Trailing + _Count;

	mov	edx, DWORD PTR __Beforepoint$[esp+112]
	mov	eax, DWORD PTR __Afterpoint$[esp+112]
	add	eax, edx
	add	eax, DWORD PTR __Trailing$[esp+112]

; 1376 : 		_Fillcount = _Iosbase.width() <= 0
; 1377 : 			|| (size_t)_Iosbase.width() <= _Fillcount
; 1378 : 				? 0 : (size_t)_Iosbase.width() - _Fillcount;

	mov	edx, DWORD PTR __Iosbase$[esp+112]
	mov	ecx, DWORD PTR [edx+24]
	add	eax, ebx
	test	ecx, ecx
	jle	SHORT $LN21@Fput
	cmp	ecx, eax
	jbe	SHORT $LN21@Fput
	sub	ecx, eax
	mov	DWORD PTR __Fillcount$[esp+112], ecx
	jmp	SHORT $LN22@Fput
$LN21@Fput:
	mov	DWORD PTR __Fillcount$[esp+112], 0
$LN22@Fput:

; 1379 : 		ios_base::fmtflags _Adjustfield =
; 1380 : 			_Iosbase.flags() & ios_base::adjustfield;

	mov	eax, DWORD PTR [edx+16]
	and	eax, 448				; 000001c0H

; 1381 : 		if (_Adjustfield != ios_base::left
; 1382 : 			&& _Adjustfield != ios_base::internal)

	cmp	eax, 64					; 00000040H
	je	$LN4@Fput
	cmp	eax, 256				; 00000100H
	je	SHORT $LN180@Fput

; 1383 : 			{	// put leading fill
; 1384 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount);

	mov	ecx, DWORD PTR __Fill$[esp+112]
	mov	edx, DWORD PTR __Dest$[esp+116]
	mov	eax, DWORD PTR __Dest$[esp+112]
	push	ecx
	push	edx
	push	eax

; 1385 : 			_Fillcount = 0;

	jmp	SHORT $LN191@Fput
$LN180@Fput:

; 1386 : 			}
; 1387 : 		else if (_Adjustfield == ios_base::internal)
; 1388 : 			{	// put internal fill
; 1389 : 			if (0 < _Prefix)

	cmp	DWORD PTR __Prefix$[esp+116], 0
	jbe	SHORT $LN3@Fput

; 1390 : 				{	// but first put sign
; 1391 : 				_Dest = _Putc(_Dest, _Buf, 1);

	mov	eax, DWORD PTR __Dest$[esp+116]
	mov	ecx, DWORD PTR __Dest$[esp+112]
	push	1
	push	eax
	push	ecx
	lea	edx, DWORD PTR $T175272[esp+128]
	push	edx
	mov	eax, ebp
	call	?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Dest$[esp+128], ecx
	mov	edx, DWORD PTR [eax+4]
	add	esp, 16					; 00000010H

; 1392 : 				++_Buf, --_Count;

	inc	ebp
	mov	DWORD PTR __Dest$[esp+116], edx
	dec	ebx
$LN3@Fput:

; 1393 : 				}
; 1394 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount);

	mov	eax, DWORD PTR __Fill$[esp+112]
	mov	ecx, DWORD PTR __Dest$[esp+116]
	mov	edx, DWORD PTR __Dest$[esp+112]
	push	eax
	push	ecx
	push	edx
$LN191@Fput:
	mov	eax, DWORD PTR __Fillcount$[esp+124]
	lea	edi, DWORD PTR $T175273[esp+128]
	call	?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Dest$[esp+124], ecx
	mov	edx, DWORD PTR [eax+4]

; 1395 : 			_Fillcount = 0;

	mov	DWORD PTR __Fillcount$[esp+124], 0
	mov	DWORD PTR __Dest$[esp+128], edx
	add	esp, 12					; 0000000cH
$LN4@Fput:

; 1396 : 			}
; 1397 : 
; 1398 : 		_Pointptr = (const char *)::memchr(_Buf,
; 1399 : 			_Enders[0], _Count);	// find decimal point again

	movsx	eax, BYTE PTR __Enders$[esp+112]
	push	ebx
	push	eax
	push	ebp
	call	_memchr
	add	esp, 12					; 0000000cH

; 1400 : 		if (_Pointptr != 0)

	test	eax, eax
	je	$LN2@Fput

; 1401 : 			{	// has decimal point, put pieces and zero fills
; 1402 : 			size_t _Fracoffset = _Pointptr - _Buf + 1;
; 1403 : 			_Dest = _Putgrouped(_Dest, _Buf, _Fracoffset - 1, _Kseparator);

	mov	ecx, DWORD PTR __Dest$[esp+116]
	mov	edx, DWORD PTR __Dest$[esp+112]
	push	ecx
	sub	eax, ebp
	inc	eax
	push	edx
	mov	esi, eax
	mov	eax, DWORD PTR __Kseparator$[esp+124]
	push	eax
	lea	ecx, DWORD PTR [esi-1]
	push	ecx
	lea	edx, DWORD PTR $T175274[esp+132]
	push	ebp
	push	edx
	call	?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putgrouped
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Dest$[esp+136], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Dest$[esp+140], edx

; 1404 : 			_Dest = _Rep(_Dest, _E0, _Beforepoint);

	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR __Beforepoint$[esp+136]
	push	48					; 00000030H
	push	ecx
	push	edx
	lea	edi, DWORD PTR $T175275[esp+152]
	call	?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Dest$[esp+148], ecx
	mov	edx, DWORD PTR [eax+4]

; 1405 : 			_Dest = _Rep(_Dest, _Punct_fac.decimal_point(), 1);

	mov	ecx, DWORD PTR __Punct_fac$[esp+152]
	mov	DWORD PTR __Dest$[esp+152], edx
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+4]
	add	esp, 36					; 00000024H
	call	edx
	mov	ecx, DWORD PTR __Dest$[esp+116]
	mov	edx, DWORD PTR __Dest$[esp+112]
	mov	BYTE PTR $T175554[esp+112], al
	mov	eax, DWORD PTR $T175554[esp+112]
	push	eax
	push	ecx
	push	edx
	mov	eax, 1
	lea	edi, DWORD PTR $T175276[esp+128]
	call	?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Dest$[esp+124], ecx
	mov	edx, DWORD PTR [eax+4]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Dest$[esp+116], edx

; 1406 : 			_Dest = _Rep(_Dest, _E0, _Afterpoint);

	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR __Afterpoint$[esp+112]
	push	48					; 00000030H
	push	ecx
	push	edx
	lea	edi, DWORD PTR $T175277[esp+128]
	call	?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Dest$[esp+124], ecx
	mov	edx, DWORD PTR [eax+4]
	add	esp, 12					; 0000000cH

; 1407 : 			_Buf += _Fracoffset, _Count -= _Fracoffset;

	add	ebp, esi
	mov	DWORD PTR __Dest$[esp+116], edx
	sub	ebx, esi
$LN2@Fput:

; 1408 : 			}
; 1409 : 
; 1410 : 		_Eptr = (const char *)::memchr(_Buf,
; 1411 : 			'e', _Count);	// find exponent again

	push	ebx
	push	101					; 00000065H
	push	ebp
	call	_memchr
	add	esp, 12					; 0000000cH

; 1412 : 		if (_Eptr != 0)

	test	eax, eax
	je	$LN1@Fput

; 1413 : 			{	// has exponent field, put it out
; 1414 : 			size_t _Expoffset = _Eptr - _Buf + 1;
; 1415 : 			_Dest = _Putgrouped(_Dest, _Buf, _Expoffset - 1, _Kseparator);

	mov	ecx, DWORD PTR __Dest$[esp+112]
	mov	edx, DWORD PTR __Kseparator$[esp+116]
	sub	eax, ebp
	inc	eax
	mov	esi, eax
	mov	eax, DWORD PTR __Dest$[esp+116]
	push	eax
	push	ecx
	push	edx
	lea	eax, DWORD PTR [esi-1]
	push	eax
	lea	ecx, DWORD PTR $T175278[esp+132]
	push	ebp
	push	ecx
	call	?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putgrouped
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR __Dest$[esp+136], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Dest$[esp+140], ecx

; 1416 : 			_Dest = _Rep(_Dest, _E0, _Trailing), _Trailing = 0;

	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax]
	push	48					; 00000030H
	push	edx
	push	eax
	mov	eax, DWORD PTR __Trailing$[esp+148]
	lea	edi, DWORD PTR $T175279[esp+152]
	call	?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Dest$[esp+148], ecx

; 1417 : 			_Dest = _Putc(_Dest, _Iosbase.flags() & ios_base::uppercase
; 1418 : 				? "E" : "e", 1);

	mov	ecx, DWORD PTR __Iosbase$[esp+148]
	mov	edx, DWORD PTR [eax+4]
	add	esp, 36					; 00000024H
	test	BYTE PTR [ecx+16], 4
	mov	DWORD PTR __Dest$[esp+116], edx
	mov	DWORD PTR __Trailing$[esp+112], 0
	mov	ecx, OFFSET ??_C@_01DDCIFGEA@E?$AA@
	jne	SHORT $LN24@Fput
	mov	ecx, OFFSET ??_C@_01KGKMHCOC@e?$AA@
$LN24@Fput:
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax]
	push	1
	push	edx
	push	eax
	lea	edx, DWORD PTR $T175282[esp+128]
	push	edx
	mov	eax, ecx
	call	?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Dest$[esp+128], ecx
	mov	edx, DWORD PTR [eax+4]
	add	esp, 16					; 00000010H

; 1419 : 			_Buf += _Expoffset, _Count -= _Expoffset;

	add	ebp, esi
	mov	DWORD PTR __Dest$[esp+116], edx
	sub	ebx, esi
$LN1@Fput:

; 1420 : 			}
; 1421 : 
; 1422 : 		_Dest = _Putgrouped(_Dest, _Buf, _Count,
; 1423 : 			_Kseparator);	// put leftover field

	mov	eax, DWORD PTR __Dest$[esp+116]
	mov	ecx, DWORD PTR __Dest$[esp+112]
	mov	edx, DWORD PTR __Kseparator$[esp+116]
	push	eax
	push	ecx
	push	edx
	push	ebx
	lea	eax, DWORD PTR $T175283[esp+132]
	push	ebp
	push	eax
	call	?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putgrouped
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Dest$[esp+136], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Dest$[esp+140], edx

; 1424 : 		_Dest = _Rep(_Dest, _E0, _Trailing);	// put trailing zeros

	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR __Trailing$[esp+136]
	push	48					; 00000030H
	push	ecx
	push	edx
	lea	edi, DWORD PTR $T175284[esp+152]
	call	?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
	mov	ecx, DWORD PTR [eax]

; 1425 : 		_Iosbase.width(0);

	mov	edx, DWORD PTR __Iosbase$[esp+148]

; 1426 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

	mov	edi, DWORD PTR ___$ReturnUdt$[esp+148]
	mov	DWORD PTR __Dest$[esp+148], ecx
	mov	eax, DWORD PTR [eax+4]
	add	esp, 36					; 00000024H
	mov	DWORD PTR [edx+24], 0
	mov	edx, DWORD PTR __Fill$[esp+112]
	push	edx
	push	eax
	mov	DWORD PTR __Dest$[esp+124], eax
	mov	eax, DWORD PTR __Fillcount$[esp+120]
	push	ecx
	call	?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
	mov	esi, 16					; 00000010H
	add	esp, 12					; 0000000cH
	mov	BYTE PTR __$EHRec$[esp+124], 1
	cmp	DWORD PTR __Groupstring$[esp+140], esi
	jb	SHORT $LN141@Fput
	mov	eax, DWORD PTR __Groupstring$[esp+120]
	push	eax
	call	DWORD PTR ?RenDelete@@3P6AXPAX@ZA	; RenDelete
	add	esp, 4
$LN141@Fput:
	mov	DWORD PTR __$EHRec$[esp+124], -1
	mov	DWORD PTR __Groupstring$[esp+140], 15	; 0000000fH
	mov	DWORD PTR __Groupstring$[esp+136], 0
	mov	BYTE PTR __Groupstring$[esp+120], 0
	cmp	DWORD PTR __Grouping$[esp+140], esi
	jb	SHORT $LN181@Fput
	mov	ecx, DWORD PTR __Grouping$[esp+120]
	push	ecx
	call	DWORD PTR ?RenDelete@@3P6AXPAX@ZA	; RenDelete
	add	esp, 4
$LN181@Fput:

; 1427 : 		}

	mov	ecx, DWORD PTR __$EHRec$[esp+116]
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	add	esp, 100				; 00000064H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z$0:
	lea	ecx, DWORD PTR $T175266[ebp]
	jmp	??1locale@std@@QAE@XZ			; std::locale::~locale
__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z$1:
	lea	ecx, DWORD PTR __Grouping$[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z$2:
	lea	ecx, DWORD PTR __Groupstring$[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z:
	mov	eax, OFFSET __ehfuncinfo$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput
PUBLIC	__real@4202a05f20000000
PUBLIC	__real@38aa95a5b7f87a0f
PUBLIC	__real@3ddb7cdfd9d7bdbb
PUBLIC	__real@4733426172c74d82
PUBLIC	__real@0000000000000000
;	COMDAT __real@4202a05f20000000
CONST	SEGMENT
__real@4202a05f20000000 DQ 04202a05f20000000r	; 1e+010
CONST	ENDS
;	COMDAT __real@38aa95a5b7f87a0f
CONST	SEGMENT
__real@38aa95a5b7f87a0f DQ 038aa95a5b7f87a0fr	; 1e-035
CONST	ENDS
;	COMDAT __real@3ddb7cdfd9d7bdbb
CONST	SEGMENT
__real@3ddb7cdfd9d7bdbb DQ 03ddb7cdfd9d7bdbbr	; 1e-010
CONST	ENDS
;	COMDAT __real@4733426172c74d82
CONST	SEGMENT
__real@4733426172c74d82 DQ 04733426172c74d82r	; 1e+035
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z
_TEXT	SEGMENT
__Signed$138878 = -121					; size = 1
__Fmt$ = -120						; size = 8
__Buf$ = -112						; size = 108
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 8
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1237 : 		{	// put formatted long double to _Dest

	push	ebp
	mov	ebp, esp
	and	esp, -64				; ffffffc0H

; 1238 : 		const size_t _Buf_size = _MAX_EXP_DIG + _MAX_SIG_DIG + 64;
; 1239 : 		char _Buf[_Buf_size], _Fmt[8];
; 1240 : 		streamsize _Precision = _Iosbase.precision() <= 0
; 1241 : 			&& !(_Iosbase.flags() & ios_base::fixed)
; 1242 : 				? 6 : _Iosbase.precision();	// desired precision

	mov	ecx, DWORD PTR __Iosbase$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	esp, 180				; 000000b4H
	push	ebx
	push	esi
	push	edi
	test	eax, eax
	jg	SHORT $LN13@do_put@2
	test	DWORD PTR [ecx+16], 8192		; 00002000H
	jne	SHORT $LN13@do_put@2
	mov	eax, 6
$LN13@do_put@2:
	mov	esi, eax

; 1243 : 		int _Significance = _MAX_SIG_DIG < _Precision
; 1244 : 			? _MAX_SIG_DIG : (int)_Precision;	// actual sprintf precision

	cmp	esi, 36					; 00000024H
	mov	edx, 36					; 00000024H
	jg	SHORT $LN16@do_put@2
	mov	edx, esi
$LN16@do_put@2:

; 1245 : 		_Precision -= _Significance;
; 1246 : 		size_t _Beforepoint = 0;	// zeros to add before decimal point
; 1247 : 		size_t _Afterpoint = 0;	// zeros to add after decimal point
; 1248 : 
; 1249 : 		if ((_Iosbase.flags() & ios_base::floatfield) == ios_base::fixed)

	mov	ecx, DWORD PTR [ecx+16]
	mov	eax, ecx
	and	eax, 12288				; 00003000H
	sub	esi, edx
	xor	ebx, ebx
	xor	edi, edi
	cmp	eax, 8192				; 00002000H
	jne	$LN43@do_put@2

; 1250 : 			{	// scale silly fixed-point value
; 1251 : 			bool _Signed = _Val < 0;

	fldz
	fld	QWORD PTR __Val$[ebp]
	fcom	ST(1)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN17@do_put@2
	mov	BYTE PTR __Signed$138878[esp+192], 1

; 1253 : 				_Val = -_Val;

	fchs
$LN9@do_put@2:

; 1254 : 
; 1255 : 			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)

	fld	QWORD PTR __real@4733426172c74d82
	fcom	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN50@do_put@2
	fld	QWORD PTR __real@3ddb7cdfd9d7bdbb
	jmp	SHORT $LN8@do_put@2
$LN17@do_put@2:

; 1250 : 			{	// scale silly fixed-point value
; 1251 : 			bool _Signed = _Val < 0;

	mov	BYTE PTR __Signed$138878[esp+192], bl

; 1252 : 			if (_Signed)

	jmp	SHORT $LN9@do_put@2
$LN57@do_put@2:

; 1254 : 
; 1255 : 			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)

	fxch	ST(1)
$LN8@do_put@2:
	cmp	ebx, 5000				; 00001388H
	jae	SHORT $LN54@do_put@2

; 1256 : 				_Val /= 1e10;	// drop 10 zeros before decimal point

	fmul	ST(2), ST(0)
	add	ebx, 10					; 0000000aH
	fxch	ST(1)
	fcom	ST(2)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jnp	SHORT $LN57@do_put@2

; 1254 : 
; 1255 : 			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)

	fstp	ST(0)
$LN50@do_put@2:
	fstp	ST(0)

; 1257 : 
; 1258 : 			if (0 < _Val)

	fcom	ST(1)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 65					; 00000041H
	jne	SHORT $LN2@do_put@2

; 1259 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1260 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

	cmp	esi, 10					; 0000000aH
	jl	SHORT $LN2@do_put@2
	fld	QWORD PTR __real@38aa95a5b7f87a0f
	fld	QWORD PTR __real@4202a05f20000000
	jmp	SHORT $LN4@do_put@2
$LN54@do_put@2:

; 1254 : 
; 1255 : 			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)

	fstp	ST(1)
	jmp	SHORT $LN50@do_put@2
$LN71@do_put@2:

; 1259 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1260 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

	fxch	ST(2)
$LN4@do_put@2:
	fxch	ST(2)
	fcom	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN70@do_put@2
	cmp	edi, 5000				; 00001388H
	jae	SHORT $LN70@do_put@2

; 1261 : 					{	// drop 10 zeros after decimal point
; 1262 : 					_Val *= 1e10;
; 1263 : 					_Precision -= 10;

	sub	esi, 10					; 0000000aH
	fmul	ST(0), ST(2)
	add	edi, 10					; 0000000aH
	cmp	esi, 10					; 0000000aH
	jge	SHORT $LN71@do_put@2
$LN70@do_put@2:

; 1259 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1260 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

	fstp	ST(1)
	fstp	ST(1)
$LN2@do_put@2:

; 1264 : 					}
; 1265 : 
; 1266 : 			if (_Signed)

	cmp	BYTE PTR __Signed$138878[esp+192], 0
	je	SHORT $LN1@do_put@2

; 1267 : 				_Val = -_Val;

	fchs
	jmp	SHORT $LN1@do_put@2
$LN43@do_put@2:
	fld	QWORD PTR __Val$[ebp]
$LN1@do_put@2:

; 1268 : 			}
; 1269 : 
; 1270 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
; 1271 : 			_Beforepoint, _Afterpoint, _Precision,
; 1272 : 				::sprintf_s(_Buf, _Buf_size, _Ffmt(_Fmt, 'L', _Iosbase.flags()),
; 1273 : 					_Significance, _Val)));	// convert and put

	mov	BYTE PTR __Fmt$[esp+192], 37		; 00000025H
	lea	eax, DWORD PTR __Fmt$[esp+193]
	test	cl, 32					; 00000020H
	je	SHORT $LN31@do_put@2
	mov	BYTE PTR __Fmt$[esp+193], 43		; 0000002bH
	lea	eax, DWORD PTR __Fmt$[esp+194]
$LN31@do_put@2:
	test	cl, 16					; 00000010H
	je	SHORT $LN30@do_put@2
	mov	BYTE PTR [eax], 35			; 00000023H
	inc	eax
$LN30@do_put@2:
	mov	BYTE PTR [eax], 46			; 0000002eH
	inc	eax
	mov	BYTE PTR [eax], 42			; 0000002aH
	inc	eax
	mov	BYTE PTR [eax], 76			; 0000004cH
	and	ecx, 12288				; 00003000H
	inc	eax
	cmp	ecx, 8192				; 00002000H
	jne	SHORT $LN36@do_put@2
	mov	cl, 102					; 00000066H
	jmp	SHORT $LN35@do_put@2
$LN36@do_put@2:
	cmp	ecx, 12288				; 00003000H
	jne	SHORT $LN34@do_put@2
	mov	cl, 97					; 00000061H
	jmp	SHORT $LN35@do_put@2
$LN34@do_put@2:
	cmp	ecx, 4096				; 00001000H
	setne	cl
	lea	ecx, DWORD PTR [ecx+ecx+101]
$LN35@do_put@2:
	mov	BYTE PTR [eax], cl
	mov	ecx, DWORD PTR __Dest$[ebp+4]
	push	ecx
	mov	BYTE PTR [eax+1], 0
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	edx
	lea	ecx, DWORD PTR __Fmt$[esp+212]
	push	ecx
	lea	edx, DWORD PTR __Buf$[esp+216]
	push	108					; 0000006cH
	push	edx
	call	_sprintf_s
	mov	ecx, DWORD PTR __Fill$[ebp]
	mov	edx, DWORD PTR __Iosbase$[ebp]
	add	esp, 24					; 00000018H
	push	eax
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	push	edi
	push	ebx
	lea	eax, DWORD PTR __Buf$[esp+216]
	push	eax
	push	ecx
	push	edx
	push	esi
	call	?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput
	add	esp, 40					; 00000028H

; 1274 : 		}

	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
PUBLIC	__real@3fe0000000000000
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z
_TEXT	SEGMENT
__Signed$138850 = -121					; size = 1
__Fmt$ = -120						; size = 8
__Buf$ = -112						; size = 108
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 8
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1195 : 		{	// put formatted double to _Dest

	push	ebp
	mov	ebp, esp
	and	esp, -64				; ffffffc0H

; 1196 : 		const size_t _Buf_size = _MAX_EXP_DIG + _MAX_SIG_DIG + 64;
; 1197 : 		char _Buf[_Buf_size], _Fmt[8];
; 1198 : 		streamsize _Precision = _Iosbase.precision() <= 0
; 1199 : 			&& !(_Iosbase.flags() & ios_base::fixed)
; 1200 : 				? 6 : _Iosbase.precision();	// desired precision

	mov	ecx, DWORD PTR __Iosbase$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	esp, 180				; 000000b4H
	push	ebx
	push	esi
	push	edi
	test	eax, eax
	jg	SHORT $LN13@do_put@3
	test	DWORD PTR [ecx+16], 8192		; 00002000H
	jne	SHORT $LN13@do_put@3
	mov	eax, 6
$LN13@do_put@3:
	mov	esi, eax

; 1201 : 		int _Significance = _MAX_SIG_DIG < _Precision
; 1202 : 			? _MAX_SIG_DIG : (int)_Precision;	// actual sprintf precision

	cmp	esi, 36					; 00000024H
	mov	edx, 36					; 00000024H
	jg	SHORT $LN16@do_put@3
	mov	edx, esi
$LN16@do_put@3:

; 1203 : 		_Precision -= _Significance;
; 1204 : 		size_t _Beforepoint = 0;	// zeros to add before decimal point
; 1205 : 		size_t _Afterpoint = 0;	// zeros to add after decimal point
; 1206 : 
; 1207 : 		if ((_Iosbase.flags() & ios_base::floatfield) == ios_base::fixed
; 1208 : 			&& _Val * 0.5 != _Val)	// skip -Inf, 0, Inf

	mov	ecx, DWORD PTR [ecx+16]
	fld	QWORD PTR __Val$[ebp]
	mov	eax, ecx
	and	eax, 12288				; 00003000H
	sub	esi, edx
	xor	ebx, ebx
	xor	edi, edi
	cmp	eax, 8192				; 00002000H
	jne	$LN1@do_put@3
	fld	QWORD PTR __real@3fe0000000000000
	fmul	ST(0), ST(1)
	fucomp	ST(1)
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	$LN1@do_put@3

; 1209 : 			{	// scale silly fixed-point value
; 1210 : 			bool _Signed = _Val < 0;

	fldz
	fcom	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN17@do_put@3

; 1211 : 			if (_Signed)
; 1212 : 				_Val = -_Val;

	fxch	ST(1)
	mov	BYTE PTR __Signed$138850[esp+192], 1
	fchs
	jmp	SHORT $LN9@do_put@3
$LN17@do_put@3:

; 1209 : 			{	// scale silly fixed-point value
; 1210 : 			bool _Signed = _Val < 0;

	mov	BYTE PTR __Signed$138850[esp+192], bl

; 1226 : 				_Val = -_Val;

	fxch	ST(1)
$LN9@do_put@3:
	fld	QWORD PTR __real@4733426172c74d82
	fcom	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN53@do_put@3

; 1213 : 
; 1214 : 			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)

	fld	QWORD PTR __real@3ddb7cdfd9d7bdbb
	jmp	SHORT $LN8@do_put@3
$LN60@do_put@3:
	fxch	ST(1)
$LN8@do_put@3:
	cmp	ebx, 5000				; 00001388H
	jae	SHORT $LN57@do_put@3

; 1215 : 				_Val /= 1e10;	// drop 10 zeros before decimal point

	fmul	ST(2), ST(0)
	add	ebx, 10					; 0000000aH
	fxch	ST(1)
	fcom	ST(2)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jnp	SHORT $LN60@do_put@3

; 1213 : 
; 1214 : 			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)

	fstp	ST(0)
$LN53@do_put@3:
	fstp	ST(0)

; 1216 : 
; 1217 : 			if (0 < _Val)

	fcom	ST(1)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 65					; 00000041H
	jne	SHORT $LN2@do_put@3

; 1218 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1219 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

	cmp	esi, 10					; 0000000aH
	jl	SHORT $LN2@do_put@3
	fld	QWORD PTR __real@38aa95a5b7f87a0f
	fld	QWORD PTR __real@4202a05f20000000
	jmp	SHORT $LN4@do_put@3
$LN57@do_put@3:

; 1213 : 
; 1214 : 			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)

	fstp	ST(1)
	jmp	SHORT $LN53@do_put@3
$LN74@do_put@3:

; 1218 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1219 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

	fxch	ST(2)
$LN4@do_put@3:
	fxch	ST(2)
	fcom	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN73@do_put@3
	cmp	edi, 5000				; 00001388H
	jae	SHORT $LN73@do_put@3

; 1220 : 					{	// drop 10 zeros after decimal point
; 1221 : 					_Val *= 1e10;
; 1222 : 					_Precision -= 10;

	sub	esi, 10					; 0000000aH
	fmul	ST(0), ST(2)
	add	edi, 10					; 0000000aH
	cmp	esi, 10					; 0000000aH
	jge	SHORT $LN74@do_put@3
$LN73@do_put@3:

; 1218 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1219 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

	fstp	ST(1)
	fstp	ST(1)
$LN2@do_put@3:

; 1223 : 					}
; 1224 : 
; 1225 : 			if (_Signed)

	cmp	BYTE PTR __Signed$138850[esp+192], 0
	je	SHORT $LN1@do_put@3

; 1226 : 				_Val = -_Val;

	fchs
$LN1@do_put@3:

; 1227 : 			}
; 1228 : 
; 1229 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
; 1230 : 			_Beforepoint, _Afterpoint, _Precision,
; 1231 : 				::sprintf_s(_Buf, _Buf_size, _Ffmt(_Fmt, 0, _Iosbase.flags()),
; 1232 : 					_Significance, _Val)));	// convert and put

	mov	BYTE PTR __Fmt$[esp+192], 37		; 00000025H
	lea	eax, DWORD PTR __Fmt$[esp+193]
	test	cl, 32					; 00000020H
	je	SHORT $LN31@do_put@3
	mov	BYTE PTR __Fmt$[esp+193], 43		; 0000002bH
	lea	eax, DWORD PTR __Fmt$[esp+194]
$LN31@do_put@3:
	test	cl, 16					; 00000010H
	je	SHORT $LN30@do_put@3
	mov	BYTE PTR [eax], 35			; 00000023H
	inc	eax
$LN30@do_put@3:
	mov	BYTE PTR [eax], 46			; 0000002eH
	inc	eax
	mov	BYTE PTR [eax], 42			; 0000002aH
	and	ecx, 12288				; 00003000H
	inc	eax
	cmp	ecx, 8192				; 00002000H
	jne	SHORT $LN36@do_put@3
	mov	cl, 102					; 00000066H
	jmp	SHORT $LN35@do_put@3
$LN36@do_put@3:
	cmp	ecx, 12288				; 00003000H
	jne	SHORT $LN34@do_put@3
	mov	cl, 97					; 00000061H
	jmp	SHORT $LN35@do_put@3
$LN34@do_put@3:
	cmp	ecx, 4096				; 00001000H
	setne	cl
	lea	ecx, DWORD PTR [ecx+ecx+101]
$LN35@do_put@3:
	mov	BYTE PTR [eax], cl
	mov	ecx, DWORD PTR __Dest$[ebp+4]
	push	ecx
	mov	BYTE PTR [eax+1], 0
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	edx
	lea	ecx, DWORD PTR __Fmt$[esp+212]
	push	ecx
	lea	edx, DWORD PTR __Buf$[esp+216]
	push	108					; 0000006cH
	push	edx
	call	_sprintf_s
	mov	ecx, DWORD PTR __Fill$[ebp]
	mov	edx, DWORD PTR __Iosbase$[ebp]
	add	esp, 24					; 00000018H
	push	eax
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	push	edi
	push	ebx
	lea	eax, DWORD PTR __Buf$[esp+216]
	push	eax
	push	ecx
	push	edx
	push	esi
	call	?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput
	add	esp, 40					; 00000028H

; 1233 : 		}

	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z$0
__ehfuncinfo$??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	-1
	push	__ehhandler$??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	push	esi
	mov	esi, ecx
	mov	DWORD PTR _this$[esp+20], esi
	mov	DWORD PTR [esi], OFFSET ??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@
	mov	DWORD PTR __$EHRec$[esp+28], 0
	cmp	BYTE PTR [esi+72], 0
	je	SHORT $LN4@scalar@41
	call	?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ ; std::basic_filebuf<char,std::char_traits<char> >::close
$LN4@scalar@41:
	mov	ecx, esi
	mov	DWORD PTR __$EHRec$[esp+28], -1
	call	??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
	test	BYTE PTR ___flags$[esp+16], 1
	je	SHORT $LN10@scalar@41
	push	esi
	call	DWORD PTR ?RenDelete@@3P6AXPAX@ZA	; RenDelete
	add	esp, 4
$LN10@scalar@41:
	mov	ecx, DWORD PTR __$EHRec$[esp+20]
	mov	eax, esi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	add	esp, 16					; 00000010H
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
__ehhandler$??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:
	mov	eax, OFFSET __ehfuncinfo$??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::`scalar deleting destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_G?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_ofstream<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ecx-84]
	lea	esi, DWORD PTR [edi+84]
	mov	ecx, esi
	call	??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ofstream<char,std::char_traits<char> >::~basic_ofstream<char,std::char_traits<char> >
	push	esi
	mov	DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
	call	?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
	add	esp, 4
	test	BYTE PTR ___flags$[esp+4], 1
	je	SHORT $LN13@scalar@42
	push	edi
	call	DWORD PTR ?RenDelete@@3P6AXPAX@ZA	; RenDelete
	add	esp, 4
$LN13@scalar@42:
	mov	eax, edi
	pop	edi
	pop	esi
	ret	4
??_G?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_ofstream<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?clear@ios_base@std@@QAEXH_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?clear@ios_base@std@@QAEXH_N@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?clear@ios_base@std@@QAEXH_N@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?clear@ios_base@std@@QAEXH_N@Z$1
	DD	02H
	DD	FLAT:__unwindfunclet$?clear@ios_base@std@@QAEXH_N@Z$7
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?clear@ios_base@std@@QAEXH_N@Z$2
	DD	04H
	DD	FLAT:__unwindfunclet$?clear@ios_base@std@@QAEXH_N@Z$10
__ehfuncinfo$?clear@ios_base@std@@QAEXH_N@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?clear@ios_base@std@@QAEXH_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\xiosbase
xdata$x	ENDS
;	COMDAT ?clear@ios_base@std@@QAEXH_N@Z
_TEXT	SEGMENT
$T176070 = -152						; size = 40
$T176068 = -152						; size = 40
$T176072 = -112						; size = 40
$T176071 = -72						; size = 28
$T176069 = -72						; size = 28
$T176073 = -44						; size = 28
__$EHRec$ = -12						; size = 12
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?clear@ios_base@std@@QAEXH_N@Z PROC			; std::ios_base::clear, COMDAT
; _this$ = ecx

; 285  :         {	// set state, possibly reraise exception

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$?clear@ios_base@std@@QAEXH_N@Z
	push	eax

; 286  :         _Mystate = (iostate)(_State & _Statmask);

	mov	eax, DWORD PTR __State$[ebp]
	mov	DWORD PTR fs:0, esp
	and	eax, 23					; 00000017H
	mov	DWORD PTR [ecx+8], eax

; 287  :         if ((_Mystate & _Except) == 0)

	mov	ecx, DWORD PTR [ecx+12]
	sub	esp, 144				; 00000090H
	and	ecx, eax
	push	ebx
	je	$LN1@clear@2

; 288  :             ;
; 289  :         else if (_Reraise)

	xor	ebx, ebx
	cmp	BYTE PTR __Reraise$[ebp], bl
	je	SHORT $LN6@clear@2

; 290  :             _RERAISE;

	push	ebx
	push	ebx
	call	__CxxThrowException@8
$LN121@clear@2:
$LN6@clear@2:

; 291  :         else if (_Mystate & _Except & badbit)

	test	cl, 4
	je	SHORT $LN4@clear@2

; 292  :             _THROW_NCEE(failure, "ios_base::badbit set");

	push	OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@
	lea	ecx, DWORD PTR $T176069[esp+164]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	lea	ecx, DWORD PTR $T176068[esp+160]
	mov	DWORD PTR __$EHRec$[esp+168], ebx
	call	??0exception@std@@QAE@XZ		; std::exception::exception
	push	-1
	mov	BYTE PTR __$EHRec$[esp+172], 1
	push	ebx
	lea	eax, DWORD PTR $T176069[esp+168]
	push	eax
	lea	ecx, DWORD PTR $T176068[esp+184]
	mov	DWORD PTR $T176068[esp+172], OFFSET ??_7runtime_error@std@@6B@
	mov	DWORD PTR $T176068[esp+208], 15		; 0000000fH
	mov	DWORD PTR $T176068[esp+204], ebx
	mov	BYTE PTR $T176068[esp+188], bl
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	push	OFFSET __TI3?AVfailure@ios_base@std@@
	lea	ecx, DWORD PTR $T176068[esp+164]
	mov	BYTE PTR __$EHRec$[esp+172], bl
	push	ecx
	mov	DWORD PTR $T176068[esp+168], OFFSET ??_7failure@ios_base@std@@6B@
	call	__CxxThrowException@8
$LN122@clear@2:
$LN4@clear@2:

; 293  :         else if (_Mystate & _Except & failbit)

	test	cl, 2
	je	SHORT $LN2@clear@2

; 294  :             _THROW_NCEE(failure, "ios_base::failbit set");

	push	OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@
	lea	ecx, DWORD PTR $T176071[esp+164]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	lea	ecx, DWORD PTR $T176070[esp+160]
	mov	DWORD PTR __$EHRec$[esp+168], 2
	call	??0exception@std@@QAE@XZ		; std::exception::exception
	push	-1
	mov	BYTE PTR __$EHRec$[esp+172], 3
	push	ebx
	lea	edx, DWORD PTR $T176071[esp+168]
	push	edx
	lea	ecx, DWORD PTR $T176070[esp+184]
	mov	DWORD PTR $T176070[esp+172], OFFSET ??_7runtime_error@std@@6B@
	mov	DWORD PTR $T176070[esp+208], 15		; 0000000fH
	mov	DWORD PTR $T176070[esp+204], ebx
	mov	BYTE PTR $T176070[esp+188], bl
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	push	OFFSET __TI3?AVfailure@ios_base@std@@
	lea	eax, DWORD PTR $T176070[esp+164]
	mov	BYTE PTR __$EHRec$[esp+172], 2
	push	eax
	mov	DWORD PTR $T176070[esp+168], OFFSET ??_7failure@ios_base@std@@6B@
	call	__CxxThrowException@8
$LN123@clear@2:
$LN2@clear@2:

; 295  :         else
; 296  :             _THROW_NCEE(failure, "ios_base::eofbit set");

	push	OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@
	lea	ecx, DWORD PTR $T176073[esp+164]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	lea	ecx, DWORD PTR $T176072[esp+160]
	mov	DWORD PTR __$EHRec$[esp+168], 4
	call	??0exception@std@@QAE@XZ		; std::exception::exception
	push	-1
	mov	BYTE PTR __$EHRec$[esp+172], 5
	push	ebx
	lea	ecx, DWORD PTR $T176073[esp+168]
	push	ecx
	lea	ecx, DWORD PTR $T176072[esp+184]
	mov	DWORD PTR $T176072[esp+172], OFFSET ??_7runtime_error@std@@6B@
	mov	DWORD PTR $T176072[esp+208], 15		; 0000000fH
	mov	DWORD PTR $T176072[esp+204], ebx
	mov	BYTE PTR $T176072[esp+188], bl
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	push	OFFSET __TI3?AVfailure@ios_base@std@@
	lea	edx, DWORD PTR $T176072[esp+164]
	mov	BYTE PTR __$EHRec$[esp+172], 4
	push	edx
	mov	DWORD PTR $T176072[esp+168], OFFSET ??_7failure@ios_base@std@@6B@
	call	__CxxThrowException@8
$LN124@clear@2:
$LN1@clear@2:

; 297  :         }

	mov	ecx, DWORD PTR __$EHRec$[esp+160]
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
$LN120@clear@2:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?clear@ios_base@std@@QAEXH_N@Z$0:
	lea	ecx, DWORD PTR $T176069[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?clear@ios_base@std@@QAEXH_N@Z$4:
	lea	ecx, DWORD PTR $T176068[ebp]
	jmp	??1exception@std@@UAE@XZ		; std::exception::~exception
__unwindfunclet$?clear@ios_base@std@@QAEXH_N@Z$1:
	lea	ecx, DWORD PTR $T176071[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?clear@ios_base@std@@QAEXH_N@Z$7:
	lea	ecx, DWORD PTR $T176070[ebp]
	jmp	??1exception@std@@UAE@XZ		; std::exception::~exception
__unwindfunclet$?clear@ios_base@std@@QAEXH_N@Z$2:
	lea	ecx, DWORD PTR $T176073[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?clear@ios_base@std@@QAEXH_N@Z$10:
	lea	ecx, DWORD PTR $T176072[ebp]
	jmp	??1exception@std@@UAE@XZ		; std::exception::~exception
__ehhandler$?clear@ios_base@std@@QAEXH_N@Z:
	mov	eax, OFFSET __ehfuncinfo$?clear@ios_base@std@@QAEXH_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?clear@ios_base@std@@QAEXH_N@Z ENDP			; std::ios_base::clear
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\ios
;	COMDAT ?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
_TEXT	SEGMENT
__Reraise$ = 8						; size = 1
?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z PROC ; std::basic_ios<char,std::char_traits<char> >::clear, COMDAT
; _this$ = ecx
; __State$ = eax

; 43   : 		ios_base::clear((iostate)(_Mystrbuf == 0
; 44   : 			? (int)_State | (int)badbit : (int)_State), _Reraise);

	cmp	DWORD PTR [ecx+40], 0
	jne	SHORT $LN3@clear@3
	or	eax, 4
$LN3@clear@3:
	mov	edx, DWORD PTR __Reraise$[esp-4]
	push	edx
	push	eax
	call	?clear@ios_base@std@@QAEXH_N@Z		; std::ios_base::clear

; 45   : 		}

	ret	4
?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::clear
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
_TEXT	SEGMENT
__State$ = 8						; size = 4
?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z PROC ; std::basic_ios<char,std::char_traits<char> >::setstate, COMDAT
; _this$ = ecx
; __Reraise$ = edx

; 54   : 		if (_State != goodbit)
; 55   : 			clear((iostate)((int)rdstate() | (int)_State), _Reraise);

	mov	eax, DWORD PTR [ecx+8]
	or	eax, DWORD PTR __State$[esp-4]
	cmp	DWORD PTR [ecx+40], 0
	jne	SHORT $LN11@setstate
	or	eax, 4
$LN11@setstate:
	push	edx
	push	eax
	call	?clear@ios_base@std@@QAEXH_N@Z		; std::ios_base::clear

; 56   : 		}

	ret	4
?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::setstate
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\ostream
_TEXT	ENDS
;	COMDAT ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
_TEXT	SEGMENT
?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::flush, COMDAT
; _this$ = esi

; 551  : 		ios_base::iostate _State = ios_base::goodbit;
; 552  : 		if (!ios_base::fail() && _Myios::rdbuf()->pubsync() == -1)

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax+4]
	push	edi
	lea	eax, DWORD PTR [ecx+esi]
	xor	edi, edi
	test	BYTE PTR [eax+8], 6
	jne	SHORT $LN1@flush
	mov	eax, DWORD PTR [eax+40]
	mov	edx, DWORD PTR [eax]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+48]
	call	eax
	cmp	eax, -1
	jne	SHORT $LN1@flush

; 553  : 			_State |= ios_base::badbit;	// sync failed

	mov	edi, 4
$LN1@flush:

; 554  : 		_Myios::setstate(_State);

	mov	ecx, DWORD PTR [esi]
	mov	ecx, DWORD PTR [ecx+4]
	add	ecx, esi
	test	edi, edi
	je	SHORT $LN21@flush
	mov	eax, DWORD PTR [ecx+8]
	or	eax, edi
	cmp	DWORD PTR [ecx+40], 0
	jne	SHORT $LN19@flush
	or	eax, 4
$LN19@flush:
	push	0
	push	eax
	call	?clear@ios_base@std@@QAEXH_N@Z		; std::ios_base::clear
$LN21@flush:

; 555  : 		return (*this);

	mov	eax, esi
	pop	edi

; 556  : 		}

	ret	0
?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::flush
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 9.0\vc\include\ios
xdata$x	SEGMENT
__unwindtable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__catchsym$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$0
__tryblocktable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$2
__ehfuncinfo$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	DD	01H
	DD	FLAT:__tryblocktable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__$EHRec$ = -16						; size = 16
?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Osfx, COMDAT
; _this$ = ecx

; 139  : 		{	// perform any wrapup

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	edi, ecx

; 140  : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 141  : 		if (ios_base::flags() & ios_base::unitbuf)

	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [eax+4]
	test	BYTE PTR [ecx+edi+16], 2
	lea	eax, DWORD PTR [ecx+edi]
	mov	DWORD PTR __$EHRec$[ebp], esp
	je	SHORT $LN8@Osfx

; 142  : 			flush();	// flush stream as needed

	xor	esi, esi
	test	BYTE PTR [eax+8], 6
	jne	SHORT $LN11@Osfx
	mov	eax, DWORD PTR [eax+40]
	mov	edx, DWORD PTR [eax]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+48]
	call	eax
	cmp	eax, -1
	jne	SHORT $LN11@Osfx
	mov	esi, 4
$LN11@Osfx:
	mov	ecx, DWORD PTR [edi]
	mov	ecx, DWORD PTR [ecx+4]
	add	ecx, edi
	test	esi, esi
	je	SHORT $LN8@Osfx
	mov	eax, DWORD PTR [ecx+8]
	or	eax, esi
	cmp	DWORD PTR [ecx+40], 0
	jne	SHORT $LN29@Osfx
	or	eax, 4
$LN29@Osfx:
	push	0
	push	eax
	call	?clear@ios_base@std@@QAEXH_N@Z		; std::ios_base::clear
$LN8@Osfx:

; 145  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	pop	edi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__catch$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$0:

; 143  : 		_CATCH_ALL
; 144  : 		_CATCH_END

	mov	eax, $LN8@Osfx
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:
	mov	eax, OFFSET __ehfuncinfo$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 9.0\vc\include\streambuf
xdata$x	SEGMENT
__unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT

; 102  : 			{	// destroy the object

	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	push	eax
	mov	DWORD PTR fs:0, esp
	push	esi
	mov	esi, DWORD PTR _this$[esp+12]
	mov	DWORD PTR __$EHRec$[esp+24], 0

; 103  : 
; 104  :  #if _HAS_EXCEPTIONS
; 105  : 			if (!_XSTD uncaught_exception())

	call	?uncaught_exception@std@@YA_NXZ		; std::uncaught_exception
	test	al, al
	jne	SHORT $LN1@sentry

; 106  : 				this->_Myostr._Osfx();

	mov	ecx, DWORD PTR [esi]
	call	?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
$LN1@sentry:

; 107  : 			}

	mov	DWORD PTR __$EHRec$[esp+24], -1
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+eax+40]
	test	eax, eax
	je	SHORT $LN12@sentry
	lea	ecx, DWORD PTR [eax+4]
	call	?_Unlock@_Mutex@std@@QAEXXZ		; std::_Mutex::_Unlock
$LN12@sentry:
	mov	ecx, DWORD PTR __$EHRec$[esp+16]
	mov	DWORD PTR fs:0, ecx
	pop	esi
	add	esp, 12					; 0000000cH
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ$0:
	mov	eax, DWORD PTR _this$[ebp-4]
	jmp	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 9.0\vc\include\xiosbase
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; __Ostr$ = edi

; 95   : 			{	// construct locking and testing stream

	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ebx
	mov	ebx, DWORD PTR _this$[esp+12]
	mov	DWORD PTR [ebx], edi
	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ecx+edi+40]
	push	esi
	test	eax, eax
	je	SHORT $LN12@sentry@2
	lea	ecx, DWORD PTR [eax+4]
	call	?_Lock@_Mutex@std@@QAEXXZ		; std::_Mutex::_Lock
$LN12@sentry@2:
	mov	DWORD PTR __$EHRec$[esp+28], 0

; 96   : 			if (_Ostr.good() && _Ostr.tie() != 0)

	mov	edx, DWORD PTR [edi]
	mov	eax, DWORD PTR [edx+4]
	add	eax, edi
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN1@sentry@2
	mov	eax, DWORD PTR [eax+44]
	test	eax, eax
	je	SHORT $LN1@sentry@2

; 97   : 				_Ostr.tie()->flush();

	mov	esi, eax
	call	?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush
$LN1@sentry@2:

; 98   : 			_Ok = _Ostr.good();	// store test only after flushing tie

	mov	ecx, DWORD PTR [edi]
	mov	edx, DWORD PTR [ecx+4]
	cmp	DWORD PTR [edx+edi+8], 0

; 99   : 			}

	mov	ecx, DWORD PTR __$EHRec$[esp+20]
	sete	al
	mov	BYTE PTR [ebx+4], al
	pop	esi
	mov	eax, ebx
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	add	esp, 12					; 0000000cH
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
	mov	eax, DWORD PTR _this$[ebp-4]
	jmp	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
	mov	eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 9.0\vc\include\ios
xdata$x	SEGMENT
__unwindtable$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__catchsym$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z$15 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z$0
__tryblocktable$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z$15
__ehfuncinfo$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z
	DD	01H
	DD	FLAT:__tryblocktable$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z
_TEXT	SEGMENT
__Ok$ = -28						; size = 8
__State$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
_this$ = 8						; size = 4
?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::put, COMDAT

; 508  : 		{	// insert a character

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	edi, DWORD PTR _this$[ebp]

; 509  : 		ios_base::iostate _State = ios_base::goodbit;
; 510  : 		const sentry _Ok(*this);

	lea	eax, DWORD PTR __Ok$[ebp]
	mov	DWORD PTR __$EHRec$[ebp], esp
	xor	esi, esi
	push	eax
	xor	ebx, ebx
	mov	DWORD PTR __State$[ebp], esi
	call	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
	mov	DWORD PTR __$EHRec$[ebp+12], ebx

; 511  : 
; 512  : 		if (!_Ok)

	cmp	BYTE PTR __Ok$[ebp+4], bl
	jne	SHORT $LN4@put

; 513  : 			_State |= ios_base::badbit;

	lea	esi, DWORD PTR [ebx+4]

; 514  : 		else

	jmp	SHORT $LN11@put
$LN4@put:

; 515  : 			{	// state okay, insert character
; 516  : 			_TRY_IO_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 517  : 			if (_Traits::eq_int_type(_Traits::eof(),
; 518  : 				_Myios::rdbuf()->sputc(_Ch)))

	mov	ecx, DWORD PTR [edi]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [edx+edi+40]
	mov	eax, DWORD PTR [ecx+36]
	cmp	DWORD PTR [eax], ebx
	je	SHORT $LN18@put
	mov	edx, DWORD PTR [ecx+52]
	cmp	DWORD PTR [edx], ebx
	jle	SHORT $LN18@put
	mov	eax, edx
	dec	DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [ecx]
	lea	edx, DWORD PTR [eax+1]
	mov	DWORD PTR [ecx], edx
	mov	BYTE PTR [eax], 10			; 0000000aH
	mov	DWORD PTR __$EHRec$[ebp+12], ebx
	jmp	SHORT $LN11@put
$LN18@put:
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+4]
	push	10					; 0000000aH
	call	edx
	cmp	eax, -1
	jne	SHORT $LN1@put

; 519  : 				_State |= ios_base::badbit;

	lea	esi, DWORD PTR [eax+5]
$LN1@put:
	mov	DWORD PTR __$EHRec$[ebp+12], ebx
	jmp	SHORT $LN11@put
__catch$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z$0:

; 520  : 			_CATCH_IO_END

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+4]
	add	ecx, eax
	mov	eax, DWORD PTR [ecx+8]
	or	eax, 4
	cmp	DWORD PTR [ecx+40], 0
	jne	SHORT $LN41@put
	or	eax, 4
$LN41@put:
	push	1
	push	eax
	call	?clear@ios_base@std@@QAEXH_N@Z		; std::ios_base::clear
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, $LN172@put
	ret	0
$LN172@put:
	mov	edi, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR __State$[ebp]
$LN11@put:

; 521  : 			}
; 522  : 
; 523  : 		_Myios::setstate(_State);

	mov	edx, DWORD PTR [edi]
	mov	ecx, DWORD PTR [edx+4]
	add	ecx, edi
	test	esi, esi
	je	SHORT $LN166@put
	mov	eax, DWORD PTR [ecx+8]
	or	eax, esi
	cmp	DWORD PTR [ecx+40], 0
	jne	SHORT $LN168@put
	or	eax, 4
$LN168@put:
	push	0
	push	eax
	call	?clear@ios_base@std@@QAEXH_N@Z		; std::ios_base::clear
$LN166@put:

; 524  : 		return (*this);

	lea	eax, DWORD PTR __Ok$[ebp]
	push	eax
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	call	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry

; 525  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	eax, edi
	pop	edi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z$2:
	lea	eax, DWORD PTR __Ok$[ebp]
	push	eax
	call	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
	ret	0
__ehhandler$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z:
	mov	eax, OFFSET __ehfuncinfo$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::put
; Function compile flags: /Ogtpy
;	COMDAT ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z PROC ; std::endl, COMDAT

; 967  : 	{	// insert newline and flush byte stream

	push	esi

; 968  : 	_Ostr.put('\n');

	mov	esi, DWORD PTR __Ostr$[esp]
	push	edi
	push	esi
	call	?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z ; std::basic_ostream<char,std::char_traits<char> >::put

; 969  : 	_Ostr.flush();

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax+4]
	lea	eax, DWORD PTR [ecx+esi]
	xor	edi, edi
	test	BYTE PTR [eax+8], 6
	jne	SHORT $LN3@endl
	mov	eax, DWORD PTR [eax+40]
	mov	edx, DWORD PTR [eax]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+48]
	call	eax
	cmp	eax, -1
	jne	SHORT $LN3@endl
	mov	edi, 4
$LN3@endl:
	mov	ecx, DWORD PTR [esi]
	mov	ecx, DWORD PTR [ecx+4]
	add	ecx, esi
	test	edi, edi
	je	SHORT $LN23@endl
	mov	eax, DWORD PTR [ecx+8]
	or	eax, edi
	cmp	DWORD PTR [ecx+40], 0
	jne	SHORT $LN21@endl
	or	eax, 4
$LN21@endl:
	push	0
	push	eax
	call	?clear@ios_base@std@@QAEXH_N@Z		; std::ios_base::clear
$LN23@endl:
	pop	edi

; 970  : 	return (_Ostr);

	mov	eax, esi
	pop	esi

; 971  : 	}

	ret	0
?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ENDP ; std::endl
PUBLIC	?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$codecvt@DDH@std@@2V0locale@2@A		; std::codecvt<char,char,int>::id
;	COMDAT ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$codecvt@DDH@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$codecvt@DDH@std@@2V0locale@2@A DD 01H DUP (?)	; std::codecvt<char,char,int>::id
CRT$XCU	ENDS
END
