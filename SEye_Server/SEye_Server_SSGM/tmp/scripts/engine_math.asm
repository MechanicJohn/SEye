; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	c:\Users\Admin\Desktop\Projects\SEye_Server\engine_math.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	?Divide@_Vector4MathFunctionsSSE@@UAEXPAUVector4@@00@Z ; _Vector4MathFunctionsSSE::Divide
PUBLIC	?Divide@_Vector4MathFunctionsSSE@@UAEXPAUVector4@@PAM0@Z ; _Vector4MathFunctionsSSE::Divide
PUBLIC	?Multiply@_Vector4MathFunctionsSSE@@UAEXPAUVector4@@00@Z ; _Vector4MathFunctionsSSE::Multiply
PUBLIC	?Multiply@_Vector4MathFunctionsSSE@@UAEXPAUVector4@@PAM0@Z ; _Vector4MathFunctionsSSE::Multiply
PUBLIC	?Subtract@_Vector4MathFunctionsSSE@@UAEXPAUVector4@@00@Z ; _Vector4MathFunctionsSSE::Subtract
PUBLIC	?Add@_Vector4MathFunctionsSSE@@UAEXPAUVector4@@00@Z ; _Vector4MathFunctionsSSE::Add
PUBLIC	??_R4_Vector4MathFunctionsSSE@@6B@		; _Vector4MathFunctionsSSE::`RTTI Complete Object Locator'
PUBLIC	??_R3_Vector4MathFunctionsSSE@@8		; _Vector4MathFunctionsSSE::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Vector4MathFunctionsSSE@@8		; _Vector4MathFunctionsSSE::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Vector4MathFunctionsSSE@@8	; _Vector4MathFunctionsSSE::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV_Vector4MathFunctionsSSE@@@8		; _Vector4MathFunctionsSSE `RTTI Type Descriptor'
PUBLIC	?Divide@_Vector4MathFunctions@@UAEXPAUVector4@@00@Z ; _Vector4MathFunctions::Divide
PUBLIC	?Divide@_Vector4MathFunctions@@UAEXPAUVector4@@PAM0@Z ; _Vector4MathFunctions::Divide
PUBLIC	?Divide@_Vector4MathFunctions@@UAE?AUVector4@@PAU2@0@Z ; _Vector4MathFunctions::Divide
PUBLIC	?Divide@_Vector4MathFunctions@@UAE?AUVector4@@PAU2@PAM@Z ; _Vector4MathFunctions::Divide
PUBLIC	?Multiply@_Vector4MathFunctions@@UAEXPAUVector4@@00@Z ; _Vector4MathFunctions::Multiply
PUBLIC	?Multiply@_Vector4MathFunctions@@UAEXPAUVector4@@PAM0@Z ; _Vector4MathFunctions::Multiply
PUBLIC	?Multiply@_Vector4MathFunctions@@UAE?AUVector4@@PAU2@0@Z ; _Vector4MathFunctions::Multiply
PUBLIC	?Multiply@_Vector4MathFunctions@@UAE?AUVector4@@PAU2@PAM@Z ; _Vector4MathFunctions::Multiply
PUBLIC	?Subtract@_Vector4MathFunctions@@UAEXPAUVector4@@00@Z ; _Vector4MathFunctions::Subtract
PUBLIC	?Subtract@_Vector4MathFunctions@@UAE?AUVector4@@PAU2@0@Z ; _Vector4MathFunctions::Subtract
PUBLIC	?Add@_Vector4MathFunctions@@UAEXPAUVector4@@00@Z ; _Vector4MathFunctions::Add
PUBLIC	?Add@_Vector4MathFunctions@@UAE?AUVector4@@PAU2@0@Z ; _Vector4MathFunctions::Add
PUBLIC	??_R4_Vector4MathFunctions@@6B@			; _Vector4MathFunctions::`RTTI Complete Object Locator'
PUBLIC	??_R3_Vector4MathFunctions@@8			; _Vector4MathFunctions::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Vector4MathFunctions@@8			; _Vector4MathFunctions::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Vector4MathFunctions@@8		; _Vector4MathFunctions::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV_Vector4MathFunctions@@@8		; _Vector4MathFunctions `RTTI Type Descriptor'
PUBLIC	?Dot@_Vector3MathFunctions@@UAEXPAUVector3@@0PAM@Z ; _Vector3MathFunctions::Dot
PUBLIC	?Dot@_Vector3MathFunctions@@UAEMPAUVector3@@0@Z	; _Vector3MathFunctions::Dot
PUBLIC	?Normalize@_Vector3MathFunctions@@UAEXPAUVector3@@0@Z ; _Vector3MathFunctions::Normalize
PUBLIC	?Normalize@_Vector3MathFunctions@@UAE?AUVector3@@PAU2@@Z ; _Vector3MathFunctions::Normalize
PUBLIC	?Cross@_Vector3MathFunctions@@UAEXPAUVector3@@00@Z ; _Vector3MathFunctions::Cross
PUBLIC	?Cross@_Vector3MathFunctions@@UAE?AUVector3@@PAU2@0@Z ; _Vector3MathFunctions::Cross
PUBLIC	?Divide@_Vector3MathFunctions@@UAEXPAUVector3@@00@Z ; _Vector3MathFunctions::Divide
PUBLIC	?Divide@_Vector3MathFunctions@@UAEXPAUVector3@@PAM0@Z ; _Vector3MathFunctions::Divide
PUBLIC	?Divide@_Vector3MathFunctions@@UAE?AUVector3@@PAU2@0@Z ; _Vector3MathFunctions::Divide
PUBLIC	?Divide@_Vector3MathFunctions@@UAE?AUVector3@@PAU2@PAM@Z ; _Vector3MathFunctions::Divide
PUBLIC	?Multiply@_Vector3MathFunctions@@UAEXPAUVector3@@00@Z ; _Vector3MathFunctions::Multiply
PUBLIC	?Multiply@_Vector3MathFunctions@@UAEXPAUVector3@@PAM0@Z ; _Vector3MathFunctions::Multiply
PUBLIC	?Multiply@_Vector3MathFunctions@@UAE?AUVector3@@PAU2@0@Z ; _Vector3MathFunctions::Multiply
PUBLIC	?Multiply@_Vector3MathFunctions@@UAE?AUVector3@@PAU2@PAM@Z ; _Vector3MathFunctions::Multiply
PUBLIC	?Subtract@_Vector3MathFunctions@@UAEXPAUVector3@@00@Z ; _Vector3MathFunctions::Subtract
PUBLIC	?Subtract@_Vector3MathFunctions@@UAE?AUVector3@@PAU2@0@Z ; _Vector3MathFunctions::Subtract
PUBLIC	?Add@_Vector3MathFunctions@@UAEXPAUVector3@@00@Z ; _Vector3MathFunctions::Add
PUBLIC	?Add@_Vector3MathFunctions@@UAE?AUVector3@@PAU2@0@Z ; _Vector3MathFunctions::Add
PUBLIC	??_R4_Vector3MathFunctions@@6B@			; _Vector3MathFunctions::`RTTI Complete Object Locator'
PUBLIC	??_R3_Vector3MathFunctions@@8			; _Vector3MathFunctions::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Vector3MathFunctions@@8			; _Vector3MathFunctions::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Vector3MathFunctions@@8		; _Vector3MathFunctions::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV_Vector3MathFunctions@@@8		; _Vector3MathFunctions `RTTI Type Descriptor'
PUBLIC	??0_Vector3MathFunctions@@QAE@XZ		; _Vector3MathFunctions::_Vector3MathFunctions
PUBLIC	??0_Vector4MathFunctions@@QAE@XZ		; _Vector4MathFunctions::_Vector4MathFunctions
PUBLIC	??0_Vector4MathFunctionsSSE@@QAE@XZ		; _Vector4MathFunctionsSSE::_Vector4MathFunctionsSSE
PUBLIC	_sqrtf
PUBLIC	?sqrt@@YAMM@Z					; sqrt
PUBLIC	??_FVector4@@QAEXXZ				; Vector4::`default constructor closure'
PUBLIC	?Vector3Math@@3PAV_Vector3MathFunctions@@A	; Vector3Math
PUBLIC	?Vector4Math@@3PAV_Vector4MathFunctions@@A	; Vector4Math
PUBLIC	??_7_Vector3MathFunctions@@6B@			; _Vector3MathFunctions::`vftable'
PUBLIC	??_7_Vector4MathFunctions@@6B@			; _Vector4MathFunctions::`vftable'
PUBLIC	??_7_Vector4MathFunctionsSSE@@6B@		; _Vector4MathFunctionsSSE::`vftable'
?Vector3Math@@3PAV_Vector3MathFunctions@@A DD 01H DUP (?) ; Vector3Math
?Vector4Math@@3PAV_Vector4MathFunctions@@A DD 01H DUP (?) ; Vector4Math
;	COMDAT ??_7_Vector4MathFunctionsSSE@@6B@
CONST	SEGMENT
??_7_Vector4MathFunctionsSSE@@6B@ DD FLAT:??_R4_Vector4MathFunctionsSSE@@6B@ ; _Vector4MathFunctionsSSE::`vftable'
	DD	FLAT:?Add@_Vector4MathFunctions@@UAE?AUVector4@@PAU2@0@Z
	DD	FLAT:?Add@_Vector4MathFunctionsSSE@@UAEXPAUVector4@@00@Z
	DD	FLAT:?Subtract@_Vector4MathFunctions@@UAE?AUVector4@@PAU2@0@Z
	DD	FLAT:?Subtract@_Vector4MathFunctionsSSE@@UAEXPAUVector4@@00@Z
	DD	FLAT:?Multiply@_Vector4MathFunctions@@UAE?AUVector4@@PAU2@PAM@Z
	DD	FLAT:?Multiply@_Vector4MathFunctions@@UAE?AUVector4@@PAU2@0@Z
	DD	FLAT:?Multiply@_Vector4MathFunctionsSSE@@UAEXPAUVector4@@PAM0@Z
	DD	FLAT:?Multiply@_Vector4MathFunctionsSSE@@UAEXPAUVector4@@00@Z
	DD	FLAT:?Divide@_Vector4MathFunctions@@UAE?AUVector4@@PAU2@PAM@Z
	DD	FLAT:?Divide@_Vector4MathFunctions@@UAE?AUVector4@@PAU2@0@Z
	DD	FLAT:?Divide@_Vector4MathFunctionsSSE@@UAEXPAUVector4@@PAM0@Z
	DD	FLAT:?Divide@_Vector4MathFunctionsSSE@@UAEXPAUVector4@@00@Z
CONST	ENDS
;	COMDAT ??_R4_Vector4MathFunctionsSSE@@6B@
rdata$r	SEGMENT
??_R4_Vector4MathFunctionsSSE@@6B@ DD 00H		; _Vector4MathFunctionsSSE::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Vector4MathFunctionsSSE@@@8
	DD	FLAT:??_R3_Vector4MathFunctionsSSE@@8
rdata$r	ENDS
;	COMDAT ??_R3_Vector4MathFunctionsSSE@@8
rdata$r	SEGMENT
??_R3_Vector4MathFunctionsSSE@@8 DD 00H			; _Vector4MathFunctionsSSE::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Vector4MathFunctionsSSE@@8
rdata$r	ENDS
;	COMDAT ??_R2_Vector4MathFunctionsSSE@@8
rdata$r	SEGMENT
??_R2_Vector4MathFunctionsSSE@@8 DD FLAT:??_R1A@?0A@EA@_Vector4MathFunctionsSSE@@8 ; _Vector4MathFunctionsSSE::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Vector4MathFunctions@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Vector4MathFunctionsSSE@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Vector4MathFunctionsSSE@@8 DD FLAT:??_R0?AV_Vector4MathFunctionsSSE@@@8 ; _Vector4MathFunctionsSSE::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Vector4MathFunctionsSSE@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Vector4MathFunctionsSSE@@@8
_DATA	SEGMENT
??_R0?AV_Vector4MathFunctionsSSE@@@8 DD FLAT:??_7type_info@@6B@ ; _Vector4MathFunctionsSSE `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Vector4MathFunctionsSSE@@', 00H
_DATA	ENDS
;	COMDAT ??_7_Vector4MathFunctions@@6B@
CONST	SEGMENT
??_7_Vector4MathFunctions@@6B@ DD FLAT:??_R4_Vector4MathFunctions@@6B@ ; _Vector4MathFunctions::`vftable'
	DD	FLAT:?Add@_Vector4MathFunctions@@UAE?AUVector4@@PAU2@0@Z
	DD	FLAT:?Add@_Vector4MathFunctions@@UAEXPAUVector4@@00@Z
	DD	FLAT:?Subtract@_Vector4MathFunctions@@UAE?AUVector4@@PAU2@0@Z
	DD	FLAT:?Subtract@_Vector4MathFunctions@@UAEXPAUVector4@@00@Z
	DD	FLAT:?Multiply@_Vector4MathFunctions@@UAE?AUVector4@@PAU2@PAM@Z
	DD	FLAT:?Multiply@_Vector4MathFunctions@@UAE?AUVector4@@PAU2@0@Z
	DD	FLAT:?Multiply@_Vector4MathFunctions@@UAEXPAUVector4@@PAM0@Z
	DD	FLAT:?Multiply@_Vector4MathFunctions@@UAEXPAUVector4@@00@Z
	DD	FLAT:?Divide@_Vector4MathFunctions@@UAE?AUVector4@@PAU2@PAM@Z
	DD	FLAT:?Divide@_Vector4MathFunctions@@UAE?AUVector4@@PAU2@0@Z
	DD	FLAT:?Divide@_Vector4MathFunctions@@UAEXPAUVector4@@PAM0@Z
	DD	FLAT:?Divide@_Vector4MathFunctions@@UAEXPAUVector4@@00@Z
CONST	ENDS
;	COMDAT ??_R4_Vector4MathFunctions@@6B@
rdata$r	SEGMENT
??_R4_Vector4MathFunctions@@6B@ DD 00H			; _Vector4MathFunctions::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Vector4MathFunctions@@@8
	DD	FLAT:??_R3_Vector4MathFunctions@@8
rdata$r	ENDS
;	COMDAT ??_R3_Vector4MathFunctions@@8
rdata$r	SEGMENT
??_R3_Vector4MathFunctions@@8 DD 00H			; _Vector4MathFunctions::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2_Vector4MathFunctions@@8
rdata$r	ENDS
;	COMDAT ??_R2_Vector4MathFunctions@@8
rdata$r	SEGMENT
??_R2_Vector4MathFunctions@@8 DD FLAT:??_R1A@?0A@EA@_Vector4MathFunctions@@8 ; _Vector4MathFunctions::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Vector4MathFunctions@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Vector4MathFunctions@@8 DD FLAT:??_R0?AV_Vector4MathFunctions@@@8 ; _Vector4MathFunctions::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Vector4MathFunctions@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Vector4MathFunctions@@@8
_DATA	SEGMENT
??_R0?AV_Vector4MathFunctions@@@8 DD FLAT:??_7type_info@@6B@ ; _Vector4MathFunctions `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Vector4MathFunctions@@', 00H
_DATA	ENDS
;	COMDAT ??_7_Vector3MathFunctions@@6B@
CONST	SEGMENT
??_7_Vector3MathFunctions@@6B@ DD FLAT:??_R4_Vector3MathFunctions@@6B@ ; _Vector3MathFunctions::`vftable'
	DD	FLAT:?Add@_Vector3MathFunctions@@UAE?AUVector3@@PAU2@0@Z
	DD	FLAT:?Add@_Vector3MathFunctions@@UAEXPAUVector3@@00@Z
	DD	FLAT:?Subtract@_Vector3MathFunctions@@UAE?AUVector3@@PAU2@0@Z
	DD	FLAT:?Subtract@_Vector3MathFunctions@@UAEXPAUVector3@@00@Z
	DD	FLAT:?Multiply@_Vector3MathFunctions@@UAE?AUVector3@@PAU2@PAM@Z
	DD	FLAT:?Multiply@_Vector3MathFunctions@@UAE?AUVector3@@PAU2@0@Z
	DD	FLAT:?Multiply@_Vector3MathFunctions@@UAEXPAUVector3@@PAM0@Z
	DD	FLAT:?Multiply@_Vector3MathFunctions@@UAEXPAUVector3@@00@Z
	DD	FLAT:?Divide@_Vector3MathFunctions@@UAE?AUVector3@@PAU2@PAM@Z
	DD	FLAT:?Divide@_Vector3MathFunctions@@UAE?AUVector3@@PAU2@0@Z
	DD	FLAT:?Divide@_Vector3MathFunctions@@UAEXPAUVector3@@PAM0@Z
	DD	FLAT:?Divide@_Vector3MathFunctions@@UAEXPAUVector3@@00@Z
	DD	FLAT:?Cross@_Vector3MathFunctions@@UAE?AUVector3@@PAU2@0@Z
	DD	FLAT:?Cross@_Vector3MathFunctions@@UAEXPAUVector3@@00@Z
	DD	FLAT:?Normalize@_Vector3MathFunctions@@UAE?AUVector3@@PAU2@@Z
	DD	FLAT:?Normalize@_Vector3MathFunctions@@UAEXPAUVector3@@0@Z
	DD	FLAT:?Dot@_Vector3MathFunctions@@UAEMPAUVector3@@0@Z
	DD	FLAT:?Dot@_Vector3MathFunctions@@UAEXPAUVector3@@0PAM@Z
CONST	ENDS
;	COMDAT ??_R4_Vector3MathFunctions@@6B@
rdata$r	SEGMENT
??_R4_Vector3MathFunctions@@6B@ DD 00H			; _Vector3MathFunctions::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Vector3MathFunctions@@@8
	DD	FLAT:??_R3_Vector3MathFunctions@@8
rdata$r	ENDS
;	COMDAT ??_R3_Vector3MathFunctions@@8
rdata$r	SEGMENT
??_R3_Vector3MathFunctions@@8 DD 00H			; _Vector3MathFunctions::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2_Vector3MathFunctions@@8
rdata$r	ENDS
;	COMDAT ??_R2_Vector3MathFunctions@@8
rdata$r	SEGMENT
??_R2_Vector3MathFunctions@@8 DD FLAT:??_R1A@?0A@EA@_Vector3MathFunctions@@8 ; _Vector3MathFunctions::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Vector3MathFunctions@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Vector3MathFunctions@@8 DD FLAT:??_R0?AV_Vector3MathFunctions@@@8 ; _Vector3MathFunctions::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Vector3MathFunctions@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Vector3MathFunctions@@@8
_DATA	SEGMENT
??_R0?AV_Vector3MathFunctions@@@8 DD FLAT:??_7type_info@@6B@ ; _Vector3MathFunctions `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Vector3MathFunctions@@', 00H
; Function compile flags: /Ogtpy
; File c:\users\admin\desktop\projects\seye_server\engine_math.cpp
;	COMDAT ?Divide@_Vector4MathFunctionsSSE@@UAEXPAUVector4@@PAM0@Z
_TEXT	SEGMENT
_src1$ = 8						; size = 4
_src2$ = 12						; size = 4
_dest$ = 16						; size = 4
?Divide@_Vector4MathFunctionsSSE@@UAEXPAUVector4@@PAM0@Z PROC ; _Vector4MathFunctionsSSE::Divide, COMDAT
; _this$ = ecx

; 554  : {

	push	ebp
	mov	ebp, esp
	and	esp, -16				; fffffff0H

; 555  : 	__m128 a = _mm_loadu_ps((float*)src1);
; 556  : 	__m128 b = _mm_load_ps1((float*)src2);

	mov	ecx, DWORD PTR _src2$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _src1$[ebp]
	movups	xmm1, XMMWORD PTR [edx]

; 557  : 	__m128 res = _mm_mul_ps(a,b);
; 558  : 	_mm_storeu_ps((float*)dest,res);

	mov	eax, DWORD PTR _dest$[ebp]
	shufps	xmm0, xmm0, 0
	mulps	xmm0, xmm1
	movups	XMMWORD PTR [eax], xmm0

; 559  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Divide@_Vector4MathFunctionsSSE@@UAEXPAUVector4@@PAM0@Z ENDP ; _Vector4MathFunctionsSSE::Divide
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Multiply@_Vector4MathFunctionsSSE@@UAEXPAUVector4@@PAM0@Z
_TEXT	SEGMENT
_src1$ = 8						; size = 4
_src2$ = 12						; size = 4
_dest$ = 16						; size = 4
?Multiply@_Vector4MathFunctionsSSE@@UAEXPAUVector4@@PAM0@Z PROC ; _Vector4MathFunctionsSSE::Multiply, COMDAT
; _this$ = ecx

; 547  : {

	push	ebp
	mov	ebp, esp
	and	esp, -16				; fffffff0H

; 548  : 	__m128 a = _mm_loadu_ps((float*)src1);
; 549  : 	__m128 b = _mm_load_ps1((float*)src2);

	mov	ecx, DWORD PTR _src2$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _src1$[ebp]
	movups	xmm1, XMMWORD PTR [edx]

; 550  : 	__m128 res = _mm_mul_ps(a,b);
; 551  : 	_mm_storeu_ps((float*)dest,res);

	mov	eax, DWORD PTR _dest$[ebp]
	shufps	xmm0, xmm0, 0
	mulps	xmm0, xmm1
	movups	XMMWORD PTR [eax], xmm0

; 552  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Multiply@_Vector4MathFunctionsSSE@@UAEXPAUVector4@@PAM0@Z ENDP ; _Vector4MathFunctionsSSE::Multiply
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Divide@_Vector4MathFunctionsSSE@@UAEXPAUVector4@@00@Z
_TEXT	SEGMENT
_src1$ = 8						; size = 4
_src2$ = 12						; size = 4
_dest$ = 16						; size = 4
?Divide@_Vector4MathFunctionsSSE@@UAEXPAUVector4@@00@Z PROC ; _Vector4MathFunctionsSSE::Divide, COMDAT
; _this$ = ecx

; 540  : {

	push	ebp
	mov	ebp, esp
	and	esp, -16				; fffffff0H

; 541  : 	__m128 a = _mm_loadu_ps((float*)src1);

	mov	ecx, DWORD PTR _src1$[ebp]

; 542  : 	__m128 b = _mm_loadu_ps((float*)src2);

	mov	edx, DWORD PTR _src2$[ebp]
	movups	xmm0, XMMWORD PTR [ecx]
	movups	xmm1, XMMWORD PTR [edx]

; 543  : 	__m128 res = _mm_div_ps(a,b);
; 544  : 	_mm_storeu_ps((float*)dest,res);

	mov	eax, DWORD PTR _dest$[ebp]
	divps	xmm0, xmm1
	movups	XMMWORD PTR [eax], xmm0

; 545  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Divide@_Vector4MathFunctionsSSE@@UAEXPAUVector4@@00@Z ENDP ; _Vector4MathFunctionsSSE::Divide
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Multiply@_Vector4MathFunctionsSSE@@UAEXPAUVector4@@00@Z
_TEXT	SEGMENT
_src1$ = 8						; size = 4
_src2$ = 12						; size = 4
_dest$ = 16						; size = 4
?Multiply@_Vector4MathFunctionsSSE@@UAEXPAUVector4@@00@Z PROC ; _Vector4MathFunctionsSSE::Multiply, COMDAT
; _this$ = ecx

; 533  : {

	push	ebp
	mov	ebp, esp
	and	esp, -16				; fffffff0H

; 534  : 	__m128 a = _mm_loadu_ps((float*)src1);

	mov	ecx, DWORD PTR _src1$[ebp]

; 535  : 	__m128 b = _mm_loadu_ps((float*)src2);

	mov	edx, DWORD PTR _src2$[ebp]
	movups	xmm0, XMMWORD PTR [ecx]
	movups	xmm1, XMMWORD PTR [edx]

; 536  : 	__m128 res = _mm_mul_ps(a,b);
; 537  : 	_mm_storeu_ps((float*)dest,res);

	mov	eax, DWORD PTR _dest$[ebp]
	mulps	xmm0, xmm1
	movups	XMMWORD PTR [eax], xmm0

; 538  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Multiply@_Vector4MathFunctionsSSE@@UAEXPAUVector4@@00@Z ENDP ; _Vector4MathFunctionsSSE::Multiply
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Subtract@_Vector4MathFunctionsSSE@@UAEXPAUVector4@@00@Z
_TEXT	SEGMENT
_src1$ = 8						; size = 4
_src2$ = 12						; size = 4
_dest$ = 16						; size = 4
?Subtract@_Vector4MathFunctionsSSE@@UAEXPAUVector4@@00@Z PROC ; _Vector4MathFunctionsSSE::Subtract, COMDAT
; _this$ = ecx

; 526  : {

	push	ebp
	mov	ebp, esp
	and	esp, -16				; fffffff0H

; 527  : 	__m128 a = _mm_loadu_ps((float*)src1);

	mov	ecx, DWORD PTR _src1$[ebp]

; 528  : 	__m128 b = _mm_loadu_ps((float*)src2);

	mov	edx, DWORD PTR _src2$[ebp]
	movups	xmm0, XMMWORD PTR [ecx]
	movups	xmm1, XMMWORD PTR [edx]

; 529  : 	__m128 res = _mm_sub_ps(a,b);
; 530  : 	_mm_storeu_ps((float*)dest,res);

	mov	eax, DWORD PTR _dest$[ebp]
	subps	xmm0, xmm1
	movups	XMMWORD PTR [eax], xmm0

; 531  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Subtract@_Vector4MathFunctionsSSE@@UAEXPAUVector4@@00@Z ENDP ; _Vector4MathFunctionsSSE::Subtract
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Add@_Vector4MathFunctionsSSE@@UAEXPAUVector4@@00@Z
_TEXT	SEGMENT
_src1$ = 8						; size = 4
_src2$ = 12						; size = 4
_dest$ = 16						; size = 4
?Add@_Vector4MathFunctionsSSE@@UAEXPAUVector4@@00@Z PROC ; _Vector4MathFunctionsSSE::Add, COMDAT
; _this$ = ecx

; 519  : {

	push	ebp
	mov	ebp, esp
	and	esp, -16				; fffffff0H

; 520  : 	__m128 a = _mm_loadu_ps((float*)src1);

	mov	ecx, DWORD PTR _src1$[ebp]

; 521  : 	__m128 b = _mm_loadu_ps((float*)src2);

	mov	edx, DWORD PTR _src2$[ebp]
	movups	xmm0, XMMWORD PTR [ecx]
	movups	xmm1, XMMWORD PTR [edx]

; 522  : 	__m128 res = _mm_add_ps(a,b);
; 523  : 	_mm_storeu_ps((float*)dest,res);

	mov	eax, DWORD PTR _dest$[ebp]
	addps	xmm0, xmm1
	movups	XMMWORD PTR [eax], xmm0

; 524  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Add@_Vector4MathFunctionsSSE@@UAEXPAUVector4@@00@Z ENDP ; _Vector4MathFunctionsSSE::Add
_TEXT	ENDS
PUBLIC	??0Vector4@@QAE@MMMM@Z				; Vector4::Vector4
EXTRN	__fltused:DWORD
; Function compile flags: /Ogtpy
;	COMDAT ??0Vector4@@QAE@MMMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
_w$ = 20						; size = 4
??0Vector4@@QAE@MMMM@Z PROC				; Vector4::Vector4, COMDAT
; _this$ = eax

; 375  : 	X = x;

	fld	DWORD PTR _x$[esp-4]
	fstp	DWORD PTR [eax]

; 376  : 	Y = y;

	fld	DWORD PTR _y$[esp-4]
	fstp	DWORD PTR [eax+4]

; 377  : 	Z = z;

	fld	DWORD PTR _z$[esp-4]
	fstp	DWORD PTR [eax+8]

; 378  : 	W = w;

	fld	DWORD PTR _w$[esp-4]
	fstp	DWORD PTR [eax+12]

; 379  : };

	ret	16					; 00000010H
??0Vector4@@QAE@MMMM@Z ENDP				; Vector4::Vector4
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Dot@_Vector3MathFunctions@@UAEMPAUVector3@@0@Z
_TEXT	SEGMENT
_src1$ = 8						; size = 4
_temp$ = 12						; size = 4
_src2$ = 12						; size = 4
?Dot@_Vector3MathFunctions@@UAEMPAUVector3@@0@Z PROC	; _Vector3MathFunctions::Dot, COMDAT
; _this$ = ecx

; 295  : 	float temp;
; 296  : 	this->Dot(src1,src2,&temp);

	mov	eax, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+68]
	lea	edx, DWORD PTR _temp$[esp-4]
	push	edx
	mov	edx, DWORD PTR _src2$[esp]
	push	edx
	mov	edx, DWORD PTR _src1$[esp+4]
	push	edx
	call	eax

; 297  : 	return temp;

	fld	DWORD PTR _temp$[esp-4]

; 298  : }

	ret	8
?Dot@_Vector3MathFunctions@@UAEMPAUVector3@@0@Z ENDP	; _Vector3MathFunctions::Dot
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Dot@_Vector3MathFunctions@@UAEXPAUVector3@@0PAM@Z
_TEXT	SEGMENT
_src1$ = 8						; size = 4
_src2$ = 12						; size = 4
_dest$ = 16						; size = 4
?Dot@_Vector3MathFunctions@@UAEXPAUVector3@@0PAM@Z PROC	; _Vector3MathFunctions::Dot, COMDAT
; _this$ = ecx

; 243  : 	*dest = (src1->X * src2->X) + (src1->Y * src2->Y) + (src1->Z * src2->Z);

	mov	eax, DWORD PTR _src1$[esp-4]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _src2$[esp-4]
	fmul	DWORD PTR [ecx+8]
	fld	DWORD PTR [eax+4]
	fmul	DWORD PTR [ecx+4]
	faddp	ST(1), ST(0)
	fld	DWORD PTR [eax]
	mov	eax, DWORD PTR _dest$[esp-4]
	fmul	DWORD PTR [ecx]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR [eax]

; 244  : }

	ret	12					; 0000000cH
?Dot@_Vector3MathFunctions@@UAEXPAUVector3@@0PAM@Z ENDP	; _Vector3MathFunctions::Dot
_TEXT	ENDS
PUBLIC	??0Vector3@@QAE@MMM@Z				; Vector3::Vector3
; Function compile flags: /Ogtpy
;	COMDAT ??0Vector3@@QAE@MMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
??0Vector3@@QAE@MMM@Z PROC				; Vector3::Vector3, COMDAT
; _this$ = eax

; 118  : 	X = x;

	fld	DWORD PTR _x$[esp-4]
	fstp	DWORD PTR [eax]

; 119  : 	Y = y;

	fld	DWORD PTR _y$[esp-4]
	fstp	DWORD PTR [eax+4]

; 120  : 	Z = z;

	fld	DWORD PTR _z$[esp-4]
	fstp	DWORD PTR [eax+8]

; 121  : }

	ret	12					; 0000000cH
??0Vector3@@QAE@MMM@Z ENDP				; Vector3::Vector3
_TEXT	ENDS
PUBLIC	__real@00000000
PUBLIC	??0Vector2@@QAE@MM@Z				; Vector2::Vector2
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0Vector2@@QAE@MM@Z
_TEXT	SEGMENT
??0Vector2@@QAE@MM@Z PROC				; Vector2::Vector2, COMDAT
; _this$ = eax

; 48   : 	X = x;

	fldz
	fst	DWORD PTR [eax]

; 49   : 	Y = y;

	fstp	DWORD PTR [eax+4]

; 50   : }

	ret	0
??0Vector2@@QAE@MM@Z ENDP				; Vector2::Vector2
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0_Vector4MathFunctions@@QAE@XZ
_TEXT	SEGMENT
??0_Vector4MathFunctions@@QAE@XZ PROC			; _Vector4MathFunctions::_Vector4MathFunctions, COMDAT
; _this$ = eax
	mov	DWORD PTR [eax], OFFSET ??_7_Vector4MathFunctions@@6B@
	ret	0
??0_Vector4MathFunctions@@QAE@XZ ENDP			; _Vector4MathFunctions::_Vector4MathFunctions
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0_Vector4MathFunctionsSSE@@QAE@XZ
_TEXT	SEGMENT
??0_Vector4MathFunctionsSSE@@QAE@XZ PROC		; _Vector4MathFunctionsSSE::_Vector4MathFunctionsSSE, COMDAT
; _this$ = eax
	mov	DWORD PTR [eax], OFFSET ??_7_Vector4MathFunctionsSSE@@6B@
	ret	0
??0_Vector4MathFunctionsSSE@@QAE@XZ ENDP		; _Vector4MathFunctionsSSE::_Vector4MathFunctionsSSE
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0_Vector3MathFunctions@@QAE@XZ
_TEXT	SEGMENT
??0_Vector3MathFunctions@@QAE@XZ PROC			; _Vector3MathFunctions::_Vector3MathFunctions, COMDAT
; _this$ = eax
	mov	DWORD PTR [eax], OFFSET ??_7_Vector3MathFunctions@@6B@
	ret	0
??0_Vector3MathFunctions@@QAE@XZ ENDP			; _Vector3MathFunctions::_Vector3MathFunctions
_TEXT	ENDS
PUBLIC	?InitEngineMath@@YAXXZ				; InitEngineMath
; Function compile flags: /Ogtpy
;	COMDAT ?InitEngineMath@@YAXXZ
_TEXT	SEGMENT
?InitEngineMath@@YAXXZ PROC				; InitEngineMath, COMDAT

; 24   : 	Vector3Math = new _Vector3MathFunctions();

	cmp	DWORD PTR ?RenNew@@3P6APAXK@ZA, 0	; RenNew
	jne	SHORT $LN11@InitEngine@10
	call	?InitEngine@@YAXXZ			; InitEngine
$LN11@InitEngine@10:
	push	4
	call	DWORD PTR ?RenNew@@3P6APAXK@ZA		; RenNew
	add	esp, 4
	test	eax, eax
	je	SHORT $LN5@InitEngine@10
	mov	DWORD PTR [eax], OFFSET ??_7_Vector3MathFunctions@@6B@
	mov	DWORD PTR ?Vector3Math@@3PAV_Vector3MathFunctions@@A, eax ; Vector3Math
	jmp	SHORT $LN6@InitEngine@10
$LN5@InitEngine@10:
	mov	DWORD PTR ?Vector3Math@@3PAV_Vector3MathFunctions@@A, 0 ; Vector3Math
$LN6@InitEngine@10:

; 25   : #ifdef WIN32
; 26   : 	if ((HasSSE) && (*HasSSE))

	mov	eax, DWORD PTR ?HasSSE@@3PA_NA		; HasSSE
	test	eax, eax
	je	SHORT $LN2@InitEngine@10
	cmp	BYTE PTR [eax], 0
	je	SHORT $LN2@InitEngine@10

; 27   : 	{
; 28   : 		//DO NOT USE _Vector3MathFunctionsSSE, NOT FULLY OPERATIONAL YET
; 29   : 		//Vector3Math = new _Vector3MathFunctionsSSE();
; 30   : 		Vector4Math = new _Vector4MathFunctionsSSE();

	cmp	DWORD PTR ?RenNew@@3P6APAXK@ZA, 0	; RenNew
	jne	SHORT $LN16@InitEngine@10
	call	?InitEngine@@YAXXZ			; InitEngine
$LN16@InitEngine@10:
	push	4
	call	DWORD PTR ?RenNew@@3P6APAXK@ZA		; RenNew
	add	esp, 4
	test	eax, eax
	je	SHORT $LN9@InitEngine@10
	mov	DWORD PTR [eax], OFFSET ??_7_Vector4MathFunctionsSSE@@6B@

; 31   : 	}
; 32   : 	else
; 33   : #endif
; 34   : 	{
; 35   : 		//Vector3Math = new _Vector3MathFunctions();
; 36   : 		Vector4Math = new _Vector4MathFunctions();

	mov	DWORD PTR ?Vector4Math@@3PAV_Vector4MathFunctions@@A, eax ; Vector4Math

; 37   : 	}
; 38   : }

	ret	0
$LN2@InitEngine@10:

; 31   : 	}
; 32   : 	else
; 33   : #endif
; 34   : 	{
; 35   : 		//Vector3Math = new _Vector3MathFunctions();
; 36   : 		Vector4Math = new _Vector4MathFunctions();

	cmp	DWORD PTR ?RenNew@@3P6APAXK@ZA, 0	; RenNew
	jne	SHORT $LN46@InitEngine@10
	call	?InitEngine@@YAXXZ			; InitEngine
$LN46@InitEngine@10:
	push	4
	call	DWORD PTR ?RenNew@@3P6APAXK@ZA		; RenNew
	add	esp, 4
	test	eax, eax
	je	SHORT $LN9@InitEngine@10
	mov	DWORD PTR [eax], OFFSET ??_7_Vector4MathFunctions@@6B@
	mov	DWORD PTR ?Vector4Math@@3PAV_Vector4MathFunctions@@A, eax ; Vector4Math

; 37   : 	}
; 38   : }

	ret	0
$LN9@InitEngine@10:

; 31   : 	}
; 32   : 	else
; 33   : #endif
; 34   : 	{
; 35   : 		//Vector3Math = new _Vector3MathFunctions();
; 36   : 		Vector4Math = new _Vector4MathFunctions();

	mov	DWORD PTR ?Vector4Math@@3PAV_Vector4MathFunctions@@A, 0 ; Vector4Math

; 37   : 	}
; 38   : }

	ret	0
?InitEngineMath@@YAXXZ ENDP				; InitEngineMath
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\math.h
_TEXT	ENDS
;	COMDAT _sqrtf
_TEXT	SEGMENT
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 423  :         {return ((float)sqrt((double)_X)); }

	fld	DWORD PTR __X$[esp-4]
	fsqrt
	ret	0
_sqrtf	ENDP
; Function compile flags: /Ogtpy
;	COMDAT ??_FVector4@@QAEXXZ
_TEXT	SEGMENT
??_FVector4@@QAEXXZ PROC				; Vector4::`default constructor closure', COMDAT
; _this$ = ecx
	fldz
	fst	DWORD PTR [ecx]
	fst	DWORD PTR [ecx+4]
	fst	DWORD PTR [ecx+8]
	fstp	DWORD PTR [ecx+12]
	ret	0
??_FVector4@@QAEXXZ ENDP				; Vector4::`default constructor closure'
; Function compile flags: /Ogtpy
; File c:\users\admin\desktop\projects\seye_server\engine_math.cpp
_TEXT	ENDS
;	COMDAT ?Divide@_Vector4MathFunctions@@UAE?AUVector4@@PAU2@PAM@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_src1$ = 12						; size = 4
_src2$ = 16						; size = 4
?Divide@_Vector4MathFunctions@@UAE?AUVector4@@PAU2@PAM@Z PROC ; _Vector4MathFunctions::Divide, COMDAT
; _this$ = ecx

; 512  : 	Vector4 temp;

	fldz

; 513  : 	this->Divide(src1,src2,&temp);

	mov	edx, DWORD PTR _src2$[esp-4]
	mov	eax, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+40]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[esp]
	push	esi
	fst	DWORD PTR [esi]
	push	edx
	fst	DWORD PTR [esi+4]
	mov	edx, DWORD PTR _src1$[esp+8]
	fst	DWORD PTR [esi+8]
	push	edx
	fstp	DWORD PTR [esi+12]
	call	eax

; 514  : 	return temp;

	mov	eax, esi
	pop	esi

; 515  : }

	ret	12					; 0000000cH
?Divide@_Vector4MathFunctions@@UAE?AUVector4@@PAU2@PAM@Z ENDP ; _Vector4MathFunctions::Divide
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Multiply@_Vector4MathFunctions@@UAE?AUVector4@@PAU2@PAM@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_src1$ = 12						; size = 4
_src2$ = 16						; size = 4
?Multiply@_Vector4MathFunctions@@UAE?AUVector4@@PAU2@PAM@Z PROC ; _Vector4MathFunctions::Multiply, COMDAT
; _this$ = ecx

; 506  : 	Vector4 temp;

	fldz

; 507  : 	this->Multiply(src1,src2,&temp);

	mov	edx, DWORD PTR _src2$[esp-4]
	mov	eax, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+24]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[esp]
	push	esi
	fst	DWORD PTR [esi]
	push	edx
	fst	DWORD PTR [esi+4]
	mov	edx, DWORD PTR _src1$[esp+8]
	fst	DWORD PTR [esi+8]
	push	edx
	fstp	DWORD PTR [esi+12]
	call	eax

; 508  : 	return temp;

	mov	eax, esi
	pop	esi

; 509  : }

	ret	12					; 0000000cH
?Multiply@_Vector4MathFunctions@@UAE?AUVector4@@PAU2@PAM@Z ENDP ; _Vector4MathFunctions::Multiply
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Divide@_Vector4MathFunctions@@UAE?AUVector4@@PAU2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_src1$ = 12						; size = 4
_src2$ = 16						; size = 4
?Divide@_Vector4MathFunctions@@UAE?AUVector4@@PAU2@0@Z PROC ; _Vector4MathFunctions::Divide, COMDAT
; _this$ = ecx

; 500  : 	Vector4 temp;

	fldz

; 501  : 	this->Divide(src1,src2,&temp);

	mov	edx, DWORD PTR _src2$[esp-4]
	mov	eax, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+44]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[esp]
	push	esi
	fst	DWORD PTR [esi]
	push	edx
	fst	DWORD PTR [esi+4]
	mov	edx, DWORD PTR _src1$[esp+8]
	fst	DWORD PTR [esi+8]
	push	edx
	fstp	DWORD PTR [esi+12]
	call	eax

; 502  : 	return temp;

	mov	eax, esi
	pop	esi

; 503  : }

	ret	12					; 0000000cH
?Divide@_Vector4MathFunctions@@UAE?AUVector4@@PAU2@0@Z ENDP ; _Vector4MathFunctions::Divide
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Multiply@_Vector4MathFunctions@@UAE?AUVector4@@PAU2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_src1$ = 12						; size = 4
_src2$ = 16						; size = 4
?Multiply@_Vector4MathFunctions@@UAE?AUVector4@@PAU2@0@Z PROC ; _Vector4MathFunctions::Multiply, COMDAT
; _this$ = ecx

; 494  : 	Vector4 temp;

	fldz

; 495  : 	this->Multiply(src1,src2,&temp);

	mov	edx, DWORD PTR _src2$[esp-4]
	mov	eax, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+28]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[esp]
	push	esi
	fst	DWORD PTR [esi]
	push	edx
	fst	DWORD PTR [esi+4]
	mov	edx, DWORD PTR _src1$[esp+8]
	fst	DWORD PTR [esi+8]
	push	edx
	fstp	DWORD PTR [esi+12]
	call	eax

; 496  : 	return temp;

	mov	eax, esi
	pop	esi

; 497  : }

	ret	12					; 0000000cH
?Multiply@_Vector4MathFunctions@@UAE?AUVector4@@PAU2@0@Z ENDP ; _Vector4MathFunctions::Multiply
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Subtract@_Vector4MathFunctions@@UAE?AUVector4@@PAU2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_src1$ = 12						; size = 4
_src2$ = 16						; size = 4
?Subtract@_Vector4MathFunctions@@UAE?AUVector4@@PAU2@0@Z PROC ; _Vector4MathFunctions::Subtract, COMDAT
; _this$ = ecx

; 488  : 	Vector4 temp;

	fldz

; 489  : 	this->Subtract(src1,src2,&temp);

	mov	edx, DWORD PTR _src2$[esp-4]
	mov	eax, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+12]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[esp]
	push	esi
	fst	DWORD PTR [esi]
	push	edx
	fst	DWORD PTR [esi+4]
	mov	edx, DWORD PTR _src1$[esp+8]
	fst	DWORD PTR [esi+8]
	push	edx
	fstp	DWORD PTR [esi+12]
	call	eax

; 490  : 	return temp;

	mov	eax, esi
	pop	esi

; 491  : }

	ret	12					; 0000000cH
?Subtract@_Vector4MathFunctions@@UAE?AUVector4@@PAU2@0@Z ENDP ; _Vector4MathFunctions::Subtract
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Add@_Vector4MathFunctions@@UAE?AUVector4@@PAU2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_src1$ = 12						; size = 4
_src2$ = 16						; size = 4
?Add@_Vector4MathFunctions@@UAE?AUVector4@@PAU2@0@Z PROC ; _Vector4MathFunctions::Add, COMDAT
; _this$ = ecx

; 482  : 	Vector4 temp;

	fldz

; 483  : 	this->Add(src1,src2,&temp);

	mov	edx, DWORD PTR _src2$[esp-4]
	mov	eax, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[esp]
	push	esi
	fst	DWORD PTR [esi]
	push	edx
	fst	DWORD PTR [esi+4]
	mov	edx, DWORD PTR _src1$[esp+8]
	fst	DWORD PTR [esi+8]
	push	edx
	fstp	DWORD PTR [esi+12]
	call	eax

; 484  : 	return temp;

	mov	eax, esi
	pop	esi

; 485  : }

	ret	12					; 0000000cH
?Add@_Vector4MathFunctions@@UAE?AUVector4@@PAU2@0@Z ENDP ; _Vector4MathFunctions::Add
_TEXT	ENDS
PUBLIC	__real@3f800000
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?Divide@_Vector4MathFunctions@@UAEXPAUVector4@@PAM0@Z
_TEXT	SEGMENT
$T155812 = -16						; size = 16
_src1$ = 8						; size = 4
_src2$ = 12						; size = 4
_dest$ = 16						; size = 4
?Divide@_Vector4MathFunctions@@UAEXPAUVector4@@PAM0@Z PROC ; _Vector4MathFunctions::Divide, COMDAT
; _this$ = ecx

; 476  : {

	sub	esp, 16					; 00000010H

; 477  : 	*dest = Vector4(src1->X / *src2,src1->Y / *src2,src1->Z / *src2,src1->W / *src2);

	fld1
	mov	eax, DWORD PTR _src2$[esp+12]
	fdiv	DWORD PTR [eax]
	mov	eax, DWORD PTR _src1$[esp+12]
	fld	DWORD PTR [eax]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR $T155812[esp+16]
	mov	ecx, DWORD PTR $T155812[esp+16]
	fld	DWORD PTR [eax+4]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR $T155812[esp+20]
	mov	edx, DWORD PTR $T155812[esp+20]
	fld	DWORD PTR [eax+8]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR $T155812[esp+24]
	fmul	DWORD PTR [eax+12]
	mov	eax, DWORD PTR _dest$[esp+12]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR $T155812[esp+24]
	mov	DWORD PTR [eax+4], edx
	fstp	DWORD PTR $T155812[esp+28]
	mov	edx, DWORD PTR $T155812[esp+28]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx

; 478  : }

	add	esp, 16					; 00000010H
	ret	12					; 0000000cH
?Divide@_Vector4MathFunctions@@UAEXPAUVector4@@PAM0@Z ENDP ; _Vector4MathFunctions::Divide
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Multiply@_Vector4MathFunctions@@UAEXPAUVector4@@PAM0@Z
_TEXT	SEGMENT
$T155825 = -16						; size = 16
_src1$ = 8						; size = 4
_src2$ = 12						; size = 4
_dest$ = 16						; size = 4
?Multiply@_Vector4MathFunctions@@UAEXPAUVector4@@PAM0@Z PROC ; _Vector4MathFunctions::Multiply, COMDAT
; _this$ = ecx

; 472  : {

	sub	esp, 16					; 00000010H

; 473  : 	*dest = Vector4(src1->X * *src2,src1->Y * *src2,src1->Z * *src2,src1->W * *src2);

	mov	eax, DWORD PTR _src1$[esp+12]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _src2$[esp+12]
	fmul	DWORD PTR [ecx]
	fstp	DWORD PTR $T155825[esp+16]
	fld	DWORD PTR [eax+4]
	fmul	DWORD PTR [ecx]
	fstp	DWORD PTR $T155825[esp+20]
	mov	edx, DWORD PTR $T155825[esp+20]
	fld	DWORD PTR [eax+8]
	fmul	DWORD PTR [ecx]
	fstp	DWORD PTR $T155825[esp+24]
	fld	DWORD PTR [eax+12]
	mov	eax, DWORD PTR _dest$[esp+12]
	fmul	DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T155825[esp+16]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR $T155825[esp+24]
	mov	DWORD PTR [eax+4], edx
	fstp	DWORD PTR $T155825[esp+28]
	mov	edx, DWORD PTR $T155825[esp+28]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx

; 474  : }

	add	esp, 16					; 00000010H
	ret	12					; 0000000cH
?Multiply@_Vector4MathFunctions@@UAEXPAUVector4@@PAM0@Z ENDP ; _Vector4MathFunctions::Multiply
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Divide@_Vector4MathFunctions@@UAEXPAUVector4@@00@Z
_TEXT	SEGMENT
$T155836 = -16						; size = 16
_src1$ = 8						; size = 4
_src2$ = 12						; size = 4
_dest$ = 16						; size = 4
?Divide@_Vector4MathFunctions@@UAEXPAUVector4@@00@Z PROC ; _Vector4MathFunctions::Divide, COMDAT
; _this$ = ecx

; 468  : {

	sub	esp, 16					; 00000010H

; 469  : 	*dest = Vector4(src1->X / src2->X,src1->Y / src2->Y,src1->Z / src2->Z,src1->W / src2->W);

	mov	eax, DWORD PTR _src1$[esp+12]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _src2$[esp+12]
	fdiv	DWORD PTR [ecx]
	fstp	DWORD PTR $T155836[esp+16]
	fld	DWORD PTR [eax+4]
	fdiv	DWORD PTR [ecx+4]
	fstp	DWORD PTR $T155836[esp+20]
	fld	DWORD PTR [eax+8]
	fdiv	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR $T155836[esp+20]
	fstp	DWORD PTR $T155836[esp+24]
	fld	DWORD PTR [eax+12]
	fdiv	DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _dest$[esp+12]
	mov	ecx, DWORD PTR $T155836[esp+16]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR $T155836[esp+24]
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx
	fstp	DWORD PTR $T155836[esp+28]
	mov	edx, DWORD PTR $T155836[esp+28]
	mov	DWORD PTR [eax+12], edx

; 470  : }

	add	esp, 16					; 00000010H
	ret	12					; 0000000cH
?Divide@_Vector4MathFunctions@@UAEXPAUVector4@@00@Z ENDP ; _Vector4MathFunctions::Divide
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Multiply@_Vector4MathFunctions@@UAEXPAUVector4@@00@Z
_TEXT	SEGMENT
$T155847 = -16						; size = 16
_src1$ = 8						; size = 4
_src2$ = 12						; size = 4
_dest$ = 16						; size = 4
?Multiply@_Vector4MathFunctions@@UAEXPAUVector4@@00@Z PROC ; _Vector4MathFunctions::Multiply, COMDAT
; _this$ = ecx

; 464  : {

	sub	esp, 16					; 00000010H

; 465  : 	*dest = Vector4(src1->X * src2->X,src1->Y * src2->Y,src1->Z * src2->Z,src1->W * src2->W);

	mov	eax, DWORD PTR _src1$[esp+12]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _src2$[esp+12]
	fmul	DWORD PTR [ecx]
	fstp	DWORD PTR $T155847[esp+16]
	fld	DWORD PTR [eax+4]
	fmul	DWORD PTR [ecx+4]
	fstp	DWORD PTR $T155847[esp+20]
	mov	edx, DWORD PTR $T155847[esp+20]
	fld	DWORD PTR [eax+8]
	fmul	DWORD PTR [ecx+8]
	fstp	DWORD PTR $T155847[esp+24]
	fld	DWORD PTR [eax+12]
	mov	eax, DWORD PTR _dest$[esp+12]
	fmul	DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR $T155847[esp+16]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR $T155847[esp+24]
	mov	DWORD PTR [eax+4], edx
	fstp	DWORD PTR $T155847[esp+28]
	mov	edx, DWORD PTR $T155847[esp+28]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx

; 466  : }

	add	esp, 16					; 00000010H
	ret	12					; 0000000cH
?Multiply@_Vector4MathFunctions@@UAEXPAUVector4@@00@Z ENDP ; _Vector4MathFunctions::Multiply
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Subtract@_Vector4MathFunctions@@UAEXPAUVector4@@00@Z
_TEXT	SEGMENT
$T155858 = -16						; size = 16
_src1$ = 8						; size = 4
_src2$ = 12						; size = 4
_dest$ = 16						; size = 4
?Subtract@_Vector4MathFunctions@@UAEXPAUVector4@@00@Z PROC ; _Vector4MathFunctions::Subtract, COMDAT
; _this$ = ecx

; 460  : {

	sub	esp, 16					; 00000010H

; 461  : 	*dest = Vector4(src1->X - src2->X,src1->Y - src2->Y,src1->Z - src2->Z,src1->W - src2->W);

	mov	eax, DWORD PTR _src1$[esp+12]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _src2$[esp+12]
	fsub	DWORD PTR [ecx]
	fstp	DWORD PTR $T155858[esp+16]
	fld	DWORD PTR [eax+4]
	fsub	DWORD PTR [ecx+4]
	fstp	DWORD PTR $T155858[esp+20]
	mov	edx, DWORD PTR $T155858[esp+20]
	fld	DWORD PTR [eax+8]
	fsub	DWORD PTR [ecx+8]
	fstp	DWORD PTR $T155858[esp+24]
	fld	DWORD PTR [eax+12]
	mov	eax, DWORD PTR _dest$[esp+12]
	fsub	DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR $T155858[esp+16]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR $T155858[esp+24]
	mov	DWORD PTR [eax+4], edx
	fstp	DWORD PTR $T155858[esp+28]
	mov	edx, DWORD PTR $T155858[esp+28]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx

; 462  : }

	add	esp, 16					; 00000010H
	ret	12					; 0000000cH
?Subtract@_Vector4MathFunctions@@UAEXPAUVector4@@00@Z ENDP ; _Vector4MathFunctions::Subtract
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Add@_Vector4MathFunctions@@UAEXPAUVector4@@00@Z
_TEXT	SEGMENT
$T155869 = -16						; size = 16
_src1$ = 8						; size = 4
_src2$ = 12						; size = 4
_dest$ = 16						; size = 4
?Add@_Vector4MathFunctions@@UAEXPAUVector4@@00@Z PROC	; _Vector4MathFunctions::Add, COMDAT
; _this$ = ecx

; 456  : {

	sub	esp, 16					; 00000010H

; 457  : 	*dest = Vector4(src1->X - src2->X,src1->Y - src2->Y,src1->Z - src2->Z,src1->W - src2->W);

	mov	eax, DWORD PTR _src1$[esp+12]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _src2$[esp+12]
	fsub	DWORD PTR [ecx]
	fstp	DWORD PTR $T155869[esp+16]
	fld	DWORD PTR [eax+4]
	fsub	DWORD PTR [ecx+4]
	fstp	DWORD PTR $T155869[esp+20]
	mov	edx, DWORD PTR $T155869[esp+20]
	fld	DWORD PTR [eax+8]
	fsub	DWORD PTR [ecx+8]
	fstp	DWORD PTR $T155869[esp+24]
	fld	DWORD PTR [eax+12]
	mov	eax, DWORD PTR _dest$[esp+12]
	fsub	DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR $T155869[esp+16]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR $T155869[esp+24]
	mov	DWORD PTR [eax+4], edx
	fstp	DWORD PTR $T155869[esp+28]
	mov	edx, DWORD PTR $T155869[esp+28]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx

; 458  : }

	add	esp, 16					; 00000010H
	ret	12					; 0000000cH
?Add@_Vector4MathFunctions@@UAEXPAUVector4@@00@Z ENDP	; _Vector4MathFunctions::Add
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Normalize@_Vector3MathFunctions@@UAE?AUVector3@@PAU2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_src$ = 12						; size = 4
?Normalize@_Vector3MathFunctions@@UAE?AUVector3@@PAU2@@Z PROC ; _Vector3MathFunctions::Normalize, COMDAT
; _this$ = ecx

; 289  :  	Vector3 temp;

	fldz

; 290  : 	this->Normalize(src,&temp);

	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _src$[esp-4]
	mov	eax, DWORD PTR [eax+60]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[esp]
	fst	DWORD PTR [esi]
	push	esi
	fst	DWORD PTR [esi+4]
	push	edx
	fstp	DWORD PTR [esi+8]
	call	eax

; 291  : 	return temp;

	mov	eax, esi
	pop	esi

; 292  : }

	ret	8
?Normalize@_Vector3MathFunctions@@UAE?AUVector3@@PAU2@@Z ENDP ; _Vector3MathFunctions::Normalize
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Cross@_Vector3MathFunctions@@UAE?AUVector3@@PAU2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_src1$ = 12						; size = 4
_src2$ = 16						; size = 4
?Cross@_Vector3MathFunctions@@UAE?AUVector3@@PAU2@0@Z PROC ; _Vector3MathFunctions::Cross, COMDAT
; _this$ = ecx

; 283  :  	Vector3 temp;

	fldz

; 284  : 	this->Cross(src1,src2,&temp);

	mov	edx, DWORD PTR _src2$[esp-4]
	mov	eax, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+52]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[esp]
	push	esi
	fst	DWORD PTR [esi]
	push	edx
	fst	DWORD PTR [esi+4]
	mov	edx, DWORD PTR _src1$[esp+8]
	fstp	DWORD PTR [esi+8]
	push	edx
	call	eax

; 285  : 	return temp;

	mov	eax, esi
	pop	esi

; 286  : }

	ret	12					; 0000000cH
?Cross@_Vector3MathFunctions@@UAE?AUVector3@@PAU2@0@Z ENDP ; _Vector3MathFunctions::Cross
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Divide@_Vector3MathFunctions@@UAE?AUVector3@@PAU2@PAM@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_src1$ = 12						; size = 4
_src2$ = 16						; size = 4
?Divide@_Vector3MathFunctions@@UAE?AUVector3@@PAU2@PAM@Z PROC ; _Vector3MathFunctions::Divide, COMDAT
; _this$ = ecx

; 277  :  	Vector3 temp;

	fldz

; 278  : 	this->Divide(src1,src2,&temp);

	mov	edx, DWORD PTR _src2$[esp-4]
	mov	eax, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+40]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[esp]
	push	esi
	fst	DWORD PTR [esi]
	push	edx
	fst	DWORD PTR [esi+4]
	mov	edx, DWORD PTR _src1$[esp+8]
	fstp	DWORD PTR [esi+8]
	push	edx
	call	eax

; 279  : 	return temp;

	mov	eax, esi
	pop	esi

; 280  : }

	ret	12					; 0000000cH
?Divide@_Vector3MathFunctions@@UAE?AUVector3@@PAU2@PAM@Z ENDP ; _Vector3MathFunctions::Divide
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Multiply@_Vector3MathFunctions@@UAE?AUVector3@@PAU2@PAM@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_src1$ = 12						; size = 4
_src2$ = 16						; size = 4
?Multiply@_Vector3MathFunctions@@UAE?AUVector3@@PAU2@PAM@Z PROC ; _Vector3MathFunctions::Multiply, COMDAT
; _this$ = ecx

; 271  :  	Vector3 temp;

	fldz

; 272  : 	this->Multiply(src1,src2,&temp);

	mov	edx, DWORD PTR _src2$[esp-4]
	mov	eax, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+24]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[esp]
	push	esi
	fst	DWORD PTR [esi]
	push	edx
	fst	DWORD PTR [esi+4]
	mov	edx, DWORD PTR _src1$[esp+8]
	fstp	DWORD PTR [esi+8]
	push	edx
	call	eax

; 273  : 	return temp;

	mov	eax, esi
	pop	esi

; 274  : }

	ret	12					; 0000000cH
?Multiply@_Vector3MathFunctions@@UAE?AUVector3@@PAU2@PAM@Z ENDP ; _Vector3MathFunctions::Multiply
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Divide@_Vector3MathFunctions@@UAE?AUVector3@@PAU2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_src1$ = 12						; size = 4
_src2$ = 16						; size = 4
?Divide@_Vector3MathFunctions@@UAE?AUVector3@@PAU2@0@Z PROC ; _Vector3MathFunctions::Divide, COMDAT
; _this$ = ecx

; 265  :  	Vector3 temp;

	fldz

; 266  : 	this->Divide(src1,src2,&temp);

	mov	edx, DWORD PTR _src2$[esp-4]
	mov	eax, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+44]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[esp]
	push	esi
	fst	DWORD PTR [esi]
	push	edx
	fst	DWORD PTR [esi+4]
	mov	edx, DWORD PTR _src1$[esp+8]
	fstp	DWORD PTR [esi+8]
	push	edx
	call	eax

; 267  : 	return temp;

	mov	eax, esi
	pop	esi

; 268  : }

	ret	12					; 0000000cH
?Divide@_Vector3MathFunctions@@UAE?AUVector3@@PAU2@0@Z ENDP ; _Vector3MathFunctions::Divide
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Multiply@_Vector3MathFunctions@@UAE?AUVector3@@PAU2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_src1$ = 12						; size = 4
_src2$ = 16						; size = 4
?Multiply@_Vector3MathFunctions@@UAE?AUVector3@@PAU2@0@Z PROC ; _Vector3MathFunctions::Multiply, COMDAT
; _this$ = ecx

; 259  :  	Vector3 temp;

	fldz

; 260  : 	this->Multiply(src1,src2,&temp);

	mov	edx, DWORD PTR _src2$[esp-4]
	mov	eax, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+28]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[esp]
	push	esi
	fst	DWORD PTR [esi]
	push	edx
	fst	DWORD PTR [esi+4]
	mov	edx, DWORD PTR _src1$[esp+8]
	fstp	DWORD PTR [esi+8]
	push	edx
	call	eax

; 261  : 	return temp;

	mov	eax, esi
	pop	esi

; 262  : }

	ret	12					; 0000000cH
?Multiply@_Vector3MathFunctions@@UAE?AUVector3@@PAU2@0@Z ENDP ; _Vector3MathFunctions::Multiply
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Subtract@_Vector3MathFunctions@@UAE?AUVector3@@PAU2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_src1$ = 12						; size = 4
_src2$ = 16						; size = 4
?Subtract@_Vector3MathFunctions@@UAE?AUVector3@@PAU2@0@Z PROC ; _Vector3MathFunctions::Subtract, COMDAT
; _this$ = ecx

; 253  :  	Vector3 temp;

	fldz

; 254  : 	this->Subtract(src1,src2,&temp);

	mov	edx, DWORD PTR _src2$[esp-4]
	mov	eax, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+12]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[esp]
	push	esi
	fst	DWORD PTR [esi]
	push	edx
	fst	DWORD PTR [esi+4]
	mov	edx, DWORD PTR _src1$[esp+8]
	fstp	DWORD PTR [esi+8]
	push	edx
	call	eax

; 255  : 	return temp;

	mov	eax, esi
	pop	esi

; 256  : }

	ret	12					; 0000000cH
?Subtract@_Vector3MathFunctions@@UAE?AUVector3@@PAU2@0@Z ENDP ; _Vector3MathFunctions::Subtract
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Add@_Vector3MathFunctions@@UAE?AUVector3@@PAU2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_src1$ = 12						; size = 4
_src2$ = 16						; size = 4
?Add@_Vector3MathFunctions@@UAE?AUVector3@@PAU2@0@Z PROC ; _Vector3MathFunctions::Add, COMDAT
; _this$ = ecx

; 247  : 	Vector3 temp;

	fldz

; 248  : 	this->Add(src1,src2,&temp);

	mov	edx, DWORD PTR _src2$[esp-4]
	mov	eax, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[esp]
	push	esi
	fst	DWORD PTR [esi]
	push	edx
	fst	DWORD PTR [esi+4]
	mov	edx, DWORD PTR _src1$[esp+8]
	fstp	DWORD PTR [esi+8]
	push	edx
	call	eax

; 249  : 	return temp;

	mov	eax, esi
	pop	esi

; 250  : }

	ret	12					; 0000000cH
?Add@_Vector3MathFunctions@@UAE?AUVector3@@PAU2@0@Z ENDP ; _Vector3MathFunctions::Add
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Cross@_Vector3MathFunctions@@UAEXPAUVector3@@00@Z
_TEXT	SEGMENT
$T155928 = -12						; size = 12
_src1$ = 8						; size = 4
_src2$ = 12						; size = 4
_dest$ = 16						; size = 4
?Cross@_Vector3MathFunctions@@UAEXPAUVector3@@00@Z PROC	; _Vector3MathFunctions::Cross, COMDAT
; _this$ = ecx

; 228  : {

	sub	esp, 12					; 0000000cH

; 229  : 	*dest = Vector3(src1->X * src2->Z - src1->Z * src2->Y,src1->Z * src2->X - src1->X * src2->Z,src1->X * src2->Y - src1->Y * src2->Z);

	mov	ecx, DWORD PTR _src1$[esp+8]
	mov	eax, DWORD PTR _src2$[esp+8]
	fld	DWORD PTR [ecx]
	fmul	DWORD PTR [eax+8]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR [eax+4]
	fsubr	ST(0), ST(1)
	fstp	DWORD PTR $T155928[esp+12]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR [eax]
	fsubrp	ST(1), ST(0)
	fstp	DWORD PTR $T155928[esp+16]
	mov	edx, DWORD PTR $T155928[esp+16]
	fld	DWORD PTR [ecx]
	fmul	DWORD PTR [eax+4]
	fld	DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR $T155928[esp+12]
	fmul	DWORD PTR [eax+8]
	mov	eax, DWORD PTR _dest$[esp+8]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR $T155928[esp+20]
	mov	ecx, DWORD PTR $T155928[esp+20]
	mov	DWORD PTR [eax+8], ecx

; 230  : }

	add	esp, 12					; 0000000cH
	ret	12					; 0000000cH
?Cross@_Vector3MathFunctions@@UAEXPAUVector3@@00@Z ENDP	; _Vector3MathFunctions::Cross
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Divide@_Vector3MathFunctions@@UAEXPAUVector3@@PAM0@Z
_TEXT	SEGMENT
$T155938 = -12						; size = 12
_src1$ = 8						; size = 4
_src2$ = 12						; size = 4
_dest$ = 16						; size = 4
?Divide@_Vector3MathFunctions@@UAEXPAUVector3@@PAM0@Z PROC ; _Vector3MathFunctions::Divide, COMDAT
; _this$ = ecx

; 224  : {

	sub	esp, 12					; 0000000cH

; 225  :  	*dest = Vector3(src1->X / *src2,src1->Y / *src2,src1->Z / *src2);

	fld1
	mov	eax, DWORD PTR _src2$[esp+8]
	fdiv	DWORD PTR [eax]
	mov	eax, DWORD PTR _src1$[esp+8]
	fld	DWORD PTR [eax]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR $T155938[esp+12]
	mov	ecx, DWORD PTR $T155938[esp+12]
	fld	DWORD PTR [eax+4]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR $T155938[esp+16]
	mov	edx, DWORD PTR $T155938[esp+16]
	fmul	DWORD PTR [eax+8]
	mov	eax, DWORD PTR _dest$[esp+8]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	fstp	DWORD PTR $T155938[esp+20]
	mov	ecx, DWORD PTR $T155938[esp+20]
	mov	DWORD PTR [eax+8], ecx

; 226  : }

	add	esp, 12					; 0000000cH
	ret	12					; 0000000cH
?Divide@_Vector3MathFunctions@@UAEXPAUVector3@@PAM0@Z ENDP ; _Vector3MathFunctions::Divide
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Multiply@_Vector3MathFunctions@@UAEXPAUVector3@@PAM0@Z
_TEXT	SEGMENT
$T155948 = -12						; size = 12
_src1$ = 8						; size = 4
_src2$ = 12						; size = 4
_dest$ = 16						; size = 4
?Multiply@_Vector3MathFunctions@@UAEXPAUVector3@@PAM0@Z PROC ; _Vector3MathFunctions::Multiply, COMDAT
; _this$ = ecx

; 220  : {

	sub	esp, 12					; 0000000cH

; 221  : 	*dest = Vector3(src1->X * *src2,src1->Y * *src2,src1->Z * *src2);

	mov	eax, DWORD PTR _src1$[esp+8]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _src2$[esp+8]
	fmul	DWORD PTR [ecx]
	fstp	DWORD PTR $T155948[esp+12]
	fld	DWORD PTR [eax+4]
	fmul	DWORD PTR [ecx]
	fstp	DWORD PTR $T155948[esp+16]
	mov	edx, DWORD PTR $T155948[esp+16]
	fld	DWORD PTR [eax+8]
	mov	eax, DWORD PTR _dest$[esp+8]
	fmul	DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T155948[esp+12]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	fstp	DWORD PTR $T155948[esp+20]
	mov	ecx, DWORD PTR $T155948[esp+20]
	mov	DWORD PTR [eax+8], ecx

; 222  : }

	add	esp, 12					; 0000000cH
	ret	12					; 0000000cH
?Multiply@_Vector3MathFunctions@@UAEXPAUVector3@@PAM0@Z ENDP ; _Vector3MathFunctions::Multiply
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Divide@_Vector3MathFunctions@@UAEXPAUVector3@@00@Z
_TEXT	SEGMENT
$T155958 = -12						; size = 12
_src1$ = 8						; size = 4
_src2$ = 12						; size = 4
_dest$ = 16						; size = 4
?Divide@_Vector3MathFunctions@@UAEXPAUVector3@@00@Z PROC ; _Vector3MathFunctions::Divide, COMDAT
; _this$ = ecx

; 216  : {

	sub	esp, 12					; 0000000cH

; 217  : 	*dest = Vector3(src1->X / src2->X,src1->Y / src2->Y,src1->Z / src2->Z);

	mov	eax, DWORD PTR _src1$[esp+8]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _src2$[esp+8]
	fdiv	DWORD PTR [ecx]
	fstp	DWORD PTR $T155958[esp+12]
	fld	DWORD PTR [eax+4]
	fdiv	DWORD PTR [ecx+4]
	fstp	DWORD PTR $T155958[esp+16]
	fld	DWORD PTR [eax+8]
	fdiv	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR $T155958[esp+16]
	mov	eax, DWORD PTR _dest$[esp+8]
	mov	ecx, DWORD PTR $T155958[esp+12]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	fstp	DWORD PTR $T155958[esp+20]
	mov	ecx, DWORD PTR $T155958[esp+20]
	mov	DWORD PTR [eax+8], ecx

; 218  : }

	add	esp, 12					; 0000000cH
	ret	12					; 0000000cH
?Divide@_Vector3MathFunctions@@UAEXPAUVector3@@00@Z ENDP ; _Vector3MathFunctions::Divide
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Multiply@_Vector3MathFunctions@@UAEXPAUVector3@@00@Z
_TEXT	SEGMENT
$T155968 = -12						; size = 12
_src1$ = 8						; size = 4
_src2$ = 12						; size = 4
_dest$ = 16						; size = 4
?Multiply@_Vector3MathFunctions@@UAEXPAUVector3@@00@Z PROC ; _Vector3MathFunctions::Multiply, COMDAT
; _this$ = ecx

; 212  : {

	sub	esp, 12					; 0000000cH

; 213  : 	*dest = Vector3(src1->X * src2->X,src1->Y * src2->Y,src1->Z * src2->Z);

	mov	eax, DWORD PTR _src1$[esp+8]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _src2$[esp+8]
	fmul	DWORD PTR [ecx]
	fstp	DWORD PTR $T155968[esp+12]
	fld	DWORD PTR [eax+4]
	fmul	DWORD PTR [ecx+4]
	fstp	DWORD PTR $T155968[esp+16]
	mov	edx, DWORD PTR $T155968[esp+16]
	fld	DWORD PTR [eax+8]
	mov	eax, DWORD PTR _dest$[esp+8]
	fmul	DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR $T155968[esp+12]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	fstp	DWORD PTR $T155968[esp+20]
	mov	ecx, DWORD PTR $T155968[esp+20]
	mov	DWORD PTR [eax+8], ecx

; 214  : }

	add	esp, 12					; 0000000cH
	ret	12					; 0000000cH
?Multiply@_Vector3MathFunctions@@UAEXPAUVector3@@00@Z ENDP ; _Vector3MathFunctions::Multiply
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Subtract@_Vector3MathFunctions@@UAEXPAUVector3@@00@Z
_TEXT	SEGMENT
$T155978 = -12						; size = 12
_src1$ = 8						; size = 4
_src2$ = 12						; size = 4
_dest$ = 16						; size = 4
?Subtract@_Vector3MathFunctions@@UAEXPAUVector3@@00@Z PROC ; _Vector3MathFunctions::Subtract, COMDAT
; _this$ = ecx

; 208  : {

	sub	esp, 12					; 0000000cH

; 209  : 	*dest = Vector3(src1->X - src2->X,src1->Y - src2->Y,src1->Z - src2->Z);

	mov	eax, DWORD PTR _src1$[esp+8]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _src2$[esp+8]
	fsub	DWORD PTR [ecx]
	fstp	DWORD PTR $T155978[esp+12]
	fld	DWORD PTR [eax+4]
	fsub	DWORD PTR [ecx+4]
	fstp	DWORD PTR $T155978[esp+16]
	mov	edx, DWORD PTR $T155978[esp+16]
	fld	DWORD PTR [eax+8]
	mov	eax, DWORD PTR _dest$[esp+8]
	fsub	DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR $T155978[esp+12]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	fstp	DWORD PTR $T155978[esp+20]
	mov	ecx, DWORD PTR $T155978[esp+20]
	mov	DWORD PTR [eax+8], ecx

; 210  : }

	add	esp, 12					; 0000000cH
	ret	12					; 0000000cH
?Subtract@_Vector3MathFunctions@@UAEXPAUVector3@@00@Z ENDP ; _Vector3MathFunctions::Subtract
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Add@_Vector3MathFunctions@@UAEXPAUVector3@@00@Z
_TEXT	SEGMENT
$T155988 = -12						; size = 12
_src1$ = 8						; size = 4
_src2$ = 12						; size = 4
_dest$ = 16						; size = 4
?Add@_Vector3MathFunctions@@UAEXPAUVector3@@00@Z PROC	; _Vector3MathFunctions::Add, COMDAT
; _this$ = ecx

; 204  : {

	sub	esp, 12					; 0000000cH

; 205  : 	*dest = Vector3(src1->X + src2->X,src1->Y + src2->Y,src1->Z + src2->Z);

	mov	eax, DWORD PTR _src1$[esp+8]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _src2$[esp+8]
	fadd	DWORD PTR [ecx]
	fstp	DWORD PTR $T155988[esp+12]
	fld	DWORD PTR [eax+4]
	fadd	DWORD PTR [ecx+4]
	fstp	DWORD PTR $T155988[esp+16]
	mov	edx, DWORD PTR $T155988[esp+16]
	fld	DWORD PTR [eax+8]
	mov	eax, DWORD PTR _dest$[esp+8]
	fadd	DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR $T155988[esp+12]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	fstp	DWORD PTR $T155988[esp+20]
	mov	ecx, DWORD PTR $T155988[esp+20]
	mov	DWORD PTR [eax+8], ecx

; 206  : }

	add	esp, 12					; 0000000cH
	ret	12					; 0000000cH
?Add@_Vector3MathFunctions@@UAEXPAUVector3@@00@Z ENDP	; _Vector3MathFunctions::Add
_TEXT	ENDS
PUBLIC	??0Vector2@@QAE@XZ				; Vector2::Vector2
; Function compile flags: /Ogtpy
;	COMDAT ??0Vector2@@QAE@XZ
_TEXT	SEGMENT
??0Vector2@@QAE@XZ PROC					; Vector2::Vector2, COMDAT
; _this$ = ecx

; 52   : {

	mov	eax, ecx

; 53   : 	Vector2::Vector2(0,0);
; 54   : }

	ret	0
??0Vector2@@QAE@XZ ENDP					; Vector2::Vector2
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 9.0\vc\include\math.h
_TEXT	ENDS
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT

; 534  :         {return (sqrtf(_X)); }

	fld	DWORD PTR __X$[esp-4]
	fsqrt
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
; Function compile flags: /Ogtpy
; File c:\users\admin\desktop\projects\seye_server\engine_math.cpp
;	COMDAT ?Normalize@_Vector3MathFunctions@@UAEXPAUVector3@@0@Z
_TEXT	SEGMENT
$T160086 = -12						; size = 12
$T160085 = -12						; size = 12
_src1$ = 8						; size = 4
_dest$ = 12						; size = 4
?Normalize@_Vector3MathFunctions@@UAEXPAUVector3@@0@Z PROC ; _Vector3MathFunctions::Normalize, COMDAT
; _this$ = ecx

; 233  :  	float magnitude = src1->X * src1->X + src1->Y * src1->Y + src1->Z * src1->Z;

	mov	ecx, DWORD PTR _src1$[esp-4]
	fld	DWORD PTR [ecx+8]
	sub	esp, 12					; 0000000cH
	fld	DWORD PTR [ecx+4]
	fld	DWORD PTR [ecx]
	fmul	ST(0), ST(0)
	fld	ST(1)
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fld	ST(1)
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)

; 234  : 	if (!magnitude)

	fldz
	fld	ST(0)
	fucomp	ST(2)
	fnstsw	ax
	test	ah, 68					; 00000044H
	mov	eax, DWORD PTR _dest$[esp+8]
	jp	SHORT $LN13@Normalize

; 235  : 	{
; 236  : 		*dest = Vector3();

	fst	DWORD PTR $T160085[esp+12]
	mov	edx, DWORD PTR $T160085[esp+12]
	mov	DWORD PTR [eax], edx
	fst	DWORD PTR $T160085[esp+16]
	mov	edx, DWORD PTR $T160085[esp+16]
	fstp	DWORD PTR $T160085[esp+20]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR $T160085[esp+20]
	mov	DWORD PTR [eax+8], edx
	jmp	SHORT $LN1@Normalize
$LN13@Normalize:
	fstp	ST(0)
$LN1@Normalize:

; 237  : 	}
; 238  : 	float multiply = 1.0f / sqrt(magnitude);

	fsqrt
	fld1
	fdivrp	ST(1), ST(0)

; 239  : 	*dest = Vector3(src1->X * multiply,src1->Y * multiply,src1->Z * multiply);

	fld	DWORD PTR [ecx]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR $T160086[esp+12]
	fld	ST(0)
	fmul	DWORD PTR [ecx+4]
	fstp	DWORD PTR $T160086[esp+16]
	mov	edx, DWORD PTR $T160086[esp+16]
	fmul	DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR $T160086[esp+12]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	fstp	DWORD PTR $T160086[esp+20]
	mov	ecx, DWORD PTR $T160086[esp+20]
	mov	DWORD PTR [eax+8], ecx

; 240  : }

	add	esp, 12					; 0000000cH
	ret	8
?Normalize@_Vector3MathFunctions@@UAEXPAUVector3@@0@Z ENDP ; _Vector3MathFunctions::Normalize
END
